
BLDC_MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004524  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00004524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200bc  2**0
                  CONTENTS
  4 .bss          0000044c  200000bc  000045e0  000200bc  2**2
                  ALLOC
  5 .stack        00008000  20000508  00004a2c  000200bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003d127  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005148  00000000  00000000  0005d26a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000130ed  00000000  00000000  000623b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010a8  00000000  00000000  0007549f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001098  00000000  00000000  00076547  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fd11  00000000  00000000  000775df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d134  00000000  00000000  000a72f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000f030b  00000000  00000000  000c4424  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002a2c  00000000  00000000  001b4730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 85 00 20 d9 0c 00 00 d5 0c 00 00 d5 0c 00 00     ... ............
      10:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 00 00 00 00     ................
	...
      2c:	d5 0c 00 00 d5 0c 00 00 00 00 00 00 d5 0c 00 00     ................
      3c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      4c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      5c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      6c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      7c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      8c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      9c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      ac:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      bc:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      cc:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
      dc:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 00 00 00 00     ................
	...
      f4:	61 27 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     a'..............
     104:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     114:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     124:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     134:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     144:	d5 0c 00 00 c5 28 00 00 d9 28 00 00 ed 28 00 00     .....(...(...(..
     154:	01 29 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .)..............
	...
     180:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     190:	00 00 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     1a0:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     1b0:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     1c0:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     1d0:	d5 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	e5 31 00 00 d5 0c 00 00 21 30 00 00 d5 0c 00 00     .1......!0......
	...
     20c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 c1 22 00 00     ............."..
     21c:	5d 32 00 00 d5 22 00 00 f5 32 00 00 d5 0c 00 00     ]2..."...2......
     22c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     23c:	d5 0c 00 00 00 00 00 00 d5 0c 00 00 d5 0c 00 00     ................
     24c:	d5 0c 00 00 d5 0c 00 00 d5 0c 00 00 d5 0c 00 00     ................
     25c:	d5 0c 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000bc 	.word	0x200000bc
     280:	00000000 	.word	0x00000000
     284:	00004524 	.word	0x00004524

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004524 	.word	0x00004524
     2c4:	200000c0 	.word	0x200000c0
     2c8:	00004524 	.word	0x00004524
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
     2d0:	b508      	push	{r3, lr}
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00001411 	.word	0x00001411

000002dc <pid_controller>:
{
	return (out[0] + kt*motor_speed);
}

PIDvariable pid_controller(PIDvariable out, float x_d, float x, PIDcontrol K)
{
     2dc:	b084      	sub	sp, #16
     2de:	b470      	push	{r4, r5, r6}
     2e0:	4606      	mov	r6, r0
     2e2:	a804      	add	r0, sp, #16
     2e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//system_interrupt_enter_critical_section();
	out.e_k[0] = x_d-x;
     2e8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
     2ec:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
     2f0:	ee37 7a67 	vsub.f32	s14, s14, s15
     2f4:	ed8d 7a07 	vstr	s14, [sp, #28]
	
	out.y_k[0]= out.y_k[1]+ K.Kp*((out.e_k[0]-out.e_k[1])+ (K.Ki*(out.e_k[0]+out.e_k[1]-out.d_y[0]-out.d_y[1]))/Fs/2);
     2f8:	eddd 7a08 	vldr	s15, [sp, #32]
     2fc:	ee77 6a67 	vsub.f32	s13, s14, s15
     300:	ee77 7a27 	vadd.f32	s15, s14, s15
     304:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
     308:	ee77 7ae5 	vsub.f32	s15, s15, s11
     30c:	ed9d 6a0b 	vldr	s12, [sp, #44]	; 0x2c
     310:	ee77 7ac6 	vsub.f32	s15, s15, s12
     314:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
     318:	ee26 6a27 	vmul.f32	s12, s12, s15
     31c:	ed9f 5a21 	vldr	s10, [pc, #132]	; 3a4 <pid_controller+0xc8>
     320:	eec6 7a05 	vdiv.f32	s15, s12, s10
     324:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
     328:	ee67 7a86 	vmul.f32	s15, s15, s12
     32c:	ee76 6aa7 	vadd.f32	s13, s13, s15
     330:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
     334:	ee67 6aa6 	vmul.f32	s13, s15, s13
     338:	eddd 7a05 	vldr	s15, [sp, #20]
     33c:	ee77 7aa6 	vadd.f32	s15, s15, s13
     340:	edcd 7a04 	vstr	s15, [sp, #16]
	
	out.y_k[1] = out.y_k[0];
     344:	edcd 7a05 	vstr	s15, [sp, #20]
	out.e_k[1] =out.e_k[0];
     348:	ed8d 7a08 	vstr	s14, [sp, #32]
	out.d_y[1] = out.d_y[0];
     34c:	edcd 5a0b 	vstr	s11, [sp, #44]	; 0x2c
	
	if (out.y_k[0]>K.max){
     350:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
     354:	eef4 7ac7 	vcmpe.f32	s15, s14
     358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     35c:	dc09      	bgt.n	372 <pid_controller+0x96>
		out.d_y[0] =  out.y_k[0]-K.max;
		out.y_k[0] = K.max;
	}
	else if (out.y_k[0]<K.min){
     35e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
     362:	eef4 7ac7 	vcmpe.f32	s15, s14
     366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     36a:	d414      	bmi.n	396 <pid_controller+0xba>
		out.d_y[0] =  out.y_k[0]-K.min;
		out.y_k[0] = K.min;
	}
	else{
		out.d_y[0] = 0;
     36c:	2300      	movs	r3, #0
     36e:	930a      	str	r3, [sp, #40]	; 0x28
     370:	e005      	b.n	37e <pid_controller+0xa2>
		out.d_y[0] =  out.y_k[0]-K.max;
     372:	ee77 7ac7 	vsub.f32	s15, s15, s14
     376:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
		out.y_k[0] = K.max;
     37a:	ed8d 7a04 	vstr	s14, [sp, #16]
		
	}
	
	
	
	return out;
     37e:	4634      	mov	r4, r6
     380:	ad04      	add	r5, sp, #16
     382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     38a:	682b      	ldr	r3, [r5, #0]
     38c:	6023      	str	r3, [r4, #0]
	//system_interrupt_leave_critical_section();
}
     38e:	4630      	mov	r0, r6
     390:	bc70      	pop	{r4, r5, r6}
     392:	b004      	add	sp, #16
     394:	4770      	bx	lr
		out.d_y[0] =  out.y_k[0]-K.min;
     396:	ee77 7ac7 	vsub.f32	s15, s15, s14
     39a:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
		out.y_k[0] = K.min;
     39e:	ed8d 7a04 	vstr	s14, [sp, #16]
     3a2:	e7ec      	b.n	37e <pid_controller+0xa2>
     3a4:	46c35000 	.word	0x46c35000

000003a8 <init_PWM>:

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
     3a8:	4a1f      	ldr	r2, [pc, #124]	; (428 <init_PWM+0x80>)
     3aa:	6813      	ldr	r3, [r2, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
     3ac:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
	((Tcc *)hw)->CTRLA.reg = tmp;
     3b0:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     3b2:	4b1d      	ldr	r3, [pc, #116]	; (428 <init_PWM+0x80>)
     3b4:	689b      	ldr	r3, [r3, #8]
     3b6:	f013 0f03 	tst.w	r3, #3
     3ba:	d1fa      	bne.n	3b2 <init_PWM+0xa>
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
     3bc:	4a1b      	ldr	r2, [pc, #108]	; (42c <init_PWM+0x84>)
     3be:	4b1a      	ldr	r3, [pc, #104]	; (428 <init_PWM+0x80>)
     3c0:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     3c2:	4b19      	ldr	r3, [pc, #100]	; (428 <init_PWM+0x80>)
     3c4:	689b      	ldr	r3, [r3, #8]
     3c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
     3ca:	2b00      	cmp	r3, #0
     3cc:	d1f9      	bne.n	3c2 <init_PWM+0x1a>
	tmp = ((Tcc *)hw)->WEXCTRL.reg;
     3ce:	4b16      	ldr	r3, [pc, #88]	; (428 <init_PWM+0x80>)
     3d0:	695a      	ldr	r2, [r3, #20]
	tmp &= ~TCC_WEXCTRL_OTMX_Msk;
     3d2:	f022 0203 	bic.w	r2, r2, #3
	tmp |= TCC_WEXCTRL_OTMX(data);
     3d6:	f042 0202 	orr.w	r2, r2, #2
	((Tcc *)hw)->WEXCTRL.reg = tmp;
     3da:	615a      	str	r2, [r3, #20]
	tmp = ((Tcc *)hw)->WEXCTRL.reg;
     3dc:	695a      	ldr	r2, [r3, #20]
	tmp &= ~TCC_WEXCTRL_DTHS_Msk;
     3de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	tmp |= TCC_WEXCTRL_DTHS(data);
     3e2:	f042 52f0 	orr.w	r2, r2, #503316480	; 0x1e000000
	((Tcc *)hw)->WEXCTRL.reg = tmp;
     3e6:	615a      	str	r2, [r3, #20]
	tmp = ((Tcc *)hw)->WEXCTRL.reg;
     3e8:	695a      	ldr	r2, [r3, #20]
	tmp &= ~TCC_WEXCTRL_DTLS_Msk;
     3ea:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	tmp |= TCC_WEXCTRL_DTLS(data);
     3ee:	f442 12f0 	orr.w	r2, r2, #1966080	; 0x1e0000
	((Tcc *)hw)->WEXCTRL.reg = tmp;
     3f2:	615a      	str	r2, [r3, #20]
	tmp = ((Tcc *)hw)->WEXCTRL.reg;
     3f4:	695a      	ldr	r2, [r3, #20]
	tmp |= value << TCC_WEXCTRL_DTIEN0_Pos;
     3f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	((Tcc *)hw)->WEXCTRL.reg = tmp;
     3fa:	615a      	str	r2, [r3, #20]
	tmp = ((Tcc *)hw)->WEXCTRL.reg;
     3fc:	695a      	ldr	r2, [r3, #20]
	tmp |= value << TCC_WEXCTRL_DTIEN1_Pos;
     3fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
	((Tcc *)hw)->WEXCTRL.reg = tmp;
     402:	615a      	str	r2, [r3, #20]
	tmp = ((Tcc *)hw)->WEXCTRL.reg;
     404:	695a      	ldr	r2, [r3, #20]
	tmp |= value << TCC_WEXCTRL_DTIEN2_Pos;
     406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	((Tcc *)hw)->WEXCTRL.reg = tmp;
     40a:	615a      	str	r2, [r3, #20]
	tmp = ((Tcc *)hw)->WEXCTRL.reg;
     40c:	695a      	ldr	r2, [r3, #20]
	tmp |= value << TCC_WEXCTRL_DTIEN3_Pos;
     40e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	((Tcc *)hw)->WEXCTRL.reg = tmp;
     412:	615a      	str	r2, [r3, #20]
	tmp = ((Tcc *)hw)->CTRLA.reg;
     414:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
     416:	f042 0202 	orr.w	r2, r2, #2
	((Tcc *)hw)->CTRLA.reg = tmp;
     41a:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     41c:	4b02      	ldr	r3, [pc, #8]	; (428 <init_PWM+0x80>)
     41e:	689b      	ldr	r3, [r3, #8]
     420:	f013 0f03 	tst.w	r3, #3
     424:	d1fa      	bne.n	41c <init_PWM+0x74>
	hri_tcc_write_WEXCTRL_DTIEN0_bit(TCC1, 1);
	hri_tcc_write_WEXCTRL_DTIEN1_bit(TCC1, 1);
	hri_tcc_write_WEXCTRL_DTIEN2_bit(TCC1, 1);
	hri_tcc_write_WEXCTRL_DTIEN3_bit(TCC1, 1);
	hri_tcc_write_CTRLA_ENABLE_bit(TCC1, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
     426:	4770      	bx	lr
     428:	41018000 	.word	0x41018000
     42c:	08000005 	.word	0x08000005

00000430 <set_PWM_dutycycle>:
/************************************************************************/
/* BLDC Subfunctions													*/
/************************************************************************/
/*set the PWM dutycycle to a value between 0 and 100. Return -1 if DC is invalid and 0 if ok*/
int set_PWM_dutycycle(float dutycycle)
{
     430:	ee07 0a90 	vmov	s15, r0
	if(dutycycle>100)
     434:	ed9f 7a18 	vldr	s14, [pc, #96]	; 498 <set_PWM_dutycycle+0x68>
     438:	eef4 7ac7 	vcmpe.f32	s15, s14
     43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     440:	dd01      	ble.n	446 <set_PWM_dutycycle+0x16>
	{
		dutycycle = 100;
     442:	eef0 7a47 	vmov.f32	s15, s14
	}
	
	if(dutycycle>=0 && dutycycle<=100)
     446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     44e:	db1c      	blt.n	48a <set_PWM_dutycycle+0x5a>
     450:	ed9f 7a11 	vldr	s14, [pc, #68]	; 498 <set_PWM_dutycycle+0x68>
     454:	eef4 7ac7 	vcmpe.f32	s15, s14
     458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     45c:	d818      	bhi.n	490 <set_PWM_dutycycle+0x60>
{
     45e:	b082      	sub	sp, #8
	{	
		hri_tcc_write_CCBUF_reg(TCC1, 0, (uint16_t)((PWM_25KHZ_PERIOD - (dutycycle*PWM_25KHZ_PERIOD)/100)));
     460:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 49c <set_PWM_dutycycle+0x6c>
     464:	ee67 7a87 	vmul.f32	s15, s15, s14
     468:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 498 <set_PWM_dutycycle+0x68>
     46c:	eec7 6a86 	vdiv.f32	s13, s15, s12
     470:	ee37 7a66 	vsub.f32	s14, s14, s13
     474:	eefc 7ac7 	vcvt.u32.f32	s15, s14
     478:	edcd 7a01 	vstr	s15, [sp, #4]
     47c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
}

static inline void hri_tcc_write_CCBUF_reg(const void *const hw, uint8_t index, hri_tcc_ccbuf_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCBUF[index].reg = data;
     480:	4a07      	ldr	r2, [pc, #28]	; (4a0 <set_PWM_dutycycle+0x70>)
     482:	6713      	str	r3, [r2, #112]	; 0x70
	else
	{
		return -1;
	}
	
	return 0;
     484:	2000      	movs	r0, #0
}
     486:	b002      	add	sp, #8
     488:	4770      	bx	lr
		return -1;
     48a:	f04f 30ff 	mov.w	r0, #4294967295
     48e:	4770      	bx	lr
     490:	f04f 30ff 	mov.w	r0, #4294967295
     494:	4770      	bx	lr
     496:	bf00      	nop
     498:	42c80000 	.word	0x42c80000
     49c:	44fa4000 	.word	0x44fa4000
     4a0:	41018000 	.word	0x41018000

000004a4 <init_currentPID>:

void init_currentPID(){
	currentPIDControl.desired = 0;
     4a4:	4a0a      	ldr	r2, [pc, #40]	; (4d0 <init_currentPID+0x2c>)
     4a6:	2300      	movs	r3, #0
     4a8:	6013      	str	r3, [r2, #0]
	currentPIDControl.Kp = 0;
     4aa:	6053      	str	r3, [r2, #4]
	currentPIDControl.Ki = 0;
     4ac:	6093      	str	r3, [r2, #8]
	currentPIDControl.Kd = 0;
     4ae:	60d3      	str	r3, [r2, #12]
	currentPIDControl.N = 0;
     4b0:	2100      	movs	r1, #0
     4b2:	6111      	str	r1, [r2, #16]
	currentPIDControl.max = 0;
     4b4:	6153      	str	r3, [r2, #20]
	currentPIDControl.min = 0;
     4b6:	6193      	str	r3, [r2, #24]
	currentPIDVar.y_k[0] = 0.0;
     4b8:	4a06      	ldr	r2, [pc, #24]	; (4d4 <init_currentPID+0x30>)
     4ba:	6013      	str	r3, [r2, #0]
	currentPIDVar.y_k[1] = 0.0;
     4bc:	6053      	str	r3, [r2, #4]
	currentPIDVar.y_k[2] = 0.0;
     4be:	6093      	str	r3, [r2, #8]
	currentPIDVar.e_k[0] = 0.0;
     4c0:	60d3      	str	r3, [r2, #12]
	currentPIDVar.e_k[1] = 0.0;
     4c2:	6113      	str	r3, [r2, #16]
	currentPIDVar.e_k[2] = 0.0;
     4c4:	6153      	str	r3, [r2, #20]
	currentPIDVar.d_y[0] = 0.0;
     4c6:	6193      	str	r3, [r2, #24]
	currentPIDVar.d_y[1] = 0.0;
     4c8:	61d3      	str	r3, [r2, #28]
	currentPIDVar.d_y[2] = 0.0;
     4ca:	6213      	str	r3, [r2, #32]
     4cc:	4770      	bx	lr
     4ce:	bf00      	nop
     4d0:	20000350 	.word	0x20000350
     4d4:	200002ac 	.word	0x200002ac

000004d8 <init_speedPID>:
	
}

void init_speedPID(){
	speedPIDControl.desired = 0;
     4d8:	4a0a      	ldr	r2, [pc, #40]	; (504 <init_speedPID+0x2c>)
     4da:	2300      	movs	r3, #0
     4dc:	6013      	str	r3, [r2, #0]
	speedPIDControl.Kp = 0;
     4de:	6053      	str	r3, [r2, #4]
	speedPIDControl.Ki = 0;
     4e0:	6093      	str	r3, [r2, #8]
	speedPIDControl.Kd = 0;
     4e2:	60d3      	str	r3, [r2, #12]
	speedPIDControl.N = 0;
     4e4:	2100      	movs	r1, #0
     4e6:	6111      	str	r1, [r2, #16]
	speedPIDControl.max = 0;
     4e8:	6153      	str	r3, [r2, #20]
	speedPIDControl.min = 0;
     4ea:	6193      	str	r3, [r2, #24]
	speedPIDVar.y_k[0] = 0.0;
     4ec:	4a06      	ldr	r2, [pc, #24]	; (508 <init_speedPID+0x30>)
     4ee:	6013      	str	r3, [r2, #0]
	speedPIDVar.y_k[1] = 0.0;
     4f0:	6053      	str	r3, [r2, #4]
	speedPIDVar.y_k[2] = 0.0;
     4f2:	6093      	str	r3, [r2, #8]
	speedPIDVar.e_k[0] = 0.0;
     4f4:	60d3      	str	r3, [r2, #12]
	speedPIDVar.e_k[1] = 0.0;
     4f6:	6113      	str	r3, [r2, #16]
	speedPIDVar.e_k[2] = 0.0;
     4f8:	6153      	str	r3, [r2, #20]
	speedPIDVar.d_y[0] = 0.0;
     4fa:	6193      	str	r3, [r2, #24]
	speedPIDVar.d_y[1] = 0.0;
     4fc:	61d3      	str	r3, [r2, #28]
	speedPIDVar.d_y[2] = 0.0;
     4fe:	6213      	str	r3, [r2, #32]
     500:	4770      	bx	lr
     502:	bf00      	nop
     504:	20000334 	.word	0x20000334
     508:	20000310 	.word	0x20000310

0000050c <init_posPID>:
}

void init_posPID(){
	posPIDControl.desired = 0;
     50c:	4a0a      	ldr	r2, [pc, #40]	; (538 <init_posPID+0x2c>)
     50e:	2300      	movs	r3, #0
     510:	6013      	str	r3, [r2, #0]
	posPIDControl.Kp = 0;
     512:	6053      	str	r3, [r2, #4]
	posPIDControl.Ki = 0;
     514:	6093      	str	r3, [r2, #8]
	posPIDControl.Kd = 0;
     516:	60d3      	str	r3, [r2, #12]
	posPIDControl.N = 0;
     518:	2100      	movs	r1, #0
     51a:	6111      	str	r1, [r2, #16]
	posPIDControl.max = 0;
     51c:	6153      	str	r3, [r2, #20]
	posPIDControl.min = 0;
     51e:	6193      	str	r3, [r2, #24]
	posPIDVar.y_k[0] = 0.0;
     520:	4a06      	ldr	r2, [pc, #24]	; (53c <init_posPID+0x30>)
     522:	6013      	str	r3, [r2, #0]
	posPIDVar.y_k[1] = 0.0;
     524:	6053      	str	r3, [r2, #4]
	posPIDVar.y_k[2] = 0.0;
     526:	6093      	str	r3, [r2, #8]
	posPIDVar.e_k[0] = 0.0;
     528:	60d3      	str	r3, [r2, #12]
	posPIDVar.e_k[1] = 0.0;
     52a:	6113      	str	r3, [r2, #16]
	posPIDVar.e_k[2] = 0.0;
     52c:	6153      	str	r3, [r2, #20]
	posPIDVar.d_y[0] = 0.0;
     52e:	6193      	str	r3, [r2, #24]
	posPIDVar.d_y[1] = 0.0;
     530:	61d3      	str	r3, [r2, #28]
	posPIDVar.d_y[2] = 0.0;
     532:	6213      	str	r3, [r2, #32]
     534:	4770      	bx	lr
     536:	bf00      	nop
     538:	2000036c 	.word	0x2000036c
     53c:	200002d0 	.word	0x200002d0

00000540 <init_torquePID>:
}

void init_torquePID(){
	torquePIDControl.desired = 0;
     540:	4a0a      	ldr	r2, [pc, #40]	; (56c <init_torquePID+0x2c>)
     542:	2300      	movs	r3, #0
     544:	6013      	str	r3, [r2, #0]
	torquePIDControl.Kp = 0;
     546:	6053      	str	r3, [r2, #4]
	torquePIDControl.Ki = 0;
     548:	6093      	str	r3, [r2, #8]
	torquePIDControl.Kd = 0;
     54a:	60d3      	str	r3, [r2, #12]
	torquePIDControl.N = 0;
     54c:	2100      	movs	r1, #0
     54e:	6111      	str	r1, [r2, #16]
	torquePIDControl.max = 0;
     550:	6153      	str	r3, [r2, #20]
	torquePIDControl.min = 0;
     552:	6193      	str	r3, [r2, #24]
	torquePIDVar.y_k[0] = 0.0;
     554:	4a06      	ldr	r2, [pc, #24]	; (570 <init_torquePID+0x30>)
     556:	6013      	str	r3, [r2, #0]
	torquePIDVar.y_k[1] = 0.0;
     558:	6053      	str	r3, [r2, #4]
	torquePIDVar.y_k[2] = 0.0;
     55a:	6093      	str	r3, [r2, #8]
	torquePIDVar.e_k[0] = 0.0;
     55c:	60d3      	str	r3, [r2, #12]
	torquePIDVar.e_k[1] = 0.0;
     55e:	6113      	str	r3, [r2, #16]
	torquePIDVar.e_k[2] = 0.0;
     560:	6153      	str	r3, [r2, #20]
	torquePIDVar.d_y[0] = 0.0;
     562:	6193      	str	r3, [r2, #24]
	torquePIDVar.d_y[1] = 0.0;
     564:	61d3      	str	r3, [r2, #28]
	torquePIDVar.d_y[2] = 0.0;
     566:	6213      	str	r3, [r2, #32]
     568:	4770      	bx	lr
     56a:	bf00      	nop
     56c:	200002f4 	.word	0x200002f4
     570:	20000388 	.word	0x20000388

00000574 <BLDC_find_step>:
}


/*Read Hallsensor values and find the current commutation state*/
void BLDC_find_step()
{
     574:	b510      	push	{r4, lr}
     576:	b082      	sub	sp, #8
	last_BLDC_commutation_state = current_BLDC_commutation_state;
     578:	4b1c      	ldr	r3, [pc, #112]	; (5ec <BLDC_find_step+0x78>)
     57a:	681a      	ldr	r2, [r3, #0]
     57c:	4b1c      	ldr	r3, [pc, #112]	; (5f0 <BLDC_find_step+0x7c>)
     57e:	601a      	str	r2, [r3, #0]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     580:	a801      	add	r0, sp, #4
     582:	4b1c      	ldr	r3, [pc, #112]	; (5f4 <BLDC_find_step+0x80>)
     584:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     586:	4a1c      	ldr	r2, [pc, #112]	; (5f8 <BLDC_find_step+0x84>)
     588:	6811      	ldr	r1, [r2, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     58a:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     58c:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     58e:	405c      	eors	r4, r3
     590:	400c      	ands	r4, r1
     592:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     594:	a801      	add	r0, sp, #4
     596:	4b19      	ldr	r3, [pc, #100]	; (5fc <BLDC_find_step+0x88>)
     598:	4798      	blx	r3
	
	uint32_t portlevel = (0x0070 & gpio_get_port_level(0)) >> 4;		
     59a:	f3c4 1302 	ubfx	r3, r4, #4, #3
	switch(portlevel)
     59e:	3b01      	subs	r3, #1
     5a0:	2b05      	cmp	r3, #5
     5a2:	d81d      	bhi.n	5e0 <BLDC_find_step+0x6c>
     5a4:	e8df f003 	tbb	[pc, r3]
     5a8:	180c0810 	.word	0x180c0810
     5ac:	0314      	.short	0x0314
	{
		/* 110 */ 
		case 6:
			current_BLDC_commutation_state = 0;
     5ae:	2200      	movs	r2, #0
     5b0:	4b0e      	ldr	r3, [pc, #56]	; (5ec <BLDC_find_step+0x78>)
     5b2:	601a      	str	r2, [r3, #0]
			break;
			
		default:
			current_BLDC_commutation_state = -1;
	}
}
     5b4:	b002      	add	sp, #8
     5b6:	bd10      	pop	{r4, pc}
			current_BLDC_commutation_state = 1;
     5b8:	2201      	movs	r2, #1
     5ba:	4b0c      	ldr	r3, [pc, #48]	; (5ec <BLDC_find_step+0x78>)
     5bc:	601a      	str	r2, [r3, #0]
			break;
     5be:	e7f9      	b.n	5b4 <BLDC_find_step+0x40>
			current_BLDC_commutation_state = 2;
     5c0:	2202      	movs	r2, #2
     5c2:	4b0a      	ldr	r3, [pc, #40]	; (5ec <BLDC_find_step+0x78>)
     5c4:	601a      	str	r2, [r3, #0]
			break;
     5c6:	e7f5      	b.n	5b4 <BLDC_find_step+0x40>
			current_BLDC_commutation_state = 3;
     5c8:	2203      	movs	r2, #3
     5ca:	4b08      	ldr	r3, [pc, #32]	; (5ec <BLDC_find_step+0x78>)
     5cc:	601a      	str	r2, [r3, #0]
			break;
     5ce:	e7f1      	b.n	5b4 <BLDC_find_step+0x40>
			current_BLDC_commutation_state = 4;
     5d0:	2204      	movs	r2, #4
     5d2:	4b06      	ldr	r3, [pc, #24]	; (5ec <BLDC_find_step+0x78>)
     5d4:	601a      	str	r2, [r3, #0]
			break;
     5d6:	e7ed      	b.n	5b4 <BLDC_find_step+0x40>
			current_BLDC_commutation_state = 5;
     5d8:	2205      	movs	r2, #5
     5da:	4b04      	ldr	r3, [pc, #16]	; (5ec <BLDC_find_step+0x78>)
     5dc:	601a      	str	r2, [r3, #0]
			break;
     5de:	e7e9      	b.n	5b4 <BLDC_find_step+0x40>
			current_BLDC_commutation_state = -1;
     5e0:	f04f 32ff 	mov.w	r2, #4294967295
     5e4:	4b01      	ldr	r3, [pc, #4]	; (5ec <BLDC_find_step+0x78>)
     5e6:	601a      	str	r2, [r3, #0]
}
     5e8:	e7e4      	b.n	5b4 <BLDC_find_step+0x40>
     5ea:	bf00      	nop
     5ec:	200000d8 	.word	0x200000d8
     5f0:	20000000 	.word	0x20000000
     5f4:	00001835 	.word	0x00001835
     5f8:	41008000 	.word	0x41008000
     5fc:	00001843 	.word	0x00001843

00000600 <BLDC_revolution_counter>:
}


/*Calculate BLDC revolutions*/
void BLDC_revolution_counter()
{
     600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (current_BLDC_commutation_state==5 && last_BLDC_commutation_state==0)
     602:	4b17      	ldr	r3, [pc, #92]	; (660 <BLDC_revolution_counter+0x60>)
     604:	681b      	ldr	r3, [r3, #0]
     606:	2b05      	cmp	r3, #5
     608:	d01b      	beq.n	642 <BLDC_revolution_counter+0x42>
	{
		BLDC_revolutions--;
	}
	else if(current_BLDC_commutation_state==0 && last_BLDC_commutation_state==5)
     60a:	4b15      	ldr	r3, [pc, #84]	; (660 <BLDC_revolution_counter+0x60>)
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	b91b      	cbnz	r3, 618 <BLDC_revolution_counter+0x18>
     610:	4b14      	ldr	r3, [pc, #80]	; (664 <BLDC_revolution_counter+0x64>)
     612:	681b      	ldr	r3, [r3, #0]
     614:	2b05      	cmp	r3, #5
     616:	d01d      	beq.n	654 <BLDC_revolution_counter+0x54>
	{
		BLDC_revolutions++;
	}
	
	BLDC_relative_steps = BLDC_revolutions*6.0 + current_BLDC_commutation_state;
     618:	4c11      	ldr	r4, [pc, #68]	; (660 <BLDC_revolution_counter+0x60>)
     61a:	6860      	ldr	r0, [r4, #4]
     61c:	4b12      	ldr	r3, [pc, #72]	; (668 <BLDC_revolution_counter+0x68>)
     61e:	4798      	blx	r3
     620:	2200      	movs	r2, #0
     622:	4b12      	ldr	r3, [pc, #72]	; (66c <BLDC_revolution_counter+0x6c>)
     624:	4d12      	ldr	r5, [pc, #72]	; (670 <BLDC_revolution_counter+0x70>)
     626:	47a8      	blx	r5
     628:	4606      	mov	r6, r0
     62a:	460f      	mov	r7, r1
     62c:	6820      	ldr	r0, [r4, #0]
     62e:	4b11      	ldr	r3, [pc, #68]	; (674 <BLDC_revolution_counter+0x74>)
     630:	4798      	blx	r3
     632:	4632      	mov	r2, r6
     634:	463b      	mov	r3, r7
     636:	4d10      	ldr	r5, [pc, #64]	; (678 <BLDC_revolution_counter+0x78>)
     638:	47a8      	blx	r5
     63a:	4b10      	ldr	r3, [pc, #64]	; (67c <BLDC_revolution_counter+0x7c>)
     63c:	4798      	blx	r3
     63e:	60a0      	str	r0, [r4, #8]
     640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (current_BLDC_commutation_state==5 && last_BLDC_commutation_state==0)
     642:	4b08      	ldr	r3, [pc, #32]	; (664 <BLDC_revolution_counter+0x64>)
     644:	681b      	ldr	r3, [r3, #0]
     646:	2b00      	cmp	r3, #0
     648:	d1df      	bne.n	60a <BLDC_revolution_counter+0xa>
		BLDC_revolutions--;
     64a:	4a05      	ldr	r2, [pc, #20]	; (660 <BLDC_revolution_counter+0x60>)
     64c:	6853      	ldr	r3, [r2, #4]
     64e:	3b01      	subs	r3, #1
     650:	6053      	str	r3, [r2, #4]
     652:	e7e1      	b.n	618 <BLDC_revolution_counter+0x18>
		BLDC_revolutions++;
     654:	4a02      	ldr	r2, [pc, #8]	; (660 <BLDC_revolution_counter+0x60>)
     656:	6853      	ldr	r3, [r2, #4]
     658:	3301      	adds	r3, #1
     65a:	6053      	str	r3, [r2, #4]
     65c:	e7dc      	b.n	618 <BLDC_revolution_counter+0x18>
     65e:	bf00      	nop
     660:	200000d8 	.word	0x200000d8
     664:	20000000 	.word	0x20000000
     668:	00003c19 	.word	0x00003c19
     66c:	40180000 	.word	0x40180000
     670:	00003ce5 	.word	0x00003ce5
     674:	00003bf9 	.word	0x00003bf9
     678:	00003981 	.word	0x00003981
     67c:	00004109 	.word	0x00004109

00000680 <BLDC_drive>:

/************************************************************************/
/* BLDC Drive Function                                                  */
/************************************************************************/
void BLDC_drive(float DirectionAndDutycycle)
{
     680:	b500      	push	{lr}
     682:	b083      	sub	sp, #12
     684:	ee07 0a90 	vmov	s15, r0
	volatile int16_t cmd_direction = 0;
     688:	2300      	movs	r3, #0
     68a:	f8ad 3006 	strh.w	r3, [sp, #6]
	volatile float dutycycle = 0;
     68e:	2300      	movs	r3, #0
     690:	9300      	str	r3, [sp, #0]

	//interprete input
	if (DirectionAndDutycycle > 0)
     692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     69a:	dd1a      	ble.n	6d2 <BLDC_drive+0x52>
	{
	    cmd_direction = 1;
     69c:	2301      	movs	r3, #1
     69e:	f8ad 3006 	strh.w	r3, [sp, #6]
		dutycycle = DirectionAndDutycycle;
     6a2:	9000      	str	r0, [sp, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     6a8:	4b2e      	ldr	r3, [pc, #184]	; (764 <BLDC_drive+0xe4>)
     6aa:	619a      	str	r2, [r3, #24]

	//activate driver chip
	gpio_set_pin_level(NSLEEP,true);
	
	//read hallsensor
	BLDC_find_step();
     6ac:	4b2e      	ldr	r3, [pc, #184]	; (768 <BLDC_drive+0xe8>)
     6ae:	4798      	blx	r3
	
	// get revolutions
	BLDC_revolution_counter();
     6b0:	4b2e      	ldr	r3, [pc, #184]	; (76c <BLDC_drive+0xec>)
     6b2:	4798      	blx	r3
	
	/*set the commutation step for pattern*/
	//If motor commutation is in extreme, we look at last and current step to determine the motor direction
	if(current_BLDC_commutation_state != last_BLDC_commutation_state)
     6b4:	4b2e      	ldr	r3, [pc, #184]	; (770 <BLDC_drive+0xf0>)
     6b6:	681a      	ldr	r2, [r3, #0]
     6b8:	4b2e      	ldr	r3, [pc, #184]	; (774 <BLDC_drive+0xf4>)
     6ba:	681b      	ldr	r3, [r3, #0]
     6bc:	429a      	cmp	r2, r3
     6be:	d01d      	beq.n	6fc <BLDC_drive+0x7c>
	{
		switch(current_BLDC_commutation_state)
     6c0:	4b2b      	ldr	r3, [pc, #172]	; (770 <BLDC_drive+0xf0>)
     6c2:	681b      	ldr	r3, [r3, #0]
     6c4:	2b05      	cmp	r3, #5
     6c6:	d819      	bhi.n	6fc <BLDC_drive+0x7c>
     6c8:	e8df f003 	tbb	[pc, r3]
     6cc:	1111112b 	.word	0x1111112b
     6d0:	3711      	.short	0x3711
	else if (DirectionAndDutycycle < 0)
     6d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6da:	d5e3      	bpl.n	6a4 <BLDC_drive+0x24>
		cmd_direction = -1;
     6dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
     6e0:	f8ad 3006 	strh.w	r3, [sp, #6]
		dutycycle = -DirectionAndDutycycle;
     6e4:	eef1 7a67 	vneg.f32	s15, s15
     6e8:	edcd 7a00 	vstr	s15, [sp]
     6ec:	e7da      	b.n	6a4 <BLDC_drive+0x24>
			//Normal cases
			case 1:
			case 2:
			case 3:
			case 4:
				current_BLDC_direction = current_BLDC_commutation_state - last_BLDC_commutation_state;
     6ee:	4a20      	ldr	r2, [pc, #128]	; (770 <BLDC_drive+0xf0>)
     6f0:	6813      	ldr	r3, [r2, #0]
     6f2:	4920      	ldr	r1, [pc, #128]	; (774 <BLDC_drive+0xf4>)
     6f4:	6809      	ldr	r1, [r1, #0]
     6f6:	1a5b      	subs	r3, r3, r1
     6f8:	b25b      	sxtb	r3, r3
     6fa:	7313      	strb	r3, [r2, #12]
	}
	
	
	
	/*Set PWM*/
	set_PWM_dutycycle(dutycycle);
     6fc:	9800      	ldr	r0, [sp, #0]
     6fe:	4b1e      	ldr	r3, [pc, #120]	; (778 <BLDC_drive+0xf8>)
     700:	4798      	blx	r3
	
	/*set pattern*/
	if(cmd_direction >= 0)
     702:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     706:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     70a:	d121      	bne.n	750 <BLDC_drive+0xd0>
	{
		TCC1->PATTBUF.reg = BLDC_commutation_clockwise[current_BLDC_commutation_state];
     70c:	4b18      	ldr	r3, [pc, #96]	; (770 <BLDC_drive+0xf0>)
     70e:	681a      	ldr	r2, [r3, #0]
     710:	4b1a      	ldr	r3, [pc, #104]	; (77c <BLDC_drive+0xfc>)
     712:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
     716:	4b1a      	ldr	r3, [pc, #104]	; (780 <BLDC_drive+0x100>)
     718:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	}
	else
	{
		TCC1->PATTBUF.reg = BLDC_commutation_counter_clockwise[current_BLDC_commutation_state];
	}
}
     71c:	b003      	add	sp, #12
     71e:	f85d fb04 	ldr.w	pc, [sp], #4
				if (last_BLDC_commutation_state == 5)
     722:	4b14      	ldr	r3, [pc, #80]	; (774 <BLDC_drive+0xf4>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	2b05      	cmp	r3, #5
     728:	d003      	beq.n	732 <BLDC_drive+0xb2>
					current_BLDC_direction = -1;
     72a:	22ff      	movs	r2, #255	; 0xff
     72c:	4b10      	ldr	r3, [pc, #64]	; (770 <BLDC_drive+0xf0>)
     72e:	731a      	strb	r2, [r3, #12]
     730:	e7e4      	b.n	6fc <BLDC_drive+0x7c>
					current_BLDC_direction = 1;
     732:	2201      	movs	r2, #1
     734:	4b0e      	ldr	r3, [pc, #56]	; (770 <BLDC_drive+0xf0>)
     736:	731a      	strb	r2, [r3, #12]
     738:	e7e0      	b.n	6fc <BLDC_drive+0x7c>
				if(last_BLDC_commutation_state == 0)
     73a:	4b0e      	ldr	r3, [pc, #56]	; (774 <BLDC_drive+0xf4>)
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	b91b      	cbnz	r3, 748 <BLDC_drive+0xc8>
					current_BLDC_direction = -1;
     740:	22ff      	movs	r2, #255	; 0xff
     742:	4b0b      	ldr	r3, [pc, #44]	; (770 <BLDC_drive+0xf0>)
     744:	731a      	strb	r2, [r3, #12]
     746:	e7d9      	b.n	6fc <BLDC_drive+0x7c>
					current_BLDC_direction = 1;
     748:	2201      	movs	r2, #1
     74a:	4b09      	ldr	r3, [pc, #36]	; (770 <BLDC_drive+0xf0>)
     74c:	731a      	strb	r2, [r3, #12]
     74e:	e7d5      	b.n	6fc <BLDC_drive+0x7c>
		TCC1->PATTBUF.reg = BLDC_commutation_counter_clockwise[current_BLDC_commutation_state];
     750:	4b07      	ldr	r3, [pc, #28]	; (770 <BLDC_drive+0xf0>)
     752:	681a      	ldr	r2, [r3, #0]
     754:	4b09      	ldr	r3, [pc, #36]	; (77c <BLDC_drive+0xfc>)
     756:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     75a:	899a      	ldrh	r2, [r3, #12]
     75c:	4b08      	ldr	r3, [pc, #32]	; (780 <BLDC_drive+0x100>)
     75e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
     762:	e7db      	b.n	71c <BLDC_drive+0x9c>
     764:	41008000 	.word	0x41008000
     768:	00000575 	.word	0x00000575
     76c:	00000601 	.word	0x00000601
     770:	200000d8 	.word	0x200000d8
     774:	20000000 	.word	0x20000000
     778:	00000431 	.word	0x00000431
     77c:	000041f0 	.word	0x000041f0
     780:	41018000 	.word	0x41018000

00000784 <BLDC_control_current>:

void BLDC_control_current(){
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	b09b      	sub	sp, #108	; 0x6c
	/* 1. Current Control*/
	/* constraints check*/
	if(currentPIDControl.desired > speedPIDControl.max){
     788:	4b33      	ldr	r3, [pc, #204]	; (858 <BLDC_control_current+0xd4>)
     78a:	edd3 7a00 	vldr	s15, [r3]
     78e:	4b33      	ldr	r3, [pc, #204]	; (85c <BLDC_control_current+0xd8>)
     790:	ed93 7a05 	vldr	s14, [r3, #20]
     794:	eef4 7ac7 	vcmpe.f32	s15, s14
     798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     79c:	dd4b      	ble.n	836 <BLDC_control_current+0xb2>
 		currentPIDControl.desired = speedPIDControl.max;
     79e:	4b2e      	ldr	r3, [pc, #184]	; (858 <BLDC_control_current+0xd4>)
     7a0:	ed83 7a00 	vstr	s14, [r3]
	} else if(currentPIDControl.desired  < speedPIDControl.min){
 			currentPIDControl.desired = speedPIDControl.min;
 	}
 			
 	/*Voltage calculation*/
	currentPIDVar = pid_controller(currentPIDVar, currentPIDControl.desired, current_reference_current_value,currentPIDControl );
     7a4:	4c2c      	ldr	r4, [pc, #176]	; (858 <BLDC_control_current+0xd4>)
     7a6:	6827      	ldr	r7, [r4, #0]
     7a8:	4b2d      	ldr	r3, [pc, #180]	; (860 <BLDC_control_current+0xdc>)
     7aa:	f8d3 e000 	ldr.w	lr, [r3]
     7ae:	4e2d      	ldr	r6, [pc, #180]	; (864 <BLDC_control_current+0xe0>)
     7b0:	ad08      	add	r5, sp, #32
     7b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     7b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     7b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     7ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
     7be:	f8cd e01c 	str.w	lr, [sp, #28]
     7c2:	9706      	str	r7, [sp, #24]
     7c4:	466c      	mov	r4, sp
     7c6:	f106 050c 	add.w	r5, r6, #12
     7ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     7cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     7ce:	e895 0003 	ldmia.w	r5, {r0, r1}
     7d2:	e884 0003 	stmia.w	r4, {r0, r1}
     7d6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
     7da:	a810      	add	r0, sp, #64	; 0x40
     7dc:	4c22      	ldr	r4, [pc, #136]	; (868 <BLDC_control_current+0xe4>)
     7de:	47a0      	blx	r4
     7e0:	4635      	mov	r5, r6
     7e2:	ac10      	add	r4, sp, #64	; 0x40
     7e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     7e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     7e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     7ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     7ec:	6823      	ldr	r3, [r4, #0]
     7ee:	602b      	str	r3, [r5, #0]
	
	/* 2. Voltage Control*/
	control_voltage_output = currentPIDVar.y_k[0] / MOTOR_VOLTAGE * 100;
     7f0:	edd6 6a00 	vldr	s13, [r6]
     7f4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
     7fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 86c <BLDC_control_current+0xe8>
     800:	ee67 7a87 	vmul.f32	s15, s15, s14
     804:	4b1a      	ldr	r3, [pc, #104]	; (870 <BLDC_control_current+0xec>)
     806:	edc3 7a00 	vstr	s15, [r3]
	if(control_voltage_output > MAX_PWM){
     80a:	ed93 7a00 	vldr	s14, [r3]
     80e:	eddf 7a19 	vldr	s15, [pc, #100]	; 874 <BLDC_control_current+0xf0>
     812:	eeb4 7ae7 	vcmpe.f32	s14, s15
     816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     81a:	dc18      	bgt.n	84e <BLDC_control_current+0xca>
		control_voltage_output = MAX_PWM;
		} else if(control_voltage_output  < MIN_PWM){
     81c:	4b14      	ldr	r3, [pc, #80]	; (870 <BLDC_control_current+0xec>)
     81e:	ed93 7a00 	vldr	s14, [r3]
     822:	eddf 7a15 	vldr	s15, [pc, #84]	; 878 <BLDC_control_current+0xf4>
     826:	eeb4 7ae7 	vcmpe.f32	s14, s15
     82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     82e:	d510      	bpl.n	852 <BLDC_control_current+0xce>
		control_voltage_output = MIN_PWM;
     830:	edc3 7a00 	vstr	s15, [r3]
	}	
}
     834:	e00d      	b.n	852 <BLDC_control_current+0xce>
	} else if(currentPIDControl.desired  < speedPIDControl.min){
     836:	4b09      	ldr	r3, [pc, #36]	; (85c <BLDC_control_current+0xd8>)
     838:	ed93 7a06 	vldr	s14, [r3, #24]
     83c:	eef4 7ac7 	vcmpe.f32	s15, s14
     840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     844:	d5ae      	bpl.n	7a4 <BLDC_control_current+0x20>
 			currentPIDControl.desired = speedPIDControl.min;
     846:	4b04      	ldr	r3, [pc, #16]	; (858 <BLDC_control_current+0xd4>)
     848:	ed83 7a00 	vstr	s14, [r3]
     84c:	e7aa      	b.n	7a4 <BLDC_control_current+0x20>
		control_voltage_output = MAX_PWM;
     84e:	edc3 7a00 	vstr	s15, [r3]
}
     852:	b01b      	add	sp, #108	; 0x6c
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
     856:	bf00      	nop
     858:	20000350 	.word	0x20000350
     85c:	20000334 	.word	0x20000334
     860:	20000168 	.word	0x20000168
     864:	200002ac 	.word	0x200002ac
     868:	000002dd 	.word	0x000002dd
     86c:	42c80000 	.word	0x42c80000
     870:	2000016c 	.word	0x2000016c
     874:	42480000 	.word	0x42480000
     878:	c2480000 	.word	0xc2480000

0000087c <BLDC_control_speed>:

void BLDC_control_speed(){	
     87c:	b5f0      	push	{r4, r5, r6, r7, lr}
     87e:	b09b      	sub	sp, #108	; 0x6c
	/* 1. Speed Control*/
	/* constraints check*/
	if(speedPIDControl.desired > posPIDControl.max){
     880:	4b46      	ldr	r3, [pc, #280]	; (99c <BLDC_control_speed+0x120>)
     882:	edd3 7a00 	vldr	s15, [r3]
     886:	4b46      	ldr	r3, [pc, #280]	; (9a0 <BLDC_control_speed+0x124>)
     888:	ed93 7a05 	vldr	s14, [r3, #20]
     88c:	eef4 7ac7 	vcmpe.f32	s15, s14
     890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     894:	dd72      	ble.n	97c <BLDC_control_speed+0x100>
		speedPIDControl.desired = posPIDControl.max;
     896:	4b41      	ldr	r3, [pc, #260]	; (99c <BLDC_control_speed+0x120>)
     898:	ed83 7a00 	vstr	s14, [r3]
	} else if(speedPIDControl.desired  < posPIDControl.min){
		speedPIDControl.desired = posPIDControl.min;
	}
	/*Current Calculation*/
	speedPIDVar = pid_controller(speedPIDVar, speedPIDControl.desired, current_BLDC_motor_rpm,speedPIDControl );
     89c:	4c3f      	ldr	r4, [pc, #252]	; (99c <BLDC_control_speed+0x120>)
     89e:	6827      	ldr	r7, [r4, #0]
     8a0:	4b40      	ldr	r3, [pc, #256]	; (9a4 <BLDC_control_speed+0x128>)
     8a2:	f8d3 e000 	ldr.w	lr, [r3]
     8a6:	4e40      	ldr	r6, [pc, #256]	; (9a8 <BLDC_control_speed+0x12c>)
     8a8:	ad08      	add	r5, sp, #32
     8aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     8ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     8ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     8b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
     8b6:	f8cd e01c 	str.w	lr, [sp, #28]
     8ba:	9706      	str	r7, [sp, #24]
     8bc:	466c      	mov	r4, sp
     8be:	f106 050c 	add.w	r5, r6, #12
     8c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     8c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     8c6:	e895 0003 	ldmia.w	r5, {r0, r1}
     8ca:	e884 0003 	stmia.w	r4, {r0, r1}
     8ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
     8d2:	a810      	add	r0, sp, #64	; 0x40
     8d4:	4f35      	ldr	r7, [pc, #212]	; (9ac <BLDC_control_speed+0x130>)
     8d6:	47b8      	blx	r7
     8d8:	4634      	mov	r4, r6
     8da:	ad10      	add	r5, sp, #64	; 0x40
     8dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     8de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     8e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     8e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     8e4:	682b      	ldr	r3, [r5, #0]
     8e6:	6023      	str	r3, [r4, #0]
	
	/* 2. Current Control*/
	/*Voltage calculation*/
	currentPIDVar = pid_controller(currentPIDVar, speedPIDVar.y_k[0], current_reference_current_value,currentPIDControl );
     8e8:	f8d6 e000 	ldr.w	lr, [r6]
     8ec:	4b30      	ldr	r3, [pc, #192]	; (9b0 <BLDC_control_speed+0x134>)
     8ee:	f8d3 c000 	ldr.w	ip, [r3]
     8f2:	4e30      	ldr	r6, [pc, #192]	; (9b4 <BLDC_control_speed+0x138>)
     8f4:	ac08      	add	r4, sp, #32
     8f6:	4d30      	ldr	r5, [pc, #192]	; (9b8 <BLDC_control_speed+0x13c>)
     8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     8fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
     904:	f8cd c01c 	str.w	ip, [sp, #28]
     908:	f8cd e018 	str.w	lr, [sp, #24]
     90c:	466c      	mov	r4, sp
     90e:	f106 050c 	add.w	r5, r6, #12
     912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     916:	e895 0003 	ldmia.w	r5, {r0, r1}
     91a:	e884 0003 	stmia.w	r4, {r0, r1}
     91e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
     922:	a810      	add	r0, sp, #64	; 0x40
     924:	47b8      	blx	r7
     926:	4635      	mov	r5, r6
     928:	ac10      	add	r4, sp, #64	; 0x40
     92a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     92c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     92e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     932:	6823      	ldr	r3, [r4, #0]
     934:	602b      	str	r3, [r5, #0]
	
	/* 3. Voltage Control*/
	control_voltage_output = currentPIDVar.y_k[0]/ MOTOR_VOLTAGE * 100;
     936:	edd6 6a00 	vldr	s13, [r6]
     93a:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
     942:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 9bc <BLDC_control_speed+0x140>
     946:	ee67 7a87 	vmul.f32	s15, s15, s14
     94a:	4b1d      	ldr	r3, [pc, #116]	; (9c0 <BLDC_control_speed+0x144>)
     94c:	edc3 7a00 	vstr	s15, [r3]
	if(control_voltage_output > MAX_PWM){
     950:	ed93 7a00 	vldr	s14, [r3]
     954:	eddf 7a1b 	vldr	s15, [pc, #108]	; 9c4 <BLDC_control_speed+0x148>
     958:	eeb4 7ae7 	vcmpe.f32	s14, s15
     95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     960:	dc18      	bgt.n	994 <BLDC_control_speed+0x118>
		control_voltage_output = MAX_PWM;
		} else if(control_voltage_output  < MIN_PWM){
     962:	4b17      	ldr	r3, [pc, #92]	; (9c0 <BLDC_control_speed+0x144>)
     964:	ed93 7a00 	vldr	s14, [r3]
     968:	eddf 7a17 	vldr	s15, [pc, #92]	; 9c8 <BLDC_control_speed+0x14c>
     96c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     974:	d510      	bpl.n	998 <BLDC_control_speed+0x11c>
		control_voltage_output = MIN_PWM;
     976:	edc3 7a00 	vstr	s15, [r3]
	}			
}
     97a:	e00d      	b.n	998 <BLDC_control_speed+0x11c>
	} else if(speedPIDControl.desired  < posPIDControl.min){
     97c:	4b08      	ldr	r3, [pc, #32]	; (9a0 <BLDC_control_speed+0x124>)
     97e:	ed93 7a06 	vldr	s14, [r3, #24]
     982:	eef4 7ac7 	vcmpe.f32	s15, s14
     986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     98a:	d587      	bpl.n	89c <BLDC_control_speed+0x20>
		speedPIDControl.desired = posPIDControl.min;
     98c:	4b03      	ldr	r3, [pc, #12]	; (99c <BLDC_control_speed+0x120>)
     98e:	ed83 7a00 	vstr	s14, [r3]
     992:	e783      	b.n	89c <BLDC_control_speed+0x20>
		control_voltage_output = MAX_PWM;
     994:	edc3 7a00 	vstr	s15, [r3]
}
     998:	b01b      	add	sp, #108	; 0x6c
     99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99c:	20000334 	.word	0x20000334
     9a0:	2000036c 	.word	0x2000036c
     9a4:	20000164 	.word	0x20000164
     9a8:	20000310 	.word	0x20000310
     9ac:	000002dd 	.word	0x000002dd
     9b0:	20000168 	.word	0x20000168
     9b4:	200002ac 	.word	0x200002ac
     9b8:	20000350 	.word	0x20000350
     9bc:	42c80000 	.word	0x42c80000
     9c0:	2000016c 	.word	0x2000016c
     9c4:	42480000 	.word	0x42480000
     9c8:	c2480000 	.word	0xc2480000

000009cc <BLDC_control_position>:

void BLDC_control_position(){
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	b09b      	sub	sp, #108	; 0x6c
	/* 1. Position Control*/
	/* constraints check*/
	if(posPIDControl.desired > MAX_POS){
     9d0:	4b59      	ldr	r3, [pc, #356]	; (b38 <BLDC_control_position+0x16c>)
     9d2:	edd3 7a00 	vldr	s15, [r3]
     9d6:	ed9f 7a59 	vldr	s14, [pc, #356]	; b3c <BLDC_control_position+0x170>
     9da:	eef4 7ac7 	vcmpe.f32	s15, s14
     9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9e2:	f340 809b 	ble.w	b1c <BLDC_control_position+0x150>
		posPIDControl.desired = MAX_POS;
     9e6:	ed83 7a00 	vstr	s14, [r3]
	} else if(posPIDControl.desired < MIN_POS){
		posPIDControl.desired = MIN_POS;
	}
	/*Speed Calculation*/
	posPIDVar = pid_controller(posPIDVar, posPIDControl.desired, encoder_joint_pos,posPIDControl );
     9ea:	4c53      	ldr	r4, [pc, #332]	; (b38 <BLDC_control_position+0x16c>)
     9ec:	6826      	ldr	r6, [r4, #0]
     9ee:	4b54      	ldr	r3, [pc, #336]	; (b40 <BLDC_control_position+0x174>)
     9f0:	f8d3 e000 	ldr.w	lr, [r3]
     9f4:	4f53      	ldr	r7, [pc, #332]	; (b44 <BLDC_control_position+0x178>)
     9f6:	ad08      	add	r5, sp, #32
     9f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     9fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     9fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     a00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
     a04:	f8cd e01c 	str.w	lr, [sp, #28]
     a08:	9606      	str	r6, [sp, #24]
     a0a:	466c      	mov	r4, sp
     a0c:	f107 050c 	add.w	r5, r7, #12
     a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a14:	e895 0003 	ldmia.w	r5, {r0, r1}
     a18:	e884 0003 	stmia.w	r4, {r0, r1}
     a1c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     a20:	a810      	add	r0, sp, #64	; 0x40
     a22:	4e49      	ldr	r6, [pc, #292]	; (b48 <BLDC_control_position+0x17c>)
     a24:	47b0      	blx	r6
     a26:	463c      	mov	r4, r7
     a28:	ad10      	add	r5, sp, #64	; 0x40
     a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a32:	682b      	ldr	r3, [r5, #0]
     a34:	6023      	str	r3, [r4, #0]
	
	
	/* 3. Speed Control*/
	/*Current calculation*/
	speedPIDVar = pid_controller(speedPIDVar, -posPIDVar.y_k[0], current_BLDC_motor_rpm,speedPIDControl );
     a36:	edd7 7a00 	vldr	s15, [r7]
     a3a:	eef1 7a67 	vneg.f32	s15, s15
     a3e:	4b43      	ldr	r3, [pc, #268]	; (b4c <BLDC_control_position+0x180>)
     a40:	f8d3 e000 	ldr.w	lr, [r3]
     a44:	4f42      	ldr	r7, [pc, #264]	; (b50 <BLDC_control_position+0x184>)
     a46:	ac08      	add	r4, sp, #32
     a48:	4d42      	ldr	r5, [pc, #264]	; (b54 <BLDC_control_position+0x188>)
     a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     a52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
     a56:	f8cd e01c 	str.w	lr, [sp, #28]
     a5a:	edcd 7a06 	vstr	s15, [sp, #24]
     a5e:	466c      	mov	r4, sp
     a60:	f107 050c 	add.w	r5, r7, #12
     a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a68:	e895 0003 	ldmia.w	r5, {r0, r1}
     a6c:	e884 0003 	stmia.w	r4, {r0, r1}
     a70:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     a74:	a810      	add	r0, sp, #64	; 0x40
     a76:	47b0      	blx	r6
     a78:	463c      	mov	r4, r7
     a7a:	ad10      	add	r5, sp, #64	; 0x40
     a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a84:	682b      	ldr	r3, [r5, #0]
     a86:	6023      	str	r3, [r4, #0]
	
	/* 2. Current Control*/
	/*Voltage calculation*/
	currentPIDVar = pid_controller(currentPIDVar, speedPIDVar.y_k[0], current_reference_current_value,currentPIDControl );
     a88:	f8d7 e000 	ldr.w	lr, [r7]
     a8c:	4b32      	ldr	r3, [pc, #200]	; (b58 <BLDC_control_position+0x18c>)
     a8e:	f8d3 c000 	ldr.w	ip, [r3]
     a92:	4f32      	ldr	r7, [pc, #200]	; (b5c <BLDC_control_position+0x190>)
     a94:	ac08      	add	r4, sp, #32
     a96:	4d32      	ldr	r5, [pc, #200]	; (b60 <BLDC_control_position+0x194>)
     a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
     aa4:	f8cd c01c 	str.w	ip, [sp, #28]
     aa8:	f8cd e018 	str.w	lr, [sp, #24]
     aac:	466c      	mov	r4, sp
     aae:	f107 050c 	add.w	r5, r7, #12
     ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     ab6:	e895 0003 	ldmia.w	r5, {r0, r1}
     aba:	e884 0003 	stmia.w	r4, {r0, r1}
     abe:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     ac2:	a810      	add	r0, sp, #64	; 0x40
     ac4:	47b0      	blx	r6
     ac6:	463d      	mov	r5, r7
     ac8:	ac10      	add	r4, sp, #64	; 0x40
     aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     ad2:	6823      	ldr	r3, [r4, #0]
     ad4:	602b      	str	r3, [r5, #0]
	
	/* 3. Voltage Control*/
	control_voltage_output = currentPIDVar.y_k[0]/ MOTOR_VOLTAGE * 100;	
     ad6:	edd7 6a00 	vldr	s13, [r7]
     ada:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
     ae2:	ed9f 7a20 	vldr	s14, [pc, #128]	; b64 <BLDC_control_position+0x198>
     ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
     aea:	4b1f      	ldr	r3, [pc, #124]	; (b68 <BLDC_control_position+0x19c>)
     aec:	edc3 7a00 	vstr	s15, [r3]
	
	if(control_voltage_output > MAX_PWM){
     af0:	ed93 7a00 	vldr	s14, [r3]
     af4:	eddf 7a1d 	vldr	s15, [pc, #116]	; b6c <BLDC_control_position+0x1a0>
     af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
     afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b00:	dc16      	bgt.n	b30 <BLDC_control_position+0x164>
	control_voltage_output = MAX_PWM;
	} else if(control_voltage_output  < MIN_PWM){
     b02:	4b19      	ldr	r3, [pc, #100]	; (b68 <BLDC_control_position+0x19c>)
     b04:	ed93 7a00 	vldr	s14, [r3]
     b08:	eddf 7a19 	vldr	s15, [pc, #100]	; b70 <BLDC_control_position+0x1a4>
     b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b14:	d50e      	bpl.n	b34 <BLDC_control_position+0x168>
	control_voltage_output = MIN_PWM;
     b16:	edc3 7a00 	vstr	s15, [r3]
	}	
}
     b1a:	e00b      	b.n	b34 <BLDC_control_position+0x168>
	} else if(posPIDControl.desired < MIN_POS){
     b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b24:	f57f af61 	bpl.w	9ea <BLDC_control_position+0x1e>
		posPIDControl.desired = MIN_POS;
     b28:	2200      	movs	r2, #0
     b2a:	4b03      	ldr	r3, [pc, #12]	; (b38 <BLDC_control_position+0x16c>)
     b2c:	601a      	str	r2, [r3, #0]
     b2e:	e75c      	b.n	9ea <BLDC_control_position+0x1e>
	control_voltage_output = MAX_PWM;
     b30:	edc3 7a00 	vstr	s15, [r3]
}
     b34:	b01b      	add	sp, #108	; 0x6c
     b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b38:	2000036c 	.word	0x2000036c
     b3c:	430c0000 	.word	0x430c0000
     b40:	2000012c 	.word	0x2000012c
     b44:	200002d0 	.word	0x200002d0
     b48:	000002dd 	.word	0x000002dd
     b4c:	20000164 	.word	0x20000164
     b50:	20000310 	.word	0x20000310
     b54:	20000334 	.word	0x20000334
     b58:	20000168 	.word	0x20000168
     b5c:	200002ac 	.word	0x200002ac
     b60:	20000350 	.word	0x20000350
     b64:	42c80000 	.word	0x42c80000
     b68:	2000016c 	.word	0x2000016c
     b6c:	42480000 	.word	0x42480000
     b70:	c2480000 	.word	0xc2480000

00000b74 <BLDC_control_torque>:

void BLDC_control_torque(){	
     b74:	b5f0      	push	{r4, r5, r6, r7, lr}
     b76:	b09b      	sub	sp, #108	; 0x6c
	/* 1. Torque Control*/
	/* constraints check*/
	if(torquePIDControl.desired > MAX_TORQUE){
     b78:	4b45      	ldr	r3, [pc, #276]	; (c90 <BLDC_control_torque+0x11c>)
     b7a:	edd3 7a00 	vldr	s15, [r3]
     b7e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
     b82:	eef4 7ac7 	vcmpe.f32	s15, s14
     b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b8a:	dd71      	ble.n	c70 <BLDC_control_torque+0xfc>
		torquePIDControl.desired = MAX_TORQUE;
     b8c:	ed83 7a00 	vstr	s14, [r3]
		} else if(torquePIDControl.desired < MIN_TORQUE){
		torquePIDControl.desired = MIN_TORQUE;
	}
	
	/*Current Calculation*/
	torquePIDVar = pid_controller(torquePIDVar, torquePIDControl.desired, joint_torque ,torquePIDControl );
     b90:	4c3f      	ldr	r4, [pc, #252]	; (c90 <BLDC_control_torque+0x11c>)
     b92:	6827      	ldr	r7, [r4, #0]
     b94:	4b3f      	ldr	r3, [pc, #252]	; (c94 <BLDC_control_torque+0x120>)
     b96:	f8d3 e000 	ldr.w	lr, [r3]
     b9a:	4e3f      	ldr	r6, [pc, #252]	; (c98 <BLDC_control_torque+0x124>)
     b9c:	ad08      	add	r5, sp, #32
     b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     ba2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     ba6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
     baa:	f8cd e01c 	str.w	lr, [sp, #28]
     bae:	9706      	str	r7, [sp, #24]
     bb0:	466c      	mov	r4, sp
     bb2:	f106 050c 	add.w	r5, r6, #12
     bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     bba:	e895 0003 	ldmia.w	r5, {r0, r1}
     bbe:	e884 0003 	stmia.w	r4, {r0, r1}
     bc2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
     bc6:	a810      	add	r0, sp, #64	; 0x40
     bc8:	4f34      	ldr	r7, [pc, #208]	; (c9c <BLDC_control_torque+0x128>)
     bca:	47b8      	blx	r7
     bcc:	4634      	mov	r4, r6
     bce:	ad10      	add	r5, sp, #64	; 0x40
     bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     bd8:	682b      	ldr	r3, [r5, #0]
     bda:	6023      	str	r3, [r4, #0]
	
	/* 2. Current Control*/
	/*Voltage calculation*/
	currentPIDVar = pid_controller(currentPIDVar, torquePIDVar.y_k[0], current_reference_current_value,currentPIDControl );
     bdc:	f8d6 e000 	ldr.w	lr, [r6]
     be0:	4b2f      	ldr	r3, [pc, #188]	; (ca0 <BLDC_control_torque+0x12c>)
     be2:	f8d3 c000 	ldr.w	ip, [r3]
     be6:	4e2f      	ldr	r6, [pc, #188]	; (ca4 <BLDC_control_torque+0x130>)
     be8:	ac08      	add	r4, sp, #32
     bea:	4d2f      	ldr	r5, [pc, #188]	; (ca8 <BLDC_control_torque+0x134>)
     bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
     bf8:	f8cd c01c 	str.w	ip, [sp, #28]
     bfc:	f8cd e018 	str.w	lr, [sp, #24]
     c00:	466c      	mov	r4, sp
     c02:	f106 050c 	add.w	r5, r6, #12
     c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     c0a:	e895 0003 	ldmia.w	r5, {r0, r1}
     c0e:	e884 0003 	stmia.w	r4, {r0, r1}
     c12:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
     c16:	a810      	add	r0, sp, #64	; 0x40
     c18:	47b8      	blx	r7
     c1a:	4635      	mov	r5, r6
     c1c:	ac10      	add	r4, sp, #64	; 0x40
     c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     c26:	6823      	ldr	r3, [r4, #0]
     c28:	602b      	str	r3, [r5, #0]
	
	/* 3. Voltage Control*/
	control_voltage_output = currentPIDVar.y_k[0]/ MOTOR_VOLTAGE * 100;
     c2a:	edd6 6a00 	vldr	s13, [r6]
     c2e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
     c36:	ed9f 7a1d 	vldr	s14, [pc, #116]	; cac <BLDC_control_torque+0x138>
     c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
     c3e:	4b1c      	ldr	r3, [pc, #112]	; (cb0 <BLDC_control_torque+0x13c>)
     c40:	edc3 7a00 	vstr	s15, [r3]
	if(control_voltage_output > MAX_PWM){
     c44:	ed93 7a00 	vldr	s14, [r3]
     c48:	eddf 7a1a 	vldr	s15, [pc, #104]	; cb4 <BLDC_control_torque+0x140>
     c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c54:	dc17      	bgt.n	c86 <BLDC_control_torque+0x112>
		control_voltage_output = MAX_PWM;
		} else if(control_voltage_output  < MIN_PWM){
     c56:	4b16      	ldr	r3, [pc, #88]	; (cb0 <BLDC_control_torque+0x13c>)
     c58:	ed93 7a00 	vldr	s14, [r3]
     c5c:	eddf 7a16 	vldr	s15, [pc, #88]	; cb8 <BLDC_control_torque+0x144>
     c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
     c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c68:	d50f      	bpl.n	c8a <BLDC_control_torque+0x116>
		control_voltage_output = MIN_PWM;
     c6a:	edc3 7a00 	vstr	s15, [r3]
	}			
}
     c6e:	e00c      	b.n	c8a <BLDC_control_torque+0x116>
		} else if(torquePIDControl.desired < MIN_TORQUE){
     c70:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
     c74:	eef4 7ac7 	vcmpe.f32	s15, s14
     c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c7c:	d588      	bpl.n	b90 <BLDC_control_torque+0x1c>
		torquePIDControl.desired = MIN_TORQUE;
     c7e:	4b04      	ldr	r3, [pc, #16]	; (c90 <BLDC_control_torque+0x11c>)
     c80:	ed83 7a00 	vstr	s14, [r3]
     c84:	e784      	b.n	b90 <BLDC_control_torque+0x1c>
		control_voltage_output = MAX_PWM;
     c86:	edc3 7a00 	vstr	s15, [r3]
}
     c8a:	b01b      	add	sp, #108	; 0x6c
     c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8e:	bf00      	nop
     c90:	200002f4 	.word	0x200002f4
     c94:	2000015c 	.word	0x2000015c
     c98:	20000388 	.word	0x20000388
     c9c:	000002dd 	.word	0x000002dd
     ca0:	20000168 	.word	0x20000168
     ca4:	200002ac 	.word	0x200002ac
     ca8:	20000350 	.word	0x20000350
     cac:	42c80000 	.word	0x42c80000
     cb0:	2000016c 	.word	0x2000016c
     cb4:	42480000 	.word	0x42480000
     cb8:	c2480000 	.word	0xc2480000

00000cbc <get_BLDC_commutation_state>:
/************************************************************************/
/* Get functions                                                    */
/************************************************************************/
uint32_t get_BLDC_commutation_state()
{
	return current_BLDC_commutation_state;	
     cbc:	4b01      	ldr	r3, [pc, #4]	; (cc4 <get_BLDC_commutation_state+0x8>)
     cbe:	6818      	ldr	r0, [r3, #0]
}
     cc0:	4770      	bx	lr
     cc2:	bf00      	nop
     cc4:	200000d8 	.word	0x200000d8

00000cc8 <get_BLDC_direction>:
	return BLDC_revolutions;
}

int8_t get_BLDC_direction()
{
	return current_BLDC_direction;
     cc8:	4b01      	ldr	r3, [pc, #4]	; (cd0 <get_BLDC_direction+0x8>)
     cca:	7b18      	ldrb	r0, [r3, #12]
}
     ccc:	b240      	sxtb	r0, r0
     cce:	4770      	bx	lr
     cd0:	200000d8 	.word	0x200000d8

00000cd4 <Dummy_Handler>:
     cd4:	e7fe      	b.n	cd4 <Dummy_Handler>
	...

00000cd8 <Reset_Handler>:
     cd8:	b508      	push	{r3, lr}
     cda:	4b15      	ldr	r3, [pc, #84]	; (d30 <Reset_Handler+0x58>)
     cdc:	4a15      	ldr	r2, [pc, #84]	; (d34 <Reset_Handler+0x5c>)
     cde:	429a      	cmp	r2, r3
     ce0:	d009      	beq.n	cf6 <Reset_Handler+0x1e>
     ce2:	4b13      	ldr	r3, [pc, #76]	; (d30 <Reset_Handler+0x58>)
     ce4:	4a13      	ldr	r2, [pc, #76]	; (d34 <Reset_Handler+0x5c>)
     ce6:	e003      	b.n	cf0 <Reset_Handler+0x18>
     ce8:	6811      	ldr	r1, [r2, #0]
     cea:	6019      	str	r1, [r3, #0]
     cec:	3304      	adds	r3, #4
     cee:	3204      	adds	r2, #4
     cf0:	4911      	ldr	r1, [pc, #68]	; (d38 <Reset_Handler+0x60>)
     cf2:	428b      	cmp	r3, r1
     cf4:	d3f8      	bcc.n	ce8 <Reset_Handler+0x10>
     cf6:	4b11      	ldr	r3, [pc, #68]	; (d3c <Reset_Handler+0x64>)
     cf8:	e002      	b.n	d00 <Reset_Handler+0x28>
     cfa:	2200      	movs	r2, #0
     cfc:	601a      	str	r2, [r3, #0]
     cfe:	3304      	adds	r3, #4
     d00:	4a0f      	ldr	r2, [pc, #60]	; (d40 <Reset_Handler+0x68>)
     d02:	4293      	cmp	r3, r2
     d04:	d3f9      	bcc.n	cfa <Reset_Handler+0x22>
     d06:	4b0f      	ldr	r3, [pc, #60]	; (d44 <Reset_Handler+0x6c>)
     d08:	4a0f      	ldr	r2, [pc, #60]	; (d48 <Reset_Handler+0x70>)
     d0a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     d0e:	609a      	str	r2, [r3, #8]
     d10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     d14:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d20:	f3bf 8f6f 	isb	sy
     d24:	4b09      	ldr	r3, [pc, #36]	; (d4c <Reset_Handler+0x74>)
     d26:	4798      	blx	r3
     d28:	4b09      	ldr	r3, [pc, #36]	; (d50 <Reset_Handler+0x78>)
     d2a:	4798      	blx	r3
     d2c:	e7fe      	b.n	d2c <Reset_Handler+0x54>
     d2e:	bf00      	nop
     d30:	20000000 	.word	0x20000000
     d34:	00004524 	.word	0x00004524
     d38:	200000bc 	.word	0x200000bc
     d3c:	200000bc 	.word	0x200000bc
     d40:	20000508 	.word	0x20000508
     d44:	e000ed00 	.word	0xe000ed00
     d48:	00000000 	.word	0x00000000
     d4c:	000041a9 	.word	0x000041a9
     d50:	00003351 	.word	0x00003351

00000d54 <TIMER_2_init>:
     d54:	b508      	push	{r3, lr}
     d56:	4a08      	ldr	r2, [pc, #32]	; (d78 <TIMER_2_init+0x24>)
     d58:	6993      	ldr	r3, [r2, #24]
     d5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     d5e:	6193      	str	r3, [r2, #24]
     d60:	2242      	movs	r2, #66	; 0x42
     d62:	4b06      	ldr	r3, [pc, #24]	; (d7c <TIMER_2_init+0x28>)
     d64:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     d68:	4b05      	ldr	r3, [pc, #20]	; (d80 <TIMER_2_init+0x2c>)
     d6a:	4798      	blx	r3
     d6c:	4602      	mov	r2, r0
     d6e:	4905      	ldr	r1, [pc, #20]	; (d84 <TIMER_2_init+0x30>)
     d70:	4805      	ldr	r0, [pc, #20]	; (d88 <TIMER_2_init+0x34>)
     d72:	4b06      	ldr	r3, [pc, #24]	; (d8c <TIMER_2_init+0x38>)
     d74:	4798      	blx	r3
     d76:	bd08      	pop	{r3, pc}
     d78:	40000800 	.word	0x40000800
     d7c:	40001c00 	.word	0x40001c00
     d80:	00002fdf 	.word	0x00002fdf
     d84:	4101a000 	.word	0x4101a000
     d88:	200003ac 	.word	0x200003ac
     d8c:	00001d19 	.word	0x00001d19

00000d90 <ADC_IB_init>:
     d90:	b5f0      	push	{r4, r5, r6, r7, lr}
     d92:	b085      	sub	sp, #20
     d94:	4a33      	ldr	r2, [pc, #204]	; (e64 <ADC_IB_init+0xd4>)
     d96:	6a13      	ldr	r3, [r2, #32]
     d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     d9c:	6213      	str	r3, [r2, #32]
     d9e:	2240      	movs	r2, #64	; 0x40
     da0:	4b31      	ldr	r3, [pc, #196]	; (e68 <ADC_IB_init+0xd8>)
     da2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     da6:	4e31      	ldr	r6, [pc, #196]	; (e6c <ADC_IB_init+0xdc>)
     da8:	4d31      	ldr	r5, [pc, #196]	; (e70 <ADC_IB_init+0xe0>)
     daa:	2400      	movs	r4, #0
     dac:	9402      	str	r4, [sp, #8]
     dae:	4b31      	ldr	r3, [pc, #196]	; (e74 <ADC_IB_init+0xe4>)
     db0:	9301      	str	r3, [sp, #4]
     db2:	2301      	movs	r3, #1
     db4:	9300      	str	r3, [sp, #0]
     db6:	4623      	mov	r3, r4
     db8:	4632      	mov	r2, r6
     dba:	492f      	ldr	r1, [pc, #188]	; (e78 <ADC_IB_init+0xe8>)
     dbc:	4628      	mov	r0, r5
     dbe:	4f2f      	ldr	r7, [pc, #188]	; (e7c <ADC_IB_init+0xec>)
     dc0:	47b8      	blx	r7
     dc2:	2310      	movs	r3, #16
     dc4:	1d32      	adds	r2, r6, #4
     dc6:	4621      	mov	r1, r4
     dc8:	4628      	mov	r0, r5
     dca:	4c2d      	ldr	r4, [pc, #180]	; (e80 <ADC_IB_init+0xf0>)
     dcc:	47a0      	blx	r4
     dce:	4b2d      	ldr	r3, [pc, #180]	; (e84 <ADC_IB_init+0xf4>)
     dd0:	2204      	movs	r2, #4
     dd2:	605a      	str	r2, [r3, #4]
     dd4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     dd8:	629a      	str	r2, [r3, #40]	; 0x28
     dda:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     dde:	6299      	str	r1, [r3, #40]	; 0x28
     de0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
     de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     de8:	f042 0201 	orr.w	r2, r2, #1
     dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
     df0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     df4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     df8:	f042 0201 	orr.w	r2, r2, #1
     dfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     e00:	2208      	movs	r2, #8
     e02:	605a      	str	r2, [r3, #4]
     e04:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e08:	629a      	str	r2, [r3, #40]	; 0x28
     e0a:	6299      	str	r1, [r3, #40]	; 0x28
     e0c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
     e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     e14:	f042 0201 	orr.w	r2, r2, #1
     e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
     e1c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     e20:	f002 020f 	and.w	r2, r2, #15
     e24:	f042 0210 	orr.w	r2, r2, #16
     e28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
     e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     e3c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e40:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
     e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     e48:	f042 0201 	orr.w	r2, r2, #1
     e4c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
     e50:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
     e54:	f002 020f 	and.w	r2, r2, #15
     e58:	f042 0210 	orr.w	r2, r2, #16
     e5c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     e60:	b005      	add	sp, #20
     e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e64:	40000800 	.word	0x40000800
     e68:	40001c00 	.word	0x40001c00
     e6c:	200000f0 	.word	0x200000f0
     e70:	20000454 	.word	0x20000454
     e74:	20000410 	.word	0x20000410
     e78:	43001c00 	.word	0x43001c00
     e7c:	000016d5 	.word	0x000016d5
     e80:	0000177d 	.word	0x0000177d
     e84:	41008000 	.word	0x41008000

00000e88 <ADC_IA_init>:
     e88:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8a:	b085      	sub	sp, #20
     e8c:	4a1e      	ldr	r2, [pc, #120]	; (f08 <ADC_IA_init+0x80>)
     e8e:	6a13      	ldr	r3, [r2, #32]
     e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e94:	6213      	str	r3, [r2, #32]
     e96:	2240      	movs	r2, #64	; 0x40
     e98:	4b1c      	ldr	r3, [pc, #112]	; (f0c <ADC_IA_init+0x84>)
     e9a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     e9e:	4e1c      	ldr	r6, [pc, #112]	; (f10 <ADC_IA_init+0x88>)
     ea0:	4d1c      	ldr	r5, [pc, #112]	; (f14 <ADC_IA_init+0x8c>)
     ea2:	2400      	movs	r4, #0
     ea4:	9402      	str	r4, [sp, #8]
     ea6:	4b1c      	ldr	r3, [pc, #112]	; (f18 <ADC_IA_init+0x90>)
     ea8:	9301      	str	r3, [sp, #4]
     eaa:	2301      	movs	r3, #1
     eac:	9300      	str	r3, [sp, #0]
     eae:	4623      	mov	r3, r4
     eb0:	f106 0214 	add.w	r2, r6, #20
     eb4:	4919      	ldr	r1, [pc, #100]	; (f1c <ADC_IA_init+0x94>)
     eb6:	4628      	mov	r0, r5
     eb8:	4f19      	ldr	r7, [pc, #100]	; (f20 <ADC_IA_init+0x98>)
     eba:	47b8      	blx	r7
     ebc:	2310      	movs	r3, #16
     ebe:	f106 0218 	add.w	r2, r6, #24
     ec2:	4621      	mov	r1, r4
     ec4:	4628      	mov	r0, r5
     ec6:	4c17      	ldr	r4, [pc, #92]	; (f24 <ADC_IA_init+0x9c>)
     ec8:	47a0      	blx	r4
     eca:	4b17      	ldr	r3, [pc, #92]	; (f28 <ADC_IA_init+0xa0>)
     ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
     ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     ed4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     ed8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     edc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     ee0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ee4:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
     ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     eec:	f042 0201 	orr.w	r2, r2, #1
     ef0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
     ef4:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
     ef8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     efc:	f042 0201 	orr.w	r2, r2, #1
     f00:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     f04:	b005      	add	sp, #20
     f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f08:	40000800 	.word	0x40000800
     f0c:	40001c00 	.word	0x40001c00
     f10:	200000f0 	.word	0x200000f0
     f14:	20000428 	.word	0x20000428
     f18:	20000484 	.word	0x20000484
     f1c:	43002000 	.word	0x43002000
     f20:	000016d5 	.word	0x000016d5
     f24:	0000177d 	.word	0x0000177d
     f28:	41008000 	.word	0x41008000

00000f2c <DIGITAL_GLUE_LOGIC_0_PORT_init>:
     f2c:	4b20      	ldr	r3, [pc, #128]	; (fb0 <DIGITAL_GLUE_LOGIC_0_PORT_init+0x84>)
     f2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
     f32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     f36:	f042 0201 	orr.w	r2, r2, #1
     f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     f3e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     f42:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     f46:	f042 020d 	orr.w	r2, r2, #13
     f4a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     f4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
     f52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     f56:	f042 0201 	orr.w	r2, r2, #1
     f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
     f5e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     f62:	f002 020f 	and.w	r2, r2, #15
     f66:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
     f6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     f6e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     f72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     f76:	f042 0201 	orr.w	r2, r2, #1
     f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
     f7e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
     f82:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     f86:	f042 020d 	orr.w	r2, r2, #13
     f8a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     f8e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
     f92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     f96:	f042 0201 	orr.w	r2, r2, #1
     f9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
     f9e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
     fa2:	f002 020f 	and.w	r2, r2, #15
     fa6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
     faa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     fae:	4770      	bx	lr
     fb0:	41008000 	.word	0x41008000

00000fb4 <DIGITAL_GLUE_LOGIC_0_CLOCK_init>:
     fb4:	4a04      	ldr	r2, [pc, #16]	; (fc8 <DIGITAL_GLUE_LOGIC_0_CLOCK_init+0x14>)
     fb6:	69d3      	ldr	r3, [r2, #28]
     fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     fbc:	61d3      	str	r3, [r2, #28]
     fbe:	2240      	movs	r2, #64	; 0x40
     fc0:	4b02      	ldr	r3, [pc, #8]	; (fcc <DIGITAL_GLUE_LOGIC_0_CLOCK_init+0x18>)
     fc2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
     fc6:	4770      	bx	lr
     fc8:	40000800 	.word	0x40000800
     fcc:	40001c00 	.word	0x40001c00

00000fd0 <DIGITAL_GLUE_LOGIC_0_init>:
     fd0:	b508      	push	{r3, lr}
     fd2:	4b03      	ldr	r3, [pc, #12]	; (fe0 <DIGITAL_GLUE_LOGIC_0_init+0x10>)
     fd4:	4798      	blx	r3
     fd6:	4b03      	ldr	r3, [pc, #12]	; (fe4 <DIGITAL_GLUE_LOGIC_0_init+0x14>)
     fd8:	4798      	blx	r3
     fda:	4b03      	ldr	r3, [pc, #12]	; (fe8 <DIGITAL_GLUE_LOGIC_0_init+0x18>)
     fdc:	4798      	blx	r3
     fde:	bd08      	pop	{r3, pc}
     fe0:	00000fb5 	.word	0x00000fb5
     fe4:	000022e9 	.word	0x000022e9
     fe8:	00000f2d 	.word	0x00000f2d

00000fec <EVENT_SYSTEM_0_init>:
     fec:	b508      	push	{r3, lr}
     fee:	4b08      	ldr	r3, [pc, #32]	; (1010 <EVENT_SYSTEM_0_init+0x24>)
     ff0:	2240      	movs	r2, #64	; 0x40
     ff2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     ffa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     ffe:	4a05      	ldr	r2, [pc, #20]	; (1014 <EVENT_SYSTEM_0_init+0x28>)
    1000:	6993      	ldr	r3, [r2, #24]
    1002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1006:	6193      	str	r3, [r2, #24]
    1008:	4b03      	ldr	r3, [pc, #12]	; (1018 <EVENT_SYSTEM_0_init+0x2c>)
    100a:	4798      	blx	r3
    100c:	bd08      	pop	{r3, pc}
    100e:	bf00      	nop
    1010:	40001c00 	.word	0x40001c00
    1014:	40000800 	.word	0x40000800
    1018:	00001891 	.word	0x00001891

0000101c <QUAD_SPI_0_PORT_init>:
    101c:	b430      	push	{r4, r5}
    101e:	4b5a      	ldr	r3, [pc, #360]	; (1188 <QUAD_SPI_0_PORT_init+0x16c>)
    1020:	f44f 6500 	mov.w	r5, #2048	; 0x800
    1024:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
    1028:	4a58      	ldr	r2, [pc, #352]	; (118c <QUAD_SPI_0_PORT_init+0x170>)
    102a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    102e:	4858      	ldr	r0, [pc, #352]	; (1190 <QUAD_SPI_0_PORT_init+0x174>)
    1030:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    1034:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    1038:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    103c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
    1040:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    1044:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1048:	f042 0201 	orr.w	r2, r2, #1
    104c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
    1050:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
    1054:	f002 020f 	and.w	r2, r2, #15
    1058:	f042 0270 	orr.w	r2, r2, #112	; 0x70
    105c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    1060:	f44f 7280 	mov.w	r2, #256	; 0x100
    1064:	609a      	str	r2, [r3, #8]
    1066:	494b      	ldr	r1, [pc, #300]	; (1194 <QUAD_SPI_0_PORT_init+0x178>)
    1068:	6299      	str	r1, [r3, #40]	; 0x28
    106a:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
    106e:	629c      	str	r4, [r3, #40]	; 0x28
    1070:	615a      	str	r2, [r3, #20]
    1072:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    1076:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    107a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    107e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    1082:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1086:	f042 0201 	orr.w	r2, r2, #1
    108a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    108e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    1092:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    1096:	f042 0207 	orr.w	r2, r2, #7
    109a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    109e:	f44f 7200 	mov.w	r2, #512	; 0x200
    10a2:	609a      	str	r2, [r3, #8]
    10a4:	f501 7180 	add.w	r1, r1, #256	; 0x100
    10a8:	6299      	str	r1, [r3, #40]	; 0x28
    10aa:	629c      	str	r4, [r3, #40]	; 0x28
    10ac:	615a      	str	r2, [r3, #20]
    10ae:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    10b2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    10b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    10ba:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    10be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    10c2:	f042 0201 	orr.w	r2, r2, #1
    10c6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    10ca:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    10ce:	f002 020f 	and.w	r2, r2, #15
    10d2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
    10d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    10da:	f44f 6180 	mov.w	r1, #1024	; 0x400
    10de:	6099      	str	r1, [r3, #8]
    10e0:	4a2d      	ldr	r2, [pc, #180]	; (1198 <QUAD_SPI_0_PORT_init+0x17c>)
    10e2:	629a      	str	r2, [r3, #40]	; 0x28
    10e4:	629c      	str	r4, [r3, #40]	; 0x28
    10e6:	6159      	str	r1, [r3, #20]
    10e8:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    10ec:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    10f0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    10f4:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    10f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    10fc:	f042 0201 	orr.w	r2, r2, #1
    1100:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    1104:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
    1108:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    110c:	f042 0207 	orr.w	r2, r2, #7
    1110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    1114:	609d      	str	r5, [r3, #8]
    1116:	4a21      	ldr	r2, [pc, #132]	; (119c <QUAD_SPI_0_PORT_init+0x180>)
    1118:	629a      	str	r2, [r3, #40]	; 0x28
    111a:	629c      	str	r4, [r3, #40]	; 0x28
    111c:	615d      	str	r5, [r3, #20]
    111e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    1122:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1126:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    112a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    112e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1132:	f042 0201 	orr.w	r2, r2, #1
    1136:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    113a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
    113e:	f002 020f 	and.w	r2, r2, #15
    1142:	f042 0270 	orr.w	r2, r2, #112	; 0x70
    1146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    114a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    114e:	4a14      	ldr	r2, [pc, #80]	; (11a0 <QUAD_SPI_0_PORT_init+0x184>)
    1150:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1154:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    1158:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    115c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1160:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    1164:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    1168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    116c:	f042 0201 	orr.w	r2, r2, #1
    1170:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    1174:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
    1178:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    117c:	f042 0207 	orr.w	r2, r2, #7
    1180:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    1184:	bc30      	pop	{r4, r5}
    1186:	4770      	bx	lr
    1188:	41008000 	.word	0x41008000
    118c:	40020800 	.word	0x40020800
    1190:	c0020000 	.word	0xc0020000
    1194:	40000100 	.word	0x40000100
    1198:	40000400 	.word	0x40000400
    119c:	40000800 	.word	0x40000800
    11a0:	40020400 	.word	0x40020400

000011a4 <QUAD_SPI_0_CLOCK_init>:
    11a4:	4b06      	ldr	r3, [pc, #24]	; (11c0 <QUAD_SPI_0_CLOCK_init+0x1c>)
    11a6:	691a      	ldr	r2, [r3, #16]
    11a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    11ac:	611a      	str	r2, [r3, #16]
    11ae:	691a      	ldr	r2, [r3, #16]
    11b0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    11b4:	611a      	str	r2, [r3, #16]
    11b6:	69da      	ldr	r2, [r3, #28]
    11b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    11bc:	61da      	str	r2, [r3, #28]
    11be:	4770      	bx	lr
    11c0:	40000800 	.word	0x40000800

000011c4 <QUAD_SPI_0_init>:
    11c4:	b508      	push	{r3, lr}
    11c6:	4b04      	ldr	r3, [pc, #16]	; (11d8 <QUAD_SPI_0_init+0x14>)
    11c8:	4798      	blx	r3
    11ca:	4904      	ldr	r1, [pc, #16]	; (11dc <QUAD_SPI_0_init+0x18>)
    11cc:	4804      	ldr	r0, [pc, #16]	; (11e0 <QUAD_SPI_0_init+0x1c>)
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <QUAD_SPI_0_init+0x20>)
    11d0:	4798      	blx	r3
    11d2:	4b05      	ldr	r3, [pc, #20]	; (11e8 <QUAD_SPI_0_init+0x24>)
    11d4:	4798      	blx	r3
    11d6:	bd08      	pop	{r3, pc}
    11d8:	000011a5 	.word	0x000011a5
    11dc:	42003400 	.word	0x42003400
    11e0:	20000480 	.word	0x20000480
    11e4:	000018d1 	.word	0x000018d1
    11e8:	0000101d 	.word	0x0000101d

000011ec <SPI_ENC_PORT_init>:
    11ec:	4b2b      	ldr	r3, [pc, #172]	; (129c <SPI_ENC_PORT_init+0xb0>)
    11ee:	2208      	movs	r2, #8
    11f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    11f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    11f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    11fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1200:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1204:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1208:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    120c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1210:	f042 0201 	orr.w	r2, r2, #1
    1214:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
    1218:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
    121c:	f002 020f 	and.w	r2, r2, #15
    1220:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    1224:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    1228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    122c:	605a      	str	r2, [r3, #4]
    122e:	4a1c      	ldr	r2, [pc, #112]	; (12a0 <SPI_ENC_PORT_init+0xb4>)
    1230:	629a      	str	r2, [r3, #40]	; 0x28
    1232:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    1236:	f502 7280 	add.w	r2, r2, #256	; 0x100
    123a:	629a      	str	r2, [r3, #40]	; 0x28
    123c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    1240:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1244:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    1248:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    124c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1250:	f042 0201 	orr.w	r2, r2, #1
    1254:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    1258:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    125c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    1260:	f042 0203 	orr.w	r2, r2, #3
    1264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    1268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    126c:	615a      	str	r2, [r3, #20]
    126e:	609a      	str	r2, [r3, #8]
    1270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1274:	629a      	str	r2, [r3, #40]	; 0x28
    1276:	4a0b      	ldr	r2, [pc, #44]	; (12a4 <SPI_ENC_PORT_init+0xb8>)
    1278:	629a      	str	r2, [r3, #40]	; 0x28
    127a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    127e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1282:	f042 0201 	orr.w	r2, r2, #1
    1286:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    128a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    128e:	f002 020f 	and.w	r2, r2, #15
    1292:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    1296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    129a:	4770      	bx	lr
    129c:	41008000 	.word	0x41008000
    12a0:	40020000 	.word	0x40020000
    12a4:	c0000200 	.word	0xc0000200

000012a8 <SPI_ENC_CLOCK_init>:
    12a8:	4b06      	ldr	r3, [pc, #24]	; (12c4 <SPI_ENC_CLOCK_init+0x1c>)
    12aa:	2240      	movs	r2, #64	; 0x40
    12ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    12b0:	2243      	movs	r2, #67	; 0x43
    12b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    12b6:	4a04      	ldr	r2, [pc, #16]	; (12c8 <SPI_ENC_CLOCK_init+0x20>)
    12b8:	6a13      	ldr	r3, [r2, #32]
    12ba:	f043 0302 	orr.w	r3, r3, #2
    12be:	6213      	str	r3, [r2, #32]
    12c0:	4770      	bx	lr
    12c2:	bf00      	nop
    12c4:	40001c00 	.word	0x40001c00
    12c8:	40000800 	.word	0x40000800

000012cc <SPI_ENC_init>:
    12cc:	b508      	push	{r3, lr}
    12ce:	4b04      	ldr	r3, [pc, #16]	; (12e0 <SPI_ENC_init+0x14>)
    12d0:	4798      	blx	r3
    12d2:	4904      	ldr	r1, [pc, #16]	; (12e4 <SPI_ENC_init+0x18>)
    12d4:	4804      	ldr	r0, [pc, #16]	; (12e8 <SPI_ENC_init+0x1c>)
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <SPI_ENC_init+0x20>)
    12d8:	4798      	blx	r3
    12da:	4b05      	ldr	r3, [pc, #20]	; (12f0 <SPI_ENC_init+0x24>)
    12dc:	4798      	blx	r3
    12de:	bd08      	pop	{r3, pc}
    12e0:	000012a9 	.word	0x000012a9
    12e4:	43000400 	.word	0x43000400
    12e8:	200003c8 	.word	0x200003c8
    12ec:	00001b3d 	.word	0x00001b3d
    12f0:	000011ed 	.word	0x000011ed

000012f4 <TIMER_1_CLOCK_init>:
    12f4:	4a04      	ldr	r2, [pc, #16]	; (1308 <TIMER_1_CLOCK_init+0x14>)
    12f6:	6953      	ldr	r3, [r2, #20]
    12f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    12fc:	6153      	str	r3, [r2, #20]
    12fe:	2242      	movs	r2, #66	; 0x42
    1300:	4b02      	ldr	r3, [pc, #8]	; (130c <TIMER_1_CLOCK_init+0x18>)
    1302:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1306:	4770      	bx	lr
    1308:	40000800 	.word	0x40000800
    130c:	40001c00 	.word	0x40001c00

00001310 <TIMER_0_CLOCK_init>:
    1310:	4a04      	ldr	r2, [pc, #16]	; (1324 <TIMER_0_CLOCK_init+0x14>)
    1312:	6953      	ldr	r3, [r2, #20]
    1314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1318:	6153      	str	r3, [r2, #20]
    131a:	2240      	movs	r2, #64	; 0x40
    131c:	4b02      	ldr	r3, [pc, #8]	; (1328 <TIMER_0_CLOCK_init+0x18>)
    131e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1322:	4770      	bx	lr
    1324:	40000800 	.word	0x40000800
    1328:	40001c00 	.word	0x40001c00

0000132c <PWM_0_PORT_init>:
    132c:	4b30      	ldr	r3, [pc, #192]	; (13f0 <PWM_0_PORT_init+0xc4>)
    132e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    1332:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1336:	f042 0201 	orr.w	r2, r2, #1
    133a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    133e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    1342:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    1346:	f042 0205 	orr.w	r2, r2, #5
    134a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    134e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
    1352:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1356:	f042 0201 	orr.w	r2, r2, #1
    135a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    135e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    1362:	f002 020f 	and.w	r2, r2, #15
    1366:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    136a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    136e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
    1372:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1376:	f042 0201 	orr.w	r2, r2, #1
    137a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    137e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    1382:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    1386:	f042 0205 	orr.w	r2, r2, #5
    138a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    138e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
    1392:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1396:	f042 0201 	orr.w	r2, r2, #1
    139a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    139e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    13a2:	f002 020f 	and.w	r2, r2, #15
    13a6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    13aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    13ae:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    13b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    13b6:	f042 0201 	orr.w	r2, r2, #1
    13ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    13be:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    13c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    13c6:	f042 0205 	orr.w	r2, r2, #5
    13ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    13ce:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
    13d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    13d6:	f042 0201 	orr.w	r2, r2, #1
    13da:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    13de:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    13e2:	f002 020f 	and.w	r2, r2, #15
    13e6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    13ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    13ee:	4770      	bx	lr
    13f0:	41008000 	.word	0x41008000

000013f4 <PWM_0_CLOCK_init>:
    13f4:	4a04      	ldr	r2, [pc, #16]	; (1408 <PWM_0_CLOCK_init+0x14>)
    13f6:	6993      	ldr	r3, [r2, #24]
    13f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    13fc:	6193      	str	r3, [r2, #24]
    13fe:	2240      	movs	r2, #64	; 0x40
    1400:	4b02      	ldr	r3, [pc, #8]	; (140c <PWM_0_CLOCK_init+0x18>)
    1402:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1406:	4770      	bx	lr
    1408:	40000800 	.word	0x40000800
    140c:	40001c00 	.word	0x40001c00

00001410 <system_init>:
    1410:	b510      	push	{r4, lr}
    1412:	4b55      	ldr	r3, [pc, #340]	; (1568 <system_init+0x158>)
    1414:	4798      	blx	r3
    1416:	4b55      	ldr	r3, [pc, #340]	; (156c <system_init+0x15c>)
    1418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    141c:	615a      	str	r2, [r3, #20]
    141e:	609a      	str	r2, [r3, #8]
    1420:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1424:	629a      	str	r2, [r3, #40]	; 0x28
    1426:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    142a:	629a      	str	r2, [r3, #40]	; 0x28
    142c:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
    1430:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    1434:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
    1438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    143c:	6159      	str	r1, [r3, #20]
    143e:	6099      	str	r1, [r3, #8]
    1440:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1444:	6299      	str	r1, [r3, #40]	; 0x28
    1446:	629a      	str	r2, [r3, #40]	; 0x28
    1448:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
    144c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    1450:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
    1454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1458:	6159      	str	r1, [r3, #20]
    145a:	6099      	str	r1, [r3, #8]
    145c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    1460:	6299      	str	r1, [r3, #40]	; 0x28
    1462:	629a      	str	r2, [r3, #40]	; 0x28
    1464:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
    1468:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    146c:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
    1470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1474:	6159      	str	r1, [r3, #20]
    1476:	6099      	str	r1, [r3, #8]
    1478:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    147c:	6299      	str	r1, [r3, #40]	; 0x28
    147e:	629a      	str	r2, [r3, #40]	; 0x28
    1480:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
    1484:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    1488:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
    148c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1490:	6159      	str	r1, [r3, #20]
    1492:	6099      	str	r1, [r3, #8]
    1494:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1498:	6299      	str	r1, [r3, #40]	; 0x28
    149a:	4835      	ldr	r0, [pc, #212]	; (1570 <system_init+0x160>)
    149c:	6298      	str	r0, [r3, #40]	; 0x28
    149e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
    14a2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    14a6:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
    14aa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    14ae:	6058      	str	r0, [r3, #4]
    14b0:	4c30      	ldr	r4, [pc, #192]	; (1574 <system_init+0x164>)
    14b2:	629c      	str	r4, [r3, #40]	; 0x28
    14b4:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    14b8:	3480      	adds	r4, #128	; 0x80
    14ba:	629c      	str	r4, [r3, #40]	; 0x28
    14bc:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
    14c0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    14c4:	f883 4057 	strb.w	r4, [r3, #87]	; 0x57
    14c8:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
    14cc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
    14d0:	f883 4057 	strb.w	r4, [r3, #87]	; 0x57
    14d4:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    14d8:	615c      	str	r4, [r3, #20]
    14da:	609c      	str	r4, [r3, #8]
    14dc:	6299      	str	r1, [r3, #40]	; 0x28
    14de:	4c26      	ldr	r4, [pc, #152]	; (1578 <system_init+0x168>)
    14e0:	629c      	str	r4, [r3, #40]	; 0x28
    14e2:	f893 405b 	ldrb.w	r4, [r3, #91]	; 0x5b
    14e6:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
    14ea:	f883 405b 	strb.w	r4, [r3, #91]	; 0x5b
    14ee:	2404      	movs	r4, #4
    14f0:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    14f4:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
    14f8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    14fc:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    1500:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1504:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    1508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    150c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    1510:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    1514:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    1518:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    151c:	4a17      	ldr	r2, [pc, #92]	; (157c <system_init+0x16c>)
    151e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1522:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
    1526:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    152a:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
    152e:	4b14      	ldr	r3, [pc, #80]	; (1580 <system_init+0x170>)
    1530:	4798      	blx	r3
    1532:	4b14      	ldr	r3, [pc, #80]	; (1584 <system_init+0x174>)
    1534:	4798      	blx	r3
    1536:	4b14      	ldr	r3, [pc, #80]	; (1588 <system_init+0x178>)
    1538:	4798      	blx	r3
    153a:	4b14      	ldr	r3, [pc, #80]	; (158c <system_init+0x17c>)
    153c:	4798      	blx	r3
    153e:	4b14      	ldr	r3, [pc, #80]	; (1590 <system_init+0x180>)
    1540:	4798      	blx	r3
    1542:	4b14      	ldr	r3, [pc, #80]	; (1594 <system_init+0x184>)
    1544:	4798      	blx	r3
    1546:	4b14      	ldr	r3, [pc, #80]	; (1598 <system_init+0x188>)
    1548:	4798      	blx	r3
    154a:	4b14      	ldr	r3, [pc, #80]	; (159c <system_init+0x18c>)
    154c:	4798      	blx	r3
    154e:	4b14      	ldr	r3, [pc, #80]	; (15a0 <system_init+0x190>)
    1550:	4798      	blx	r3
    1552:	4b14      	ldr	r3, [pc, #80]	; (15a4 <system_init+0x194>)
    1554:	4798      	blx	r3
    1556:	4b14      	ldr	r3, [pc, #80]	; (15a8 <system_init+0x198>)
    1558:	4798      	blx	r3
    155a:	4b14      	ldr	r3, [pc, #80]	; (15ac <system_init+0x19c>)
    155c:	4798      	blx	r3
    155e:	4b14      	ldr	r3, [pc, #80]	; (15b0 <system_init+0x1a0>)
    1560:	4798      	blx	r3
    1562:	4b14      	ldr	r3, [pc, #80]	; (15b4 <system_init+0x1a4>)
    1564:	4798      	blx	r3
    1566:	bd10      	pop	{r4, pc}
    1568:	00002399 	.word	0x00002399
    156c:	41008000 	.word	0x41008000
    1570:	c0000040 	.word	0xc0000040
    1574:	40020000 	.word	0x40020000
    1578:	c0000800 	.word	0xc0000800
    157c:	c0000080 	.word	0xc0000080
    1580:	00000d91 	.word	0x00000d91
    1584:	00000e89 	.word	0x00000e89
    1588:	00000fd1 	.word	0x00000fd1
    158c:	00000fed 	.word	0x00000fed
    1590:	000011c5 	.word	0x000011c5
    1594:	000012cd 	.word	0x000012cd
    1598:	000012f5 	.word	0x000012f5
    159c:	00003035 	.word	0x00003035
    15a0:	00001311 	.word	0x00001311
    15a4:	000030d1 	.word	0x000030d1
    15a8:	00000d55 	.word	0x00000d55
    15ac:	000013f5 	.word	0x000013f5
    15b0:	0000132d 	.word	0x0000132d
    15b4:	00002cad 	.word	0x00002cad

000015b8 <conversion_joint_encoder>:
#include "encoder_driver.h"

/*Read joint encoder position and return as float from 0 to 360 degrees*/
void conversion_joint_encoder(char* encoder_spi_reply, float* encoder_joint_pos, 
					unsigned int* encoder_joint_warning_bit, unsigned int* encoder_joint_error_bit)
{	
    15b8:	b410      	push	{r4}
    15ba:	b083      	sub	sp, #12
	*encoder_joint_warning_bit = (encoder_spi_reply[4] & (1<<0));
    15bc:	7904      	ldrb	r4, [r0, #4]
    15be:	f004 0401 	and.w	r4, r4, #1
    15c2:	6014      	str	r4, [r2, #0]
	*encoder_joint_error_bit = (encoder_spi_reply[4] & (1<<1) >> 1);
    15c4:	7902      	ldrb	r2, [r0, #4]
    15c6:	f002 0201 	and.w	r2, r2, #1
    15ca:	601a      	str	r2, [r3, #0]
	
	volatile uint32_t encoder_value = 0;
    15cc:	2300      	movs	r3, #0
    15ce:	9301      	str	r3, [sp, #4]
	volatile float absolute_joint_position = 0;
    15d0:	2300      	movs	r3, #0
    15d2:	9300      	str	r3, [sp, #0]
	
	encoder_value = ((encoder_spi_reply[2])<<11) | (encoder_spi_reply[3]<<3) | (encoder_spi_reply[4]>> 5);
    15d4:	7882      	ldrb	r2, [r0, #2]
    15d6:	78c3      	ldrb	r3, [r0, #3]
    15d8:	00db      	lsls	r3, r3, #3
    15da:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    15de:	7902      	ldrb	r2, [r0, #4]
    15e0:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
    15e4:	9301      	str	r3, [sp, #4]
	
	//absolute readings.
	absolute_joint_position = ((encoder_value / (float)0x7FFFF) * 360) + ENCODER_OFFSET;
    15e6:	ed9d 7a01 	vldr	s14, [sp, #4]
    15ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    15ee:	eddf 6a19 	vldr	s13, [pc, #100]	; 1654 <conversion_joint_encoder+0x9c>
    15f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
    15f6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 1658 <conversion_joint_encoder+0xa0>
    15fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    15fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    1602:	ee77 7a87 	vadd.f32	s15, s15, s14
    1606:	edcd 7a00 	vstr	s15, [sp]
	 *encoder_joint_pos = absolute_joint_position;
    160a:	9b00      	ldr	r3, [sp, #0]
    160c:	600b      	str	r3, [r1, #0]
	
	//new positions with damaged encoder
	if (absolute_joint_position <= NULL_POS_ABS_VALUE+ENCODER_OFFSET)
    160e:	ed9d 7a00 	vldr	s14, [sp]
    1612:	eddf 7a12 	vldr	s15, [pc, #72]	; 165c <conversion_joint_encoder+0xa4>
    1616:	eeb4 7ae7 	vcmpe.f32	s14, s15
    161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    161e:	d90f      	bls.n	1640 <conversion_joint_encoder+0x88>
	{
		*encoder_joint_pos = -absolute_joint_position + NULL_POS_ABS_VALUE;
	}
	else
	{
		*encoder_joint_pos = -absolute_joint_position + NULL_POS_ABS_VALUE + 360;
    1620:	ed9d 7a00 	vldr	s14, [sp]
    1624:	eddf 7a0e 	vldr	s15, [pc, #56]	; 1660 <conversion_joint_encoder+0xa8>
    1628:	ee77 7ac7 	vsub.f32	s15, s15, s14
    162c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1658 <conversion_joint_encoder+0xa0>
    1630:	ee77 7a87 	vadd.f32	s15, s15, s14
    1634:	edc1 7a00 	vstr	s15, [r1]
	//volatile uint8_t calculated_crc=0;
	//dw_CRCinputData = ((uint64_t)encoder_spi_reply[0] << 32) + ((uint64_t)encoder_spi_reply[1] << 24) +
	//((uint64_t)encoder_spi_reply[2] << 16) + ((uint64_t)encoder_spi_reply[3] << 8) +
	//((uint64_t)encoder_spi_reply[4] << 0 );
	//calculated_crc = ~(CRC_SPI_97_64bit(dw_CRCinputData))& 0xFF; //inverted CRC
}
    1638:	b003      	add	sp, #12
    163a:	f85d 4b04 	ldr.w	r4, [sp], #4
    163e:	4770      	bx	lr
		*encoder_joint_pos = -absolute_joint_position + NULL_POS_ABS_VALUE;
    1640:	ed9d 7a00 	vldr	s14, [sp]
    1644:	eddf 7a06 	vldr	s15, [pc, #24]	; 1660 <conversion_joint_encoder+0xa8>
    1648:	ee77 7ac7 	vsub.f32	s15, s15, s14
    164c:	edc1 7a00 	vstr	s15, [r1]
    1650:	e7f2      	b.n	1638 <conversion_joint_encoder+0x80>
    1652:	bf00      	nop
    1654:	48ffffe0 	.word	0x48ffffe0
    1658:	43b40000 	.word	0x43b40000
    165c:	422151ec 	.word	0x422151ec
    1660:	41f2a3d7 	.word	0x41f2a3d7

00001664 <adc_async_window_threshold_reached>:
    1664:	b508      	push	{r3, lr}
    1666:	6983      	ldr	r3, [r0, #24]
    1668:	b103      	cbz	r3, 166c <adc_async_window_threshold_reached+0x8>
    166a:	4798      	blx	r3
    166c:	bd08      	pop	{r3, pc}

0000166e <adc_async_error_occured>:
    166e:	b508      	push	{r3, lr}
    1670:	69c3      	ldr	r3, [r0, #28]
    1672:	b103      	cbz	r3, 1676 <adc_async_error_occured+0x8>
    1674:	4798      	blx	r3
    1676:	bd08      	pop	{r3, pc}

00001678 <adc_async_channel_conversion_done>:
    1678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    167c:	4605      	mov	r5, r0
    167e:	4688      	mov	r8, r1
    1680:	4691      	mov	r9, r2
    1682:	6a03      	ldr	r3, [r0, #32]
    1684:	5c5b      	ldrb	r3, [r3, r1]
    1686:	6a87      	ldr	r7, [r0, #40]	; 0x28
    1688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    168c:	00de      	lsls	r6, r3, #3
    168e:	19bc      	adds	r4, r7, r6
    1690:	f104 0a04 	add.w	sl, r4, #4
    1694:	b2d1      	uxtb	r1, r2
    1696:	4650      	mov	r0, sl
    1698:	4b0c      	ldr	r3, [pc, #48]	; (16cc <adc_async_channel_conversion_done+0x54>)
    169a:	4798      	blx	r3
    169c:	4628      	mov	r0, r5
    169e:	4b0c      	ldr	r3, [pc, #48]	; (16d0 <adc_async_channel_conversion_done+0x58>)
    16a0:	4798      	blx	r3
    16a2:	2801      	cmp	r0, #1
    16a4:	d907      	bls.n	16b6 <adc_async_channel_conversion_done+0x3e>
    16a6:	ea4f 2119 	mov.w	r1, r9, lsr #8
    16aa:	4650      	mov	r0, sl
    16ac:	4b07      	ldr	r3, [pc, #28]	; (16cc <adc_async_channel_conversion_done+0x54>)
    16ae:	4798      	blx	r3
    16b0:	8aa3      	ldrh	r3, [r4, #20]
    16b2:	3301      	adds	r3, #1
    16b4:	82a3      	strh	r3, [r4, #20]
    16b6:	8aa3      	ldrh	r3, [r4, #20]
    16b8:	3301      	adds	r3, #1
    16ba:	82a3      	strh	r3, [r4, #20]
    16bc:	59bb      	ldr	r3, [r7, r6]
    16be:	b113      	cbz	r3, 16c6 <adc_async_channel_conversion_done+0x4e>
    16c0:	4641      	mov	r1, r8
    16c2:	4628      	mov	r0, r5
    16c4:	4798      	blx	r3
    16c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16ca:	bf00      	nop
    16cc:	00001ee5 	.word	0x00001ee5
    16d0:	000022ad 	.word	0x000022ad

000016d4 <adc_async_init>:
    16d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16d8:	4689      	mov	r9, r1
    16da:	4616      	mov	r6, r2
    16dc:	461c      	mov	r4, r3
    16de:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    16e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    16e4:	4607      	mov	r7, r0
    16e6:	b148      	cbz	r0, 16fc <adc_async_init+0x28>
    16e8:	b151      	cbz	r1, 1700 <adc_async_init+0x2c>
    16ea:	b15a      	cbz	r2, 1704 <adc_async_init+0x30>
    16ec:	f1b8 0f00 	cmp.w	r8, #0
    16f0:	d00a      	beq.n	1708 <adc_async_init+0x34>
    16f2:	b10d      	cbz	r5, 16f8 <adc_async_init+0x24>
    16f4:	2001      	movs	r0, #1
    16f6:	e008      	b.n	170a <adc_async_init+0x36>
    16f8:	2000      	movs	r0, #0
    16fa:	e006      	b.n	170a <adc_async_init+0x36>
    16fc:	2000      	movs	r0, #0
    16fe:	e004      	b.n	170a <adc_async_init+0x36>
    1700:	2000      	movs	r0, #0
    1702:	e002      	b.n	170a <adc_async_init+0x36>
    1704:	2000      	movs	r0, #0
    1706:	e000      	b.n	170a <adc_async_init+0x36>
    1708:	2000      	movs	r0, #0
    170a:	f8df b068 	ldr.w	fp, [pc, #104]	; 1774 <adc_async_init+0xa0>
    170e:	223f      	movs	r2, #63	; 0x3f
    1710:	4659      	mov	r1, fp
    1712:	f8df a064 	ldr.w	sl, [pc, #100]	; 1778 <adc_async_init+0xa4>
    1716:	47d0      	blx	sl
    1718:	1c60      	adds	r0, r4, #1
    171a:	2240      	movs	r2, #64	; 0x40
    171c:	4659      	mov	r1, fp
    171e:	4580      	cmp	r8, r0
    1720:	bfcc      	ite	gt
    1722:	2000      	movgt	r0, #0
    1724:	2001      	movle	r0, #1
    1726:	47d0      	blx	sl
    1728:	2300      	movs	r3, #0
    172a:	e003      	b.n	1734 <adc_async_init+0x60>
    172c:	22ff      	movs	r2, #255	; 0xff
    172e:	54f2      	strb	r2, [r6, r3]
    1730:	3301      	adds	r3, #1
    1732:	b2db      	uxtb	r3, r3
    1734:	42a3      	cmp	r3, r4
    1736:	d9f9      	bls.n	172c <adc_async_init+0x58>
    1738:	623e      	str	r6, [r7, #32]
    173a:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
    173e:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
    1742:	62bd      	str	r5, [r7, #40]	; 0x28
    1744:	4649      	mov	r1, r9
    1746:	4638      	mov	r0, r7
    1748:	4b06      	ldr	r3, [pc, #24]	; (1764 <adc_async_init+0x90>)
    174a:	4798      	blx	r3
    174c:	4603      	mov	r3, r0
    174e:	b928      	cbnz	r0, 175c <adc_async_init+0x88>
    1750:	4a05      	ldr	r2, [pc, #20]	; (1768 <adc_async_init+0x94>)
    1752:	60ba      	str	r2, [r7, #8]
    1754:	4a05      	ldr	r2, [pc, #20]	; (176c <adc_async_init+0x98>)
    1756:	603a      	str	r2, [r7, #0]
    1758:	4a05      	ldr	r2, [pc, #20]	; (1770 <adc_async_init+0x9c>)
    175a:	607a      	str	r2, [r7, #4]
    175c:	4618      	mov	r0, r3
    175e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1762:	bf00      	nop
    1764:	00002199 	.word	0x00002199
    1768:	00001679 	.word	0x00001679
    176c:	00001665 	.word	0x00001665
    1770:	0000166f 	.word	0x0000166f
    1774:	00004208 	.word	0x00004208
    1778:	00001e41 	.word	0x00001e41

0000177c <adc_async_register_channel_buffer>:
    177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1780:	460e      	mov	r6, r1
    1782:	4617      	mov	r7, r2
    1784:	4698      	mov	r8, r3
    1786:	4605      	mov	r5, r0
    1788:	b1c0      	cbz	r0, 17bc <adc_async_register_channel_buffer+0x40>
    178a:	b1ca      	cbz	r2, 17c0 <adc_async_register_channel_buffer+0x44>
    178c:	b9d3      	cbnz	r3, 17c4 <adc_async_register_channel_buffer+0x48>
    178e:	2000      	movs	r0, #0
    1790:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1830 <adc_async_register_channel_buffer+0xb4>
    1794:	2266      	movs	r2, #102	; 0x66
    1796:	4649      	mov	r1, r9
    1798:	4c23      	ldr	r4, [pc, #140]	; (1828 <adc_async_register_channel_buffer+0xac>)
    179a:	47a0      	blx	r4
    179c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    17a0:	2267      	movs	r2, #103	; 0x67
    17a2:	4649      	mov	r1, r9
    17a4:	42b0      	cmp	r0, r6
    17a6:	bf34      	ite	cc
    17a8:	2000      	movcc	r0, #0
    17aa:	2001      	movcs	r0, #1
    17ac:	47a0      	blx	r4
    17ae:	6a29      	ldr	r1, [r5, #32]
    17b0:	5d8b      	ldrb	r3, [r1, r6]
    17b2:	2bff      	cmp	r3, #255	; 0xff
    17b4:	d12f      	bne.n	1816 <adc_async_register_channel_buffer+0x9a>
    17b6:	2400      	movs	r4, #0
    17b8:	4623      	mov	r3, r4
    17ba:	e007      	b.n	17cc <adc_async_register_channel_buffer+0x50>
    17bc:	2000      	movs	r0, #0
    17be:	e7e7      	b.n	1790 <adc_async_register_channel_buffer+0x14>
    17c0:	2000      	movs	r0, #0
    17c2:	e7e5      	b.n	1790 <adc_async_register_channel_buffer+0x14>
    17c4:	2001      	movs	r0, #1
    17c6:	e7e3      	b.n	1790 <adc_async_register_channel_buffer+0x14>
    17c8:	3301      	adds	r3, #1
    17ca:	b2db      	uxtb	r3, r3
    17cc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    17d0:	4293      	cmp	r3, r2
    17d2:	d805      	bhi.n	17e0 <adc_async_register_channel_buffer+0x64>
    17d4:	5cca      	ldrb	r2, [r1, r3]
    17d6:	2aff      	cmp	r2, #255	; 0xff
    17d8:	d0f6      	beq.n	17c8 <adc_async_register_channel_buffer+0x4c>
    17da:	3401      	adds	r4, #1
    17dc:	b2e4      	uxtb	r4, r4
    17de:	e7f3      	b.n	17c8 <adc_async_register_channel_buffer+0x4c>
    17e0:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    17e4:	429c      	cmp	r4, r3
    17e6:	d819      	bhi.n	181c <adc_async_register_channel_buffer+0xa0>
    17e8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    17ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    17ee:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    17f2:	4448      	add	r0, r9
    17f4:	4642      	mov	r2, r8
    17f6:	4639      	mov	r1, r7
    17f8:	3004      	adds	r0, #4
    17fa:	4b0c      	ldr	r3, [pc, #48]	; (182c <adc_async_register_channel_buffer+0xb0>)
    17fc:	4798      	blx	r3
    17fe:	4602      	mov	r2, r0
    1800:	b978      	cbnz	r0, 1822 <adc_async_register_channel_buffer+0xa6>
    1802:	6a2b      	ldr	r3, [r5, #32]
    1804:	559c      	strb	r4, [r3, r6]
    1806:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1808:	4499      	add	r9, r3
    180a:	2300      	movs	r3, #0
    180c:	f8a9 3014 	strh.w	r3, [r9, #20]
    1810:	4610      	mov	r0, r2
    1812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1816:	f06f 020c 	mvn.w	r2, #12
    181a:	e7f9      	b.n	1810 <adc_async_register_channel_buffer+0x94>
    181c:	f06f 021b 	mvn.w	r2, #27
    1820:	e7f6      	b.n	1810 <adc_async_register_channel_buffer+0x94>
    1822:	f06f 020c 	mvn.w	r2, #12
    1826:	e7f3      	b.n	1810 <adc_async_register_channel_buffer+0x94>
    1828:	00001e41 	.word	0x00001e41
    182c:	00001ea1 	.word	0x00001ea1
    1830:	00004208 	.word	0x00004208

00001834 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1834:	f3ef 8310 	mrs	r3, PRIMASK
    1838:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    183a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    183c:	f3bf 8f5f 	dmb	sy
    1840:	4770      	bx	lr

00001842 <atomic_leave_critical>:
    1842:	f3bf 8f5f 	dmb	sy
    1846:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1848:	f383 8810 	msr	PRIMASK, r3
    184c:	4770      	bx	lr
	...

00001850 <delay_us>:
    1850:	b510      	push	{r4, lr}
    1852:	4b04      	ldr	r3, [pc, #16]	; (1864 <delay_us+0x14>)
    1854:	681c      	ldr	r4, [r3, #0]
    1856:	4b04      	ldr	r3, [pc, #16]	; (1868 <delay_us+0x18>)
    1858:	4798      	blx	r3
    185a:	4601      	mov	r1, r0
    185c:	4620      	mov	r0, r4
    185e:	4b03      	ldr	r3, [pc, #12]	; (186c <delay_us+0x1c>)
    1860:	4798      	blx	r3
    1862:	bd10      	pop	{r4, pc}
    1864:	20000118 	.word	0x20000118
    1868:	00002355 	.word	0x00002355
    186c:	00002391 	.word	0x00002391

00001870 <delay_ms>:
    1870:	b510      	push	{r4, lr}
    1872:	4b04      	ldr	r3, [pc, #16]	; (1884 <delay_ms+0x14>)
    1874:	681c      	ldr	r4, [r3, #0]
    1876:	4b04      	ldr	r3, [pc, #16]	; (1888 <delay_ms+0x18>)
    1878:	4798      	blx	r3
    187a:	4601      	mov	r1, r0
    187c:	4620      	mov	r0, r4
    187e:	4b03      	ldr	r3, [pc, #12]	; (188c <delay_ms+0x1c>)
    1880:	4798      	blx	r3
    1882:	bd10      	pop	{r4, pc}
    1884:	20000118 	.word	0x20000118
    1888:	0000236d 	.word	0x0000236d
    188c:	00002391 	.word	0x00002391

00001890 <event_system_init>:
    1890:	b508      	push	{r3, lr}
    1892:	4b01      	ldr	r3, [pc, #4]	; (1898 <event_system_init+0x8>)
    1894:	4798      	blx	r3
    1896:	bd08      	pop	{r3, pc}
    1898:	000023f1 	.word	0x000023f1

0000189c <io_read>:
    189c:	b570      	push	{r4, r5, r6, lr}
    189e:	460d      	mov	r5, r1
    18a0:	4616      	mov	r6, r2
    18a2:	4604      	mov	r4, r0
    18a4:	b168      	cbz	r0, 18c2 <io_read+0x26>
    18a6:	b151      	cbz	r1, 18be <io_read+0x22>
    18a8:	2001      	movs	r0, #1
    18aa:	223d      	movs	r2, #61	; 0x3d
    18ac:	4906      	ldr	r1, [pc, #24]	; (18c8 <io_read+0x2c>)
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <io_read+0x30>)
    18b0:	4798      	blx	r3
    18b2:	6863      	ldr	r3, [r4, #4]
    18b4:	4632      	mov	r2, r6
    18b6:	4629      	mov	r1, r5
    18b8:	4620      	mov	r0, r4
    18ba:	4798      	blx	r3
    18bc:	bd70      	pop	{r4, r5, r6, pc}
    18be:	2000      	movs	r0, #0
    18c0:	e7f3      	b.n	18aa <io_read+0xe>
    18c2:	2000      	movs	r0, #0
    18c4:	e7f1      	b.n	18aa <io_read+0xe>
    18c6:	bf00      	nop
    18c8:	00004224 	.word	0x00004224
    18cc:	00001e41 	.word	0x00001e41

000018d0 <qspi_sync_init>:
    18d0:	b538      	push	{r3, r4, r5, lr}
    18d2:	460c      	mov	r4, r1
    18d4:	4605      	mov	r5, r0
    18d6:	b160      	cbz	r0, 18f2 <qspi_sync_init+0x22>
    18d8:	b149      	cbz	r1, 18ee <qspi_sync_init+0x1e>
    18da:	2001      	movs	r0, #1
    18dc:	2231      	movs	r2, #49	; 0x31
    18de:	4906      	ldr	r1, [pc, #24]	; (18f8 <qspi_sync_init+0x28>)
    18e0:	4b06      	ldr	r3, [pc, #24]	; (18fc <qspi_sync_init+0x2c>)
    18e2:	4798      	blx	r3
    18e4:	4621      	mov	r1, r4
    18e6:	4628      	mov	r0, r5
    18e8:	4b05      	ldr	r3, [pc, #20]	; (1900 <qspi_sync_init+0x30>)
    18ea:	4798      	blx	r3
    18ec:	bd38      	pop	{r3, r4, r5, pc}
    18ee:	2000      	movs	r0, #0
    18f0:	e7f4      	b.n	18dc <qspi_sync_init+0xc>
    18f2:	2000      	movs	r0, #0
    18f4:	e7f2      	b.n	18dc <qspi_sync_init+0xc>
    18f6:	bf00      	nop
    18f8:	00004238 	.word	0x00004238
    18fc:	00001e41 	.word	0x00001e41
    1900:	000026d9 	.word	0x000026d9

00001904 <qspi_sync_enable>:
    1904:	b510      	push	{r4, lr}
    1906:	4604      	mov	r4, r0
    1908:	223f      	movs	r2, #63	; 0x3f
    190a:	4905      	ldr	r1, [pc, #20]	; (1920 <qspi_sync_enable+0x1c>)
    190c:	3000      	adds	r0, #0
    190e:	bf18      	it	ne
    1910:	2001      	movne	r0, #1
    1912:	4b04      	ldr	r3, [pc, #16]	; (1924 <qspi_sync_enable+0x20>)
    1914:	4798      	blx	r3
    1916:	4620      	mov	r0, r4
    1918:	4b03      	ldr	r3, [pc, #12]	; (1928 <qspi_sync_enable+0x24>)
    191a:	4798      	blx	r3
    191c:	bd10      	pop	{r4, pc}
    191e:	bf00      	nop
    1920:	00004238 	.word	0x00004238
    1924:	00001e41 	.word	0x00001e41
    1928:	00002711 	.word	0x00002711

0000192c <qspi_sync_serial_run_command>:
    192c:	b538      	push	{r3, r4, r5, lr}
    192e:	460c      	mov	r4, r1
    1930:	4605      	mov	r5, r0
    1932:	b160      	cbz	r0, 194e <qspi_sync_serial_run_command+0x22>
    1934:	b149      	cbz	r1, 194a <qspi_sync_serial_run_command+0x1e>
    1936:	2001      	movs	r0, #1
    1938:	224d      	movs	r2, #77	; 0x4d
    193a:	4906      	ldr	r1, [pc, #24]	; (1954 <qspi_sync_serial_run_command+0x28>)
    193c:	4b06      	ldr	r3, [pc, #24]	; (1958 <qspi_sync_serial_run_command+0x2c>)
    193e:	4798      	blx	r3
    1940:	4621      	mov	r1, r4
    1942:	4628      	mov	r0, r5
    1944:	4b05      	ldr	r3, [pc, #20]	; (195c <qspi_sync_serial_run_command+0x30>)
    1946:	4798      	blx	r3
    1948:	bd38      	pop	{r3, r4, r5, pc}
    194a:	2000      	movs	r0, #0
    194c:	e7f4      	b.n	1938 <qspi_sync_serial_run_command+0xc>
    194e:	2000      	movs	r0, #0
    1950:	e7f2      	b.n	1938 <qspi_sync_serial_run_command+0xc>
    1952:	bf00      	nop
    1954:	00004238 	.word	0x00004238
    1958:	00001e41 	.word	0x00001e41
    195c:	0000271d 	.word	0x0000271d

00001960 <_spi_m_async_io_write>:
    1960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1962:	460f      	mov	r7, r1
    1964:	4616      	mov	r6, r2
    1966:	4604      	mov	r4, r0
    1968:	f240 1227 	movw	r2, #295	; 0x127
    196c:	4909      	ldr	r1, [pc, #36]	; (1994 <_spi_m_async_io_write+0x34>)
    196e:	3000      	adds	r0, #0
    1970:	bf18      	it	ne
    1972:	2001      	movne	r0, #1
    1974:	4b08      	ldr	r3, [pc, #32]	; (1998 <_spi_m_async_io_write+0x38>)
    1976:	4798      	blx	r3
    1978:	2500      	movs	r5, #0
    197a:	61a5      	str	r5, [r4, #24]
    197c:	6167      	str	r7, [r4, #20]
    197e:	61e6      	str	r6, [r4, #28]
    1980:	6225      	str	r5, [r4, #32]
    1982:	2310      	movs	r3, #16
    1984:	7223      	strb	r3, [r4, #8]
    1986:	2101      	movs	r1, #1
    1988:	f1a4 0020 	sub.w	r0, r4, #32
    198c:	4b03      	ldr	r3, [pc, #12]	; (199c <_spi_m_async_io_write+0x3c>)
    198e:	4798      	blx	r3
    1990:	4628      	mov	r0, r5
    1992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1994:	00004254 	.word	0x00004254
    1998:	00001e41 	.word	0x00001e41
    199c:	00002b2d 	.word	0x00002b2d

000019a0 <_spi_m_async_io_read>:
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	460d      	mov	r5, r1
    19a4:	4616      	mov	r6, r2
    19a6:	4604      	mov	r4, r0
    19a8:	f240 1205 	movw	r2, #261	; 0x105
    19ac:	490c      	ldr	r1, [pc, #48]	; (19e0 <_spi_m_async_io_read+0x40>)
    19ae:	3000      	adds	r0, #0
    19b0:	bf18      	it	ne
    19b2:	2001      	movne	r0, #1
    19b4:	4b0b      	ldr	r3, [pc, #44]	; (19e4 <_spi_m_async_io_read+0x44>)
    19b6:	4798      	blx	r3
    19b8:	61a5      	str	r5, [r4, #24]
    19ba:	2500      	movs	r5, #0
    19bc:	6165      	str	r5, [r4, #20]
    19be:	61e6      	str	r6, [r4, #28]
    19c0:	6225      	str	r5, [r4, #32]
    19c2:	2310      	movs	r3, #16
    19c4:	7223      	strb	r3, [r4, #8]
    19c6:	3c20      	subs	r4, #32
    19c8:	2101      	movs	r1, #1
    19ca:	4620      	mov	r0, r4
    19cc:	4b06      	ldr	r3, [pc, #24]	; (19e8 <_spi_m_async_io_read+0x48>)
    19ce:	4798      	blx	r3
    19d0:	f240 11ff 	movw	r1, #511	; 0x1ff
    19d4:	4620      	mov	r0, r4
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <_spi_m_async_io_read+0x4c>)
    19d8:	4798      	blx	r3
    19da:	4628      	mov	r0, r5
    19dc:	bd70      	pop	{r4, r5, r6, pc}
    19de:	bf00      	nop
    19e0:	00004254 	.word	0x00004254
    19e4:	00001e41 	.word	0x00001e41
    19e8:	00002b65 	.word	0x00002b65
    19ec:	00002be1 	.word	0x00002be1

000019f0 <_spi_dev_error>:
    19f0:	b570      	push	{r4, r5, r6, lr}
    19f2:	4604      	mov	r4, r0
    19f4:	460e      	mov	r6, r1
    19f6:	1f05      	subs	r5, r0, #4
    19f8:	2100      	movs	r1, #0
    19fa:	4b09      	ldr	r3, [pc, #36]	; (1a20 <_spi_dev_error+0x30>)
    19fc:	4798      	blx	r3
    19fe:	2100      	movs	r1, #0
    1a00:	4620      	mov	r0, r4
    1a02:	4b08      	ldr	r3, [pc, #32]	; (1a24 <_spi_dev_error+0x34>)
    1a04:	4798      	blx	r3
    1a06:	2100      	movs	r1, #0
    1a08:	4620      	mov	r0, r4
    1a0a:	4b07      	ldr	r3, [pc, #28]	; (1a28 <_spi_dev_error+0x38>)
    1a0c:	4798      	blx	r3
    1a0e:	2300      	movs	r3, #0
    1a10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    1a14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1a16:	b113      	cbz	r3, 1a1e <_spi_dev_error+0x2e>
    1a18:	4631      	mov	r1, r6
    1a1a:	4628      	mov	r0, r5
    1a1c:	4798      	blx	r3
    1a1e:	bd70      	pop	{r4, r5, r6, pc}
    1a20:	00002b2d 	.word	0x00002b2d
    1a24:	00002b65 	.word	0x00002b65
    1a28:	00002ba5 	.word	0x00002ba5

00001a2c <_spi_dev_complete>:
    1a2c:	b538      	push	{r3, r4, r5, lr}
    1a2e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1a30:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1a32:	429a      	cmp	r2, r3
    1a34:	d200      	bcs.n	1a38 <_spi_dev_complete+0xc>
    1a36:	bd38      	pop	{r3, r4, r5, pc}
    1a38:	1f05      	subs	r5, r0, #4
    1a3a:	4604      	mov	r4, r0
    1a3c:	2100      	movs	r1, #0
    1a3e:	4b05      	ldr	r3, [pc, #20]	; (1a54 <_spi_dev_complete+0x28>)
    1a40:	4798      	blx	r3
    1a42:	2300      	movs	r3, #0
    1a44:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    1a48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d0f3      	beq.n	1a36 <_spi_dev_complete+0xa>
    1a4e:	4628      	mov	r0, r5
    1a50:	4798      	blx	r3
    1a52:	e7f0      	b.n	1a36 <_spi_dev_complete+0xa>
    1a54:	00002ba5 	.word	0x00002ba5

00001a58 <_spi_dev_tx>:
    1a58:	b510      	push	{r4, lr}
    1a5a:	4604      	mov	r4, r0
    1a5c:	7903      	ldrb	r3, [r0, #4]
    1a5e:	2b01      	cmp	r3, #1
    1a60:	d90c      	bls.n	1a7c <_spi_dev_tx+0x24>
    1a62:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1a64:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1a66:	1c59      	adds	r1, r3, #1
    1a68:	6401      	str	r1, [r0, #64]	; 0x40
    1a6a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    1a6e:	4b0c      	ldr	r3, [pc, #48]	; (1aa0 <_spi_dev_tx+0x48>)
    1a70:	4798      	blx	r3
    1a72:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1a74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1a76:	429a      	cmp	r2, r3
    1a78:	d008      	beq.n	1a8c <_spi_dev_tx+0x34>
    1a7a:	bd10      	pop	{r4, pc}
    1a7c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1a7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1a80:	1c59      	adds	r1, r3, #1
    1a82:	6401      	str	r1, [r0, #64]	; 0x40
    1a84:	5cd1      	ldrb	r1, [r2, r3]
    1a86:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <_spi_dev_tx+0x48>)
    1a88:	4798      	blx	r3
    1a8a:	e7f2      	b.n	1a72 <_spi_dev_tx+0x1a>
    1a8c:	2100      	movs	r1, #0
    1a8e:	4620      	mov	r0, r4
    1a90:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <_spi_dev_tx+0x4c>)
    1a92:	4798      	blx	r3
    1a94:	2101      	movs	r1, #1
    1a96:	4620      	mov	r0, r4
    1a98:	4b03      	ldr	r3, [pc, #12]	; (1aa8 <_spi_dev_tx+0x50>)
    1a9a:	4798      	blx	r3
    1a9c:	e7ed      	b.n	1a7a <_spi_dev_tx+0x22>
    1a9e:	bf00      	nop
    1aa0:	00002be1 	.word	0x00002be1
    1aa4:	00002b2d 	.word	0x00002b2d
    1aa8:	00002ba5 	.word	0x00002ba5

00001aac <_spi_dev_rx>:
    1aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aae:	4604      	mov	r4, r0
    1ab0:	1f07      	subs	r7, r0, #4
    1ab2:	6b85      	ldr	r5, [r0, #56]	; 0x38
    1ab4:	b1fd      	cbz	r5, 1af6 <_spi_dev_rx+0x4a>
    1ab6:	7903      	ldrb	r3, [r0, #4]
    1ab8:	2b01      	cmp	r3, #1
    1aba:	d915      	bls.n	1ae8 <_spi_dev_rx+0x3c>
    1abc:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1abe:	1c73      	adds	r3, r6, #1
    1ac0:	6403      	str	r3, [r0, #64]	; 0x40
    1ac2:	4b1b      	ldr	r3, [pc, #108]	; (1b30 <_spi_dev_rx+0x84>)
    1ac4:	4798      	blx	r3
    1ac6:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    1aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1acc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1ace:	4293      	cmp	r3, r2
    1ad0:	d221      	bcs.n	1b16 <_spi_dev_rx+0x6a>
    1ad2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1ad4:	b1d2      	cbz	r2, 1b0c <_spi_dev_rx+0x60>
    1ad6:	7921      	ldrb	r1, [r4, #4]
    1ad8:	2901      	cmp	r1, #1
    1ada:	d912      	bls.n	1b02 <_spi_dev_rx+0x56>
    1adc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    1ae0:	4620      	mov	r0, r4
    1ae2:	4b14      	ldr	r3, [pc, #80]	; (1b34 <_spi_dev_rx+0x88>)
    1ae4:	4798      	blx	r3
    1ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ae8:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1aea:	1c73      	adds	r3, r6, #1
    1aec:	6403      	str	r3, [r0, #64]	; 0x40
    1aee:	4b10      	ldr	r3, [pc, #64]	; (1b30 <_spi_dev_rx+0x84>)
    1af0:	4798      	blx	r3
    1af2:	55a8      	strb	r0, [r5, r6]
    1af4:	e7e9      	b.n	1aca <_spi_dev_rx+0x1e>
    1af6:	4b0e      	ldr	r3, [pc, #56]	; (1b30 <_spi_dev_rx+0x84>)
    1af8:	4798      	blx	r3
    1afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1afc:	3301      	adds	r3, #1
    1afe:	6423      	str	r3, [r4, #64]	; 0x40
    1b00:	e7e3      	b.n	1aca <_spi_dev_rx+0x1e>
    1b02:	5cd1      	ldrb	r1, [r2, r3]
    1b04:	4620      	mov	r0, r4
    1b06:	4b0b      	ldr	r3, [pc, #44]	; (1b34 <_spi_dev_rx+0x88>)
    1b08:	4798      	blx	r3
    1b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b0c:	88e1      	ldrh	r1, [r4, #6]
    1b0e:	4620      	mov	r0, r4
    1b10:	4b08      	ldr	r3, [pc, #32]	; (1b34 <_spi_dev_rx+0x88>)
    1b12:	4798      	blx	r3
    1b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b16:	2100      	movs	r1, #0
    1b18:	4620      	mov	r0, r4
    1b1a:	4b07      	ldr	r3, [pc, #28]	; (1b38 <_spi_dev_rx+0x8c>)
    1b1c:	4798      	blx	r3
    1b1e:	2300      	movs	r3, #0
    1b20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    1b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b26:	b10b      	cbz	r3, 1b2c <_spi_dev_rx+0x80>
    1b28:	4638      	mov	r0, r7
    1b2a:	4798      	blx	r3
    1b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b2e:	bf00      	nop
    1b30:	00002c11 	.word	0x00002c11
    1b34:	00002be1 	.word	0x00002be1
    1b38:	00002b65 	.word	0x00002b65

00001b3c <spi_m_async_init>:
    1b3c:	b570      	push	{r4, r5, r6, lr}
    1b3e:	460d      	mov	r5, r1
    1b40:	4606      	mov	r6, r0
    1b42:	b338      	cbz	r0, 1b94 <spi_m_async_init+0x58>
    1b44:	b321      	cbz	r1, 1b90 <spi_m_async_init+0x54>
    1b46:	2001      	movs	r0, #1
    1b48:	22a5      	movs	r2, #165	; 0xa5
    1b4a:	4913      	ldr	r1, [pc, #76]	; (1b98 <spi_m_async_init+0x5c>)
    1b4c:	4b13      	ldr	r3, [pc, #76]	; (1b9c <spi_m_async_init+0x60>)
    1b4e:	4798      	blx	r3
    1b50:	4634      	mov	r4, r6
    1b52:	f844 5f04 	str.w	r5, [r4, #4]!
    1b56:	4629      	mov	r1, r5
    1b58:	4620      	mov	r0, r4
    1b5a:	4b11      	ldr	r3, [pc, #68]	; (1ba0 <spi_m_async_init+0x64>)
    1b5c:	4798      	blx	r3
    1b5e:	2800      	cmp	r0, #0
    1b60:	db15      	blt.n	1b8e <spi_m_async_init+0x52>
    1b62:	4a10      	ldr	r2, [pc, #64]	; (1ba4 <spi_m_async_init+0x68>)
    1b64:	2100      	movs	r1, #0
    1b66:	4620      	mov	r0, r4
    1b68:	4d0f      	ldr	r5, [pc, #60]	; (1ba8 <spi_m_async_init+0x6c>)
    1b6a:	47a8      	blx	r5
    1b6c:	4a0f      	ldr	r2, [pc, #60]	; (1bac <spi_m_async_init+0x70>)
    1b6e:	2101      	movs	r1, #1
    1b70:	4620      	mov	r0, r4
    1b72:	47a8      	blx	r5
    1b74:	4a0e      	ldr	r2, [pc, #56]	; (1bb0 <spi_m_async_init+0x74>)
    1b76:	2102      	movs	r1, #2
    1b78:	4620      	mov	r0, r4
    1b7a:	47a8      	blx	r5
    1b7c:	4a0d      	ldr	r2, [pc, #52]	; (1bb4 <spi_m_async_init+0x78>)
    1b7e:	2103      	movs	r1, #3
    1b80:	4620      	mov	r0, r4
    1b82:	47a8      	blx	r5
    1b84:	4b0c      	ldr	r3, [pc, #48]	; (1bb8 <spi_m_async_init+0x7c>)
    1b86:	62b3      	str	r3, [r6, #40]	; 0x28
    1b88:	4b0c      	ldr	r3, [pc, #48]	; (1bbc <spi_m_async_init+0x80>)
    1b8a:	6273      	str	r3, [r6, #36]	; 0x24
    1b8c:	2000      	movs	r0, #0
    1b8e:	bd70      	pop	{r4, r5, r6, pc}
    1b90:	2000      	movs	r0, #0
    1b92:	e7d9      	b.n	1b48 <spi_m_async_init+0xc>
    1b94:	2000      	movs	r0, #0
    1b96:	e7d7      	b.n	1b48 <spi_m_async_init+0xc>
    1b98:	00004254 	.word	0x00004254
    1b9c:	00001e41 	.word	0x00001e41
    1ba0:	00002a91 	.word	0x00002a91
    1ba4:	00001a59 	.word	0x00001a59
    1ba8:	00002c41 	.word	0x00002c41
    1bac:	00001aad 	.word	0x00001aad
    1bb0:	00001a2d 	.word	0x00001a2d
    1bb4:	000019f1 	.word	0x000019f1
    1bb8:	000019a1 	.word	0x000019a1
    1bbc:	00001961 	.word	0x00001961

00001bc0 <spi_m_async_enable>:
    1bc0:	b510      	push	{r4, lr}
    1bc2:	4604      	mov	r4, r0
    1bc4:	22c1      	movs	r2, #193	; 0xc1
    1bc6:	4905      	ldr	r1, [pc, #20]	; (1bdc <spi_m_async_enable+0x1c>)
    1bc8:	3000      	adds	r0, #0
    1bca:	bf18      	it	ne
    1bcc:	2001      	movne	r0, #1
    1bce:	4b04      	ldr	r3, [pc, #16]	; (1be0 <spi_m_async_enable+0x20>)
    1bd0:	4798      	blx	r3
    1bd2:	1d20      	adds	r0, r4, #4
    1bd4:	4b03      	ldr	r3, [pc, #12]	; (1be4 <spi_m_async_enable+0x24>)
    1bd6:	4798      	blx	r3
    1bd8:	bd10      	pop	{r4, pc}
    1bda:	bf00      	nop
    1bdc:	00004254 	.word	0x00004254
    1be0:	00001e41 	.word	0x00001e41
    1be4:	00002af9 	.word	0x00002af9

00001be8 <spi_m_async_register_callback>:
    1be8:	b570      	push	{r4, r5, r6, lr}
    1bea:	460c      	mov	r4, r1
    1bec:	4616      	mov	r6, r2
    1bee:	4605      	mov	r5, r0
    1bf0:	b150      	cbz	r0, 1c08 <spi_m_async_register_callback+0x20>
    1bf2:	2901      	cmp	r1, #1
    1bf4:	d90a      	bls.n	1c0c <spi_m_async_register_callback+0x24>
    1bf6:	2000      	movs	r0, #0
    1bf8:	f240 1263 	movw	r2, #355	; 0x163
    1bfc:	4909      	ldr	r1, [pc, #36]	; (1c24 <spi_m_async_register_callback+0x3c>)
    1bfe:	4b0a      	ldr	r3, [pc, #40]	; (1c28 <spi_m_async_register_callback+0x40>)
    1c00:	4798      	blx	r3
    1c02:	b92c      	cbnz	r4, 1c10 <spi_m_async_register_callback+0x28>
    1c04:	632e      	str	r6, [r5, #48]	; 0x30
    1c06:	bd70      	pop	{r4, r5, r6, pc}
    1c08:	2000      	movs	r0, #0
    1c0a:	e7f5      	b.n	1bf8 <spi_m_async_register_callback+0x10>
    1c0c:	2001      	movs	r0, #1
    1c0e:	e7f3      	b.n	1bf8 <spi_m_async_register_callback+0x10>
    1c10:	636e      	str	r6, [r5, #52]	; 0x34
    1c12:	1c32      	adds	r2, r6, #0
    1c14:	bf18      	it	ne
    1c16:	2201      	movne	r2, #1
    1c18:	2103      	movs	r1, #3
    1c1a:	1d28      	adds	r0, r5, #4
    1c1c:	4b03      	ldr	r3, [pc, #12]	; (1c2c <spi_m_async_register_callback+0x44>)
    1c1e:	4798      	blx	r3
    1c20:	bd70      	pop	{r4, r5, r6, pc}
    1c22:	bf00      	nop
    1c24:	00004254 	.word	0x00004254
    1c28:	00001e41 	.word	0x00001e41
    1c2c:	00002c75 	.word	0x00002c75

00001c30 <spi_m_async_get_io_descriptor>:
    1c30:	b538      	push	{r3, r4, r5, lr}
    1c32:	460d      	mov	r5, r1
    1c34:	4604      	mov	r4, r0
    1c36:	b160      	cbz	r0, 1c52 <spi_m_async_get_io_descriptor+0x22>
    1c38:	b149      	cbz	r1, 1c4e <spi_m_async_get_io_descriptor+0x1e>
    1c3a:	2001      	movs	r0, #1
    1c3c:	f240 126f 	movw	r2, #367	; 0x16f
    1c40:	4905      	ldr	r1, [pc, #20]	; (1c58 <spi_m_async_get_io_descriptor+0x28>)
    1c42:	4b06      	ldr	r3, [pc, #24]	; (1c5c <spi_m_async_get_io_descriptor+0x2c>)
    1c44:	4798      	blx	r3
    1c46:	3424      	adds	r4, #36	; 0x24
    1c48:	602c      	str	r4, [r5, #0]
    1c4a:	2000      	movs	r0, #0
    1c4c:	bd38      	pop	{r3, r4, r5, pc}
    1c4e:	2000      	movs	r0, #0
    1c50:	e7f4      	b.n	1c3c <spi_m_async_get_io_descriptor+0xc>
    1c52:	2000      	movs	r0, #0
    1c54:	e7f2      	b.n	1c3c <spi_m_async_get_io_descriptor+0xc>
    1c56:	bf00      	nop
    1c58:	00004254 	.word	0x00004254
    1c5c:	00001e41 	.word	0x00001e41

00001c60 <timer_add_timer_task>:
    1c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c62:	6807      	ldr	r7, [r0, #0]
    1c64:	b117      	cbz	r7, 1c6c <timer_add_timer_task+0xc>
    1c66:	463c      	mov	r4, r7
    1c68:	2600      	movs	r6, #0
    1c6a:	e00b      	b.n	1c84 <timer_add_timer_task+0x24>
    1c6c:	4b0e      	ldr	r3, [pc, #56]	; (1ca8 <timer_add_timer_task+0x48>)
    1c6e:	4798      	blx	r3
    1c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c72:	68a5      	ldr	r5, [r4, #8]
    1c74:	442b      	add	r3, r5
    1c76:	1a9b      	subs	r3, r3, r2
    1c78:	3301      	adds	r3, #1
    1c7a:	688d      	ldr	r5, [r1, #8]
    1c7c:	42ab      	cmp	r3, r5
    1c7e:	d209      	bcs.n	1c94 <timer_add_timer_task+0x34>
    1c80:	4626      	mov	r6, r4
    1c82:	6824      	ldr	r4, [r4, #0]
    1c84:	b134      	cbz	r4, 1c94 <timer_add_timer_task+0x34>
    1c86:	6863      	ldr	r3, [r4, #4]
    1c88:	4293      	cmp	r3, r2
    1c8a:	d8f2      	bhi.n	1c72 <timer_add_timer_task+0x12>
    1c8c:	68a5      	ldr	r5, [r4, #8]
    1c8e:	1a9b      	subs	r3, r3, r2
    1c90:	442b      	add	r3, r5
    1c92:	e7f2      	b.n	1c7a <timer_add_timer_task+0x1a>
    1c94:	42bc      	cmp	r4, r7
    1c96:	d003      	beq.n	1ca0 <timer_add_timer_task+0x40>
    1c98:	4630      	mov	r0, r6
    1c9a:	4b04      	ldr	r3, [pc, #16]	; (1cac <timer_add_timer_task+0x4c>)
    1c9c:	4798      	blx	r3
    1c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca0:	4b01      	ldr	r3, [pc, #4]	; (1ca8 <timer_add_timer_task+0x48>)
    1ca2:	4798      	blx	r3
    1ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca6:	bf00      	nop
    1ca8:	00001e5d 	.word	0x00001e5d
    1cac:	00001e89 	.word	0x00001e89

00001cb0 <timer_process_counted>:
    1cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cb2:	6944      	ldr	r4, [r0, #20]
    1cb4:	6906      	ldr	r6, [r0, #16]
    1cb6:	3601      	adds	r6, #1
    1cb8:	6106      	str	r6, [r0, #16]
    1cba:	7e03      	ldrb	r3, [r0, #24]
    1cbc:	f013 0f01 	tst.w	r3, #1
    1cc0:	d105      	bne.n	1cce <timer_process_counted+0x1e>
    1cc2:	7e03      	ldrb	r3, [r0, #24]
    1cc4:	f013 0f02 	tst.w	r3, #2
    1cc8:	d101      	bne.n	1cce <timer_process_counted+0x1e>
    1cca:	4605      	mov	r5, r0
    1ccc:	e009      	b.n	1ce2 <timer_process_counted+0x32>
    1cce:	7e03      	ldrb	r3, [r0, #24]
    1cd0:	f043 0302 	orr.w	r3, r3, #2
    1cd4:	7603      	strb	r3, [r0, #24]
    1cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cd8:	696f      	ldr	r7, [r5, #20]
    1cda:	68e3      	ldr	r3, [r4, #12]
    1cdc:	4620      	mov	r0, r4
    1cde:	4798      	blx	r3
    1ce0:	463c      	mov	r4, r7
    1ce2:	b19c      	cbz	r4, 1d0c <timer_process_counted+0x5c>
    1ce4:	6863      	ldr	r3, [r4, #4]
    1ce6:	1af3      	subs	r3, r6, r3
    1ce8:	68a2      	ldr	r2, [r4, #8]
    1cea:	4293      	cmp	r3, r2
    1cec:	d30e      	bcc.n	1d0c <timer_process_counted+0x5c>
    1cee:	f105 0714 	add.w	r7, r5, #20
    1cf2:	4638      	mov	r0, r7
    1cf4:	4b06      	ldr	r3, [pc, #24]	; (1d10 <timer_process_counted+0x60>)
    1cf6:	4798      	blx	r3
    1cf8:	7c23      	ldrb	r3, [r4, #16]
    1cfa:	2b01      	cmp	r3, #1
    1cfc:	d1ec      	bne.n	1cd8 <timer_process_counted+0x28>
    1cfe:	6066      	str	r6, [r4, #4]
    1d00:	4632      	mov	r2, r6
    1d02:	4621      	mov	r1, r4
    1d04:	4638      	mov	r0, r7
    1d06:	4b03      	ldr	r3, [pc, #12]	; (1d14 <timer_process_counted+0x64>)
    1d08:	4798      	blx	r3
    1d0a:	e7e5      	b.n	1cd8 <timer_process_counted+0x28>
    1d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d0e:	bf00      	nop
    1d10:	00001e91 	.word	0x00001e91
    1d14:	00001c61 	.word	0x00001c61

00001d18 <timer_init>:
    1d18:	b538      	push	{r3, r4, r5, lr}
    1d1a:	460d      	mov	r5, r1
    1d1c:	4604      	mov	r4, r0
    1d1e:	b180      	cbz	r0, 1d42 <timer_init+0x2a>
    1d20:	b169      	cbz	r1, 1d3e <timer_init+0x26>
    1d22:	2001      	movs	r0, #1
    1d24:	223b      	movs	r2, #59	; 0x3b
    1d26:	4908      	ldr	r1, [pc, #32]	; (1d48 <timer_init+0x30>)
    1d28:	4b08      	ldr	r3, [pc, #32]	; (1d4c <timer_init+0x34>)
    1d2a:	4798      	blx	r3
    1d2c:	4629      	mov	r1, r5
    1d2e:	4620      	mov	r0, r4
    1d30:	4b07      	ldr	r3, [pc, #28]	; (1d50 <timer_init+0x38>)
    1d32:	4798      	blx	r3
    1d34:	2000      	movs	r0, #0
    1d36:	6120      	str	r0, [r4, #16]
    1d38:	4b06      	ldr	r3, [pc, #24]	; (1d54 <timer_init+0x3c>)
    1d3a:	6023      	str	r3, [r4, #0]
    1d3c:	bd38      	pop	{r3, r4, r5, pc}
    1d3e:	2000      	movs	r0, #0
    1d40:	e7f0      	b.n	1d24 <timer_init+0xc>
    1d42:	2000      	movs	r0, #0
    1d44:	e7ee      	b.n	1d24 <timer_init+0xc>
    1d46:	bf00      	nop
    1d48:	00004274 	.word	0x00004274
    1d4c:	00001e41 	.word	0x00001e41
    1d50:	00002e01 	.word	0x00002e01
    1d54:	00001cb1 	.word	0x00001cb1

00001d58 <timer_start>:
    1d58:	b510      	push	{r4, lr}
    1d5a:	4604      	mov	r4, r0
    1d5c:	2253      	movs	r2, #83	; 0x53
    1d5e:	4909      	ldr	r1, [pc, #36]	; (1d84 <timer_start+0x2c>)
    1d60:	3000      	adds	r0, #0
    1d62:	bf18      	it	ne
    1d64:	2001      	movne	r0, #1
    1d66:	4b08      	ldr	r3, [pc, #32]	; (1d88 <timer_start+0x30>)
    1d68:	4798      	blx	r3
    1d6a:	4620      	mov	r0, r4
    1d6c:	4b07      	ldr	r3, [pc, #28]	; (1d8c <timer_start+0x34>)
    1d6e:	4798      	blx	r3
    1d70:	b920      	cbnz	r0, 1d7c <timer_start+0x24>
    1d72:	4620      	mov	r0, r4
    1d74:	4b06      	ldr	r3, [pc, #24]	; (1d90 <timer_start+0x38>)
    1d76:	4798      	blx	r3
    1d78:	2000      	movs	r0, #0
    1d7a:	bd10      	pop	{r4, pc}
    1d7c:	f06f 0010 	mvn.w	r0, #16
    1d80:	bd10      	pop	{r4, pc}
    1d82:	bf00      	nop
    1d84:	00004274 	.word	0x00004274
    1d88:	00001e41 	.word	0x00001e41
    1d8c:	00002fcd 	.word	0x00002fcd
    1d90:	00002fb9 	.word	0x00002fb9

00001d94 <timer_add_task>:
    1d94:	b570      	push	{r4, r5, r6, lr}
    1d96:	b082      	sub	sp, #8
    1d98:	460d      	mov	r5, r1
    1d9a:	4604      	mov	r4, r0
    1d9c:	b320      	cbz	r0, 1de8 <timer_add_task+0x54>
    1d9e:	b309      	cbz	r1, 1de4 <timer_add_task+0x50>
    1da0:	2001      	movs	r0, #1
    1da2:	227a      	movs	r2, #122	; 0x7a
    1da4:	491f      	ldr	r1, [pc, #124]	; (1e24 <timer_add_task+0x90>)
    1da6:	4b20      	ldr	r3, [pc, #128]	; (1e28 <timer_add_task+0x94>)
    1da8:	4798      	blx	r3
    1daa:	7e23      	ldrb	r3, [r4, #24]
    1dac:	f043 0301 	orr.w	r3, r3, #1
    1db0:	7623      	strb	r3, [r4, #24]
    1db2:	f104 0614 	add.w	r6, r4, #20
    1db6:	4629      	mov	r1, r5
    1db8:	4630      	mov	r0, r6
    1dba:	4b1c      	ldr	r3, [pc, #112]	; (1e2c <timer_add_task+0x98>)
    1dbc:	4798      	blx	r3
    1dbe:	b9a8      	cbnz	r0, 1dec <timer_add_task+0x58>
    1dc0:	6923      	ldr	r3, [r4, #16]
    1dc2:	606b      	str	r3, [r5, #4]
    1dc4:	6922      	ldr	r2, [r4, #16]
    1dc6:	4629      	mov	r1, r5
    1dc8:	4630      	mov	r0, r6
    1dca:	4b19      	ldr	r3, [pc, #100]	; (1e30 <timer_add_task+0x9c>)
    1dcc:	4798      	blx	r3
    1dce:	7e23      	ldrb	r3, [r4, #24]
    1dd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1dd4:	7623      	strb	r3, [r4, #24]
    1dd6:	7e23      	ldrb	r3, [r4, #24]
    1dd8:	f013 0f02 	tst.w	r3, #2
    1ddc:	d112      	bne.n	1e04 <timer_add_task+0x70>
    1dde:	2000      	movs	r0, #0
    1de0:	b002      	add	sp, #8
    1de2:	bd70      	pop	{r4, r5, r6, pc}
    1de4:	2000      	movs	r0, #0
    1de6:	e7dc      	b.n	1da2 <timer_add_task+0xe>
    1de8:	2000      	movs	r0, #0
    1dea:	e7da      	b.n	1da2 <timer_add_task+0xe>
    1dec:	7e23      	ldrb	r3, [r4, #24]
    1dee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1df2:	7623      	strb	r3, [r4, #24]
    1df4:	227f      	movs	r2, #127	; 0x7f
    1df6:	490b      	ldr	r1, [pc, #44]	; (1e24 <timer_add_task+0x90>)
    1df8:	2000      	movs	r0, #0
    1dfa:	4b0b      	ldr	r3, [pc, #44]	; (1e28 <timer_add_task+0x94>)
    1dfc:	4798      	blx	r3
    1dfe:	f06f 0011 	mvn.w	r0, #17
    1e02:	e7ed      	b.n	1de0 <timer_add_task+0x4c>
    1e04:	a801      	add	r0, sp, #4
    1e06:	4b0b      	ldr	r3, [pc, #44]	; (1e34 <timer_add_task+0xa0>)
    1e08:	4798      	blx	r3
    1e0a:	7e23      	ldrb	r3, [r4, #24]
    1e0c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1e10:	7623      	strb	r3, [r4, #24]
    1e12:	4620      	mov	r0, r4
    1e14:	4b08      	ldr	r3, [pc, #32]	; (1e38 <timer_add_task+0xa4>)
    1e16:	4798      	blx	r3
    1e18:	a801      	add	r0, sp, #4
    1e1a:	4b08      	ldr	r3, [pc, #32]	; (1e3c <timer_add_task+0xa8>)
    1e1c:	4798      	blx	r3
    1e1e:	2000      	movs	r0, #0
    1e20:	e7de      	b.n	1de0 <timer_add_task+0x4c>
    1e22:	bf00      	nop
    1e24:	00004274 	.word	0x00004274
    1e28:	00001e41 	.word	0x00001e41
    1e2c:	00001e47 	.word	0x00001e47
    1e30:	00001c61 	.word	0x00001c61
    1e34:	00001835 	.word	0x00001835
    1e38:	00002fe5 	.word	0x00002fe5
    1e3c:	00001843 	.word	0x00001843

00001e40 <assert>:
    1e40:	b900      	cbnz	r0, 1e44 <assert+0x4>
    1e42:	be00      	bkpt	0x0000
    1e44:	4770      	bx	lr

00001e46 <is_list_element>:
    1e46:	6803      	ldr	r3, [r0, #0]
    1e48:	b11b      	cbz	r3, 1e52 <is_list_element+0xc>
    1e4a:	428b      	cmp	r3, r1
    1e4c:	d003      	beq.n	1e56 <is_list_element+0x10>
    1e4e:	681b      	ldr	r3, [r3, #0]
    1e50:	e7fa      	b.n	1e48 <is_list_element+0x2>
    1e52:	2000      	movs	r0, #0
    1e54:	4770      	bx	lr
    1e56:	2001      	movs	r0, #1
    1e58:	4770      	bx	lr
	...

00001e5c <list_insert_as_head>:
    1e5c:	b538      	push	{r3, r4, r5, lr}
    1e5e:	4604      	mov	r4, r0
    1e60:	460d      	mov	r5, r1
    1e62:	4b06      	ldr	r3, [pc, #24]	; (1e7c <list_insert_as_head+0x20>)
    1e64:	4798      	blx	r3
    1e66:	f080 0001 	eor.w	r0, r0, #1
    1e6a:	2239      	movs	r2, #57	; 0x39
    1e6c:	4904      	ldr	r1, [pc, #16]	; (1e80 <list_insert_as_head+0x24>)
    1e6e:	b2c0      	uxtb	r0, r0
    1e70:	4b04      	ldr	r3, [pc, #16]	; (1e84 <list_insert_as_head+0x28>)
    1e72:	4798      	blx	r3
    1e74:	6823      	ldr	r3, [r4, #0]
    1e76:	602b      	str	r3, [r5, #0]
    1e78:	6025      	str	r5, [r4, #0]
    1e7a:	bd38      	pop	{r3, r4, r5, pc}
    1e7c:	00001e47 	.word	0x00001e47
    1e80:	0000428c 	.word	0x0000428c
    1e84:	00001e41 	.word	0x00001e41

00001e88 <list_insert_after>:
    1e88:	6803      	ldr	r3, [r0, #0]
    1e8a:	600b      	str	r3, [r1, #0]
    1e8c:	6001      	str	r1, [r0, #0]
    1e8e:	4770      	bx	lr

00001e90 <list_remove_head>:
    1e90:	6803      	ldr	r3, [r0, #0]
    1e92:	b11b      	cbz	r3, 1e9c <list_remove_head+0xc>
    1e94:	681a      	ldr	r2, [r3, #0]
    1e96:	6002      	str	r2, [r0, #0]
    1e98:	4618      	mov	r0, r3
    1e9a:	4770      	bx	lr
    1e9c:	2000      	movs	r0, #0
    1e9e:	4770      	bx	lr

00001ea0 <ringbuffer_init>:
    1ea0:	b570      	push	{r4, r5, r6, lr}
    1ea2:	460e      	mov	r6, r1
    1ea4:	4615      	mov	r5, r2
    1ea6:	4604      	mov	r4, r0
    1ea8:	b178      	cbz	r0, 1eca <ringbuffer_init+0x2a>
    1eaa:	b181      	cbz	r1, 1ece <ringbuffer_init+0x2e>
    1eac:	b98a      	cbnz	r2, 1ed2 <ringbuffer_init+0x32>
    1eae:	2000      	movs	r0, #0
    1eb0:	2228      	movs	r2, #40	; 0x28
    1eb2:	490a      	ldr	r1, [pc, #40]	; (1edc <ringbuffer_init+0x3c>)
    1eb4:	4b0a      	ldr	r3, [pc, #40]	; (1ee0 <ringbuffer_init+0x40>)
    1eb6:	4798      	blx	r3
    1eb8:	1e6b      	subs	r3, r5, #1
    1eba:	421d      	tst	r5, r3
    1ebc:	d10b      	bne.n	1ed6 <ringbuffer_init+0x36>
    1ebe:	6063      	str	r3, [r4, #4]
    1ec0:	2000      	movs	r0, #0
    1ec2:	60a0      	str	r0, [r4, #8]
    1ec4:	60e0      	str	r0, [r4, #12]
    1ec6:	6026      	str	r6, [r4, #0]
    1ec8:	bd70      	pop	{r4, r5, r6, pc}
    1eca:	2000      	movs	r0, #0
    1ecc:	e7f0      	b.n	1eb0 <ringbuffer_init+0x10>
    1ece:	2000      	movs	r0, #0
    1ed0:	e7ee      	b.n	1eb0 <ringbuffer_init+0x10>
    1ed2:	2001      	movs	r0, #1
    1ed4:	e7ec      	b.n	1eb0 <ringbuffer_init+0x10>
    1ed6:	f06f 000c 	mvn.w	r0, #12
    1eda:	bd70      	pop	{r4, r5, r6, pc}
    1edc:	000042ac 	.word	0x000042ac
    1ee0:	00001e41 	.word	0x00001e41

00001ee4 <ringbuffer_put>:
    1ee4:	b538      	push	{r3, r4, r5, lr}
    1ee6:	460d      	mov	r5, r1
    1ee8:	4604      	mov	r4, r0
    1eea:	2251      	movs	r2, #81	; 0x51
    1eec:	490b      	ldr	r1, [pc, #44]	; (1f1c <ringbuffer_put+0x38>)
    1eee:	3000      	adds	r0, #0
    1ef0:	bf18      	it	ne
    1ef2:	2001      	movne	r0, #1
    1ef4:	4b0a      	ldr	r3, [pc, #40]	; (1f20 <ringbuffer_put+0x3c>)
    1ef6:	4798      	blx	r3
    1ef8:	6822      	ldr	r2, [r4, #0]
    1efa:	68e3      	ldr	r3, [r4, #12]
    1efc:	6861      	ldr	r1, [r4, #4]
    1efe:	400b      	ands	r3, r1
    1f00:	54d5      	strb	r5, [r2, r3]
    1f02:	68e3      	ldr	r3, [r4, #12]
    1f04:	68a2      	ldr	r2, [r4, #8]
    1f06:	1a9a      	subs	r2, r3, r2
    1f08:	6861      	ldr	r1, [r4, #4]
    1f0a:	428a      	cmp	r2, r1
    1f0c:	d901      	bls.n	1f12 <ringbuffer_put+0x2e>
    1f0e:	1a59      	subs	r1, r3, r1
    1f10:	60a1      	str	r1, [r4, #8]
    1f12:	3301      	adds	r3, #1
    1f14:	60e3      	str	r3, [r4, #12]
    1f16:	2000      	movs	r0, #0
    1f18:	bd38      	pop	{r3, r4, r5, pc}
    1f1a:	bf00      	nop
    1f1c:	000042ac 	.word	0x000042ac
    1f20:	00001e41 	.word	0x00001e41

00001f24 <_adc_get_hardware_index>:
    1f24:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1f28:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1f2c:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1f30:	4770      	bx	lr
	...

00001f34 <_adc_get_irq_num>:
    1f34:	b508      	push	{r3, lr}
    1f36:	6940      	ldr	r0, [r0, #20]
    1f38:	4b03      	ldr	r3, [pc, #12]	; (1f48 <_adc_get_irq_num+0x14>)
    1f3a:	4798      	blx	r3
    1f3c:	0040      	lsls	r0, r0, #1
    1f3e:	b2c0      	uxtb	r0, r0
    1f40:	3076      	adds	r0, #118	; 0x76
    1f42:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1f46:	bd08      	pop	{r3, pc}
    1f48:	00001f25 	.word	0x00001f25

00001f4c <_adc_init_irq_param>:
    1f4c:	4b06      	ldr	r3, [pc, #24]	; (1f68 <_adc_init_irq_param+0x1c>)
    1f4e:	4298      	cmp	r0, r3
    1f50:	d003      	beq.n	1f5a <_adc_init_irq_param+0xe>
    1f52:	4b06      	ldr	r3, [pc, #24]	; (1f6c <_adc_init_irq_param+0x20>)
    1f54:	4298      	cmp	r0, r3
    1f56:	d003      	beq.n	1f60 <_adc_init_irq_param+0x14>
    1f58:	4770      	bx	lr
    1f5a:	4b05      	ldr	r3, [pc, #20]	; (1f70 <_adc_init_irq_param+0x24>)
    1f5c:	6019      	str	r1, [r3, #0]
    1f5e:	e7f8      	b.n	1f52 <_adc_init_irq_param+0x6>
    1f60:	4b03      	ldr	r3, [pc, #12]	; (1f70 <_adc_init_irq_param+0x24>)
    1f62:	6059      	str	r1, [r3, #4]
    1f64:	e7f8      	b.n	1f58 <_adc_init_irq_param+0xc>
    1f66:	bf00      	nop
    1f68:	43001c00 	.word	0x43001c00
    1f6c:	43002000 	.word	0x43002000
    1f70:	2000011c 	.word	0x2000011c

00001f74 <_adc_init>:
    1f74:	b410      	push	{r4}
    1f76:	4b60      	ldr	r3, [pc, #384]	; (20f8 <_adc_init+0x184>)
    1f78:	4298      	cmp	r0, r3
    1f7a:	f000 809c 	beq.w	20b6 <_adc_init+0x142>
    1f7e:	4b5f      	ldr	r3, [pc, #380]	; (20fc <_adc_init+0x188>)
    1f80:	4298      	cmp	r0, r3
    1f82:	f000 80a8 	beq.w	20d6 <_adc_init+0x162>
    1f86:	2200      	movs	r2, #0
    1f88:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1f8a:	f013 0f01 	tst.w	r3, #1
    1f8e:	d11b      	bne.n	1fc8 <_adc_init+0x54>
    1f90:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1f92:	f013 0f03 	tst.w	r3, #3
    1f96:	d1fb      	bne.n	1f90 <_adc_init+0x1c>
    1f98:	8803      	ldrh	r3, [r0, #0]
    1f9a:	f013 0f02 	tst.w	r3, #2
    1f9e:	d00d      	beq.n	1fbc <_adc_init+0x48>
    1fa0:	8803      	ldrh	r3, [r0, #0]
    1fa2:	b29b      	uxth	r3, r3
    1fa4:	f023 0302 	bic.w	r3, r3, #2
    1fa8:	b29b      	uxth	r3, r3
    1faa:	8003      	strh	r3, [r0, #0]
    1fac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fae:	f013 0f03 	tst.w	r3, #3
    1fb2:	d1fb      	bne.n	1fac <_adc_init+0x38>
    1fb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fb6:	f013 0f02 	tst.w	r3, #2
    1fba:	d1fb      	bne.n	1fb4 <_adc_init+0x40>
    1fbc:	2301      	movs	r3, #1
    1fbe:	8003      	strh	r3, [r0, #0]
    1fc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fc2:	f013 0f03 	tst.w	r3, #3
    1fc6:	d1fb      	bne.n	1fc0 <_adc_init+0x4c>
    1fc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fca:	f013 0f01 	tst.w	r3, #1
    1fce:	d1fb      	bne.n	1fc8 <_adc_init+0x54>
    1fd0:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    1fd4:	2316      	movs	r3, #22
    1fd6:	4a4a      	ldr	r2, [pc, #296]	; (2100 <_adc_init+0x18c>)
    1fd8:	fb03 2301 	mla	r3, r3, r1, r2
    1fdc:	889b      	ldrh	r3, [r3, #4]
    1fde:	80c3      	strh	r3, [r0, #6]
    1fe0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d1fa      	bne.n	1fe0 <_adc_init+0x6c>
    1fea:	2316      	movs	r3, #22
    1fec:	4a44      	ldr	r2, [pc, #272]	; (2100 <_adc_init+0x18c>)
    1fee:	fb03 2301 	mla	r3, r3, r1, r2
    1ff2:	799b      	ldrb	r3, [r3, #6]
    1ff4:	7203      	strb	r3, [r0, #8]
    1ff6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d1fa      	bne.n	1ff6 <_adc_init+0x82>
    2000:	2316      	movs	r3, #22
    2002:	4a3f      	ldr	r2, [pc, #252]	; (2100 <_adc_init+0x18c>)
    2004:	fb03 2301 	mla	r3, r3, r1, r2
    2008:	79da      	ldrb	r2, [r3, #7]
    200a:	7082      	strb	r2, [r0, #2]
    200c:	891b      	ldrh	r3, [r3, #8]
    200e:	8083      	strh	r3, [r0, #4]
    2010:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2012:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2016:	2b00      	cmp	r3, #0
    2018:	d1fa      	bne.n	2010 <_adc_init+0x9c>
    201a:	2316      	movs	r3, #22
    201c:	4a38      	ldr	r2, [pc, #224]	; (2100 <_adc_init+0x18c>)
    201e:	fb03 2301 	mla	r3, r3, r1, r2
    2022:	7a9b      	ldrb	r3, [r3, #10]
    2024:	7283      	strb	r3, [r0, #10]
    2026:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2028:	f3c3 030b 	ubfx	r3, r3, #0, #12
    202c:	2b00      	cmp	r3, #0
    202e:	d1fa      	bne.n	2026 <_adc_init+0xb2>
    2030:	2316      	movs	r3, #22
    2032:	4a33      	ldr	r2, [pc, #204]	; (2100 <_adc_init+0x18c>)
    2034:	fb03 2301 	mla	r3, r3, r1, r2
    2038:	7adb      	ldrb	r3, [r3, #11]
    203a:	72c3      	strb	r3, [r0, #11]
    203c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2042:	2b00      	cmp	r3, #0
    2044:	d1fa      	bne.n	203c <_adc_init+0xc8>
    2046:	2316      	movs	r3, #22
    2048:	4a2d      	ldr	r2, [pc, #180]	; (2100 <_adc_init+0x18c>)
    204a:	fb03 2301 	mla	r3, r3, r1, r2
    204e:	899b      	ldrh	r3, [r3, #12]
    2050:	8183      	strh	r3, [r0, #12]
    2052:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2054:	f013 0f80 	tst.w	r3, #128	; 0x80
    2058:	d1fb      	bne.n	2052 <_adc_init+0xde>
    205a:	2316      	movs	r3, #22
    205c:	4a28      	ldr	r2, [pc, #160]	; (2100 <_adc_init+0x18c>)
    205e:	fb03 2301 	mla	r3, r3, r1, r2
    2062:	89db      	ldrh	r3, [r3, #14]
    2064:	81c3      	strh	r3, [r0, #14]
    2066:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2068:	f413 7f80 	tst.w	r3, #256	; 0x100
    206c:	d1fb      	bne.n	2066 <_adc_init+0xf2>
    206e:	2316      	movs	r3, #22
    2070:	4a23      	ldr	r2, [pc, #140]	; (2100 <_adc_init+0x18c>)
    2072:	fb03 2301 	mla	r3, r3, r1, r2
    2076:	8a1b      	ldrh	r3, [r3, #16]
    2078:	8203      	strh	r3, [r0, #16]
    207a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    207c:	f413 7f00 	tst.w	r3, #512	; 0x200
    2080:	d1fb      	bne.n	207a <_adc_init+0x106>
    2082:	2316      	movs	r3, #22
    2084:	4a1e      	ldr	r2, [pc, #120]	; (2100 <_adc_init+0x18c>)
    2086:	fb03 2301 	mla	r3, r3, r1, r2
    208a:	8a5b      	ldrh	r3, [r3, #18]
    208c:	8243      	strh	r3, [r0, #18]
    208e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2090:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2094:	d1fb      	bne.n	208e <_adc_init+0x11a>
    2096:	2216      	movs	r2, #22
    2098:	4b19      	ldr	r3, [pc, #100]	; (2100 <_adc_init+0x18c>)
    209a:	fb02 3101 	mla	r1, r2, r1, r3
    209e:	7d0b      	ldrb	r3, [r1, #20]
    20a0:	70c3      	strb	r3, [r0, #3]
    20a2:	884b      	ldrh	r3, [r1, #2]
    20a4:	8003      	strh	r3, [r0, #0]
    20a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    20a8:	f013 0f03 	tst.w	r3, #3
    20ac:	d1fb      	bne.n	20a6 <_adc_init+0x132>
    20ae:	2000      	movs	r0, #0
    20b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    20b4:	4770      	bx	lr
    20b6:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    20ba:	681b      	ldr	r3, [r3, #0]
    20bc:	095a      	lsrs	r2, r3, #5
    20be:	0212      	lsls	r2, r2, #8
    20c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    20c4:	0a1c      	lsrs	r4, r3, #8
    20c6:	0124      	lsls	r4, r4, #4
    20c8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    20cc:	4322      	orrs	r2, r4
    20ce:	f3c3 0382 	ubfx	r3, r3, #2, #3
    20d2:	431a      	orrs	r2, r3
    20d4:	e758      	b.n	1f88 <_adc_init+0x14>
    20d6:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	0cda      	lsrs	r2, r3, #19
    20de:	0212      	lsls	r2, r2, #8
    20e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    20e4:	0d9c      	lsrs	r4, r3, #22
    20e6:	0124      	lsls	r4, r4, #4
    20e8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    20ec:	4322      	orrs	r2, r4
    20ee:	f3c3 4302 	ubfx	r3, r3, #16, #3
    20f2:	431a      	orrs	r2, r3
    20f4:	e748      	b.n	1f88 <_adc_init+0x14>
    20f6:	bf00      	nop
    20f8:	43001c00 	.word	0x43001c00
    20fc:	43002000 	.word	0x43002000
    2100:	000042d0 	.word	0x000042d0

00002104 <_adc_interrupt_handler>:
    2104:	b508      	push	{r3, lr}
    2106:	6942      	ldr	r2, [r0, #20]
    2108:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    210c:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
    2110:	400b      	ands	r3, r1
    2112:	f013 0f01 	tst.w	r3, #1
    2116:	d106      	bne.n	2126 <_adc_interrupt_handler+0x22>
    2118:	f013 0f02 	tst.w	r3, #2
    211c:	d10d      	bne.n	213a <_adc_interrupt_handler+0x36>
    211e:	f013 0f04 	tst.w	r3, #4
    2122:	d111      	bne.n	2148 <_adc_interrupt_handler+0x44>
    2124:	bd08      	pop	{r3, pc}
    2126:	2301      	movs	r3, #1
    2128:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    212c:	6883      	ldr	r3, [r0, #8]
    212e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
    2132:	b292      	uxth	r2, r2
    2134:	2100      	movs	r1, #0
    2136:	4798      	blx	r3
    2138:	bd08      	pop	{r3, pc}
    213a:	2302      	movs	r3, #2
    213c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    2140:	6843      	ldr	r3, [r0, #4]
    2142:	2100      	movs	r1, #0
    2144:	4798      	blx	r3
    2146:	bd08      	pop	{r3, pc}
    2148:	2304      	movs	r3, #4
    214a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    214e:	6803      	ldr	r3, [r0, #0]
    2150:	2100      	movs	r1, #0
    2152:	4798      	blx	r3
    2154:	e7e6      	b.n	2124 <_adc_interrupt_handler+0x20>
	...

00002158 <_adc_get_regs>:
    2158:	b508      	push	{r3, lr}
    215a:	4b0b      	ldr	r3, [pc, #44]	; (2188 <_adc_get_regs+0x30>)
    215c:	4798      	blx	r3
    215e:	2300      	movs	r3, #0
    2160:	2b01      	cmp	r3, #1
    2162:	d809      	bhi.n	2178 <_adc_get_regs+0x20>
    2164:	2216      	movs	r2, #22
    2166:	fb02 f203 	mul.w	r2, r2, r3
    216a:	4908      	ldr	r1, [pc, #32]	; (218c <_adc_get_regs+0x34>)
    216c:	5c8a      	ldrb	r2, [r1, r2]
    216e:	4290      	cmp	r0, r2
    2170:	d008      	beq.n	2184 <_adc_get_regs+0x2c>
    2172:	3301      	adds	r3, #1
    2174:	b2db      	uxtb	r3, r3
    2176:	e7f3      	b.n	2160 <_adc_get_regs+0x8>
    2178:	228c      	movs	r2, #140	; 0x8c
    217a:	4905      	ldr	r1, [pc, #20]	; (2190 <_adc_get_regs+0x38>)
    217c:	2000      	movs	r0, #0
    217e:	4b05      	ldr	r3, [pc, #20]	; (2194 <_adc_get_regs+0x3c>)
    2180:	4798      	blx	r3
    2182:	2300      	movs	r3, #0
    2184:	4618      	mov	r0, r3
    2186:	bd08      	pop	{r3, pc}
    2188:	00001f25 	.word	0x00001f25
    218c:	000042d0 	.word	0x000042d0
    2190:	000042fc 	.word	0x000042fc
    2194:	00001e41 	.word	0x00001e41

00002198 <_adc_async_init>:
    2198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    219c:	460d      	mov	r5, r1
    219e:	4604      	mov	r4, r0
    21a0:	22f1      	movs	r2, #241	; 0xf1
    21a2:	493b      	ldr	r1, [pc, #236]	; (2290 <_adc_async_init+0xf8>)
    21a4:	3000      	adds	r0, #0
    21a6:	bf18      	it	ne
    21a8:	2001      	movne	r0, #1
    21aa:	4b3a      	ldr	r3, [pc, #232]	; (2294 <_adc_async_init+0xfc>)
    21ac:	4798      	blx	r3
    21ae:	4628      	mov	r0, r5
    21b0:	4b39      	ldr	r3, [pc, #228]	; (2298 <_adc_async_init+0x100>)
    21b2:	4798      	blx	r3
    21b4:	4601      	mov	r1, r0
    21b6:	4628      	mov	r0, r5
    21b8:	4b38      	ldr	r3, [pc, #224]	; (229c <_adc_async_init+0x104>)
    21ba:	4798      	blx	r3
    21bc:	4606      	mov	r6, r0
    21be:	b110      	cbz	r0, 21c6 <_adc_async_init+0x2e>
    21c0:	4630      	mov	r0, r6
    21c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21c6:	6165      	str	r5, [r4, #20]
    21c8:	4621      	mov	r1, r4
    21ca:	4628      	mov	r0, r5
    21cc:	4b34      	ldr	r3, [pc, #208]	; (22a0 <_adc_async_init+0x108>)
    21ce:	4798      	blx	r3
    21d0:	4620      	mov	r0, r4
    21d2:	4f34      	ldr	r7, [pc, #208]	; (22a4 <_adc_async_init+0x10c>)
    21d4:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21d6:	0943      	lsrs	r3, r0, #5
    21d8:	f000 001f 	and.w	r0, r0, #31
    21dc:	2501      	movs	r5, #1
    21de:	fa05 f000 	lsl.w	r0, r5, r0
    21e2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 22a8 <_adc_async_init+0x110>
    21e6:	3320      	adds	r3, #32
    21e8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    21ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21f0:	f3bf 8f6f 	isb	sy
    21f4:	4620      	mov	r0, r4
    21f6:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21f8:	0943      	lsrs	r3, r0, #5
    21fa:	f000 001f 	and.w	r0, r0, #31
    21fe:	fa05 f000 	lsl.w	r0, r5, r0
    2202:	3360      	adds	r3, #96	; 0x60
    2204:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    2208:	4620      	mov	r0, r4
    220a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    220c:	0943      	lsrs	r3, r0, #5
    220e:	f000 001f 	and.w	r0, r0, #31
    2212:	4085      	lsls	r5, r0
    2214:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
    2218:	4620      	mov	r0, r4
    221a:	47b8      	blx	r7
    221c:	b280      	uxth	r0, r0
    221e:	3001      	adds	r0, #1
    2220:	b280      	uxth	r0, r0
    2222:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2224:	2b00      	cmp	r3, #0
    2226:	db0c      	blt.n	2242 <_adc_async_init+0xaa>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2228:	095b      	lsrs	r3, r3, #5
    222a:	f000 001f 	and.w	r0, r0, #31
    222e:	2201      	movs	r2, #1
    2230:	fa02 f000 	lsl.w	r0, r2, r0
    2234:	3320      	adds	r3, #32
    2236:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    223a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    223e:	f3bf 8f6f 	isb	sy
    2242:	4620      	mov	r0, r4
    2244:	4b17      	ldr	r3, [pc, #92]	; (22a4 <_adc_async_init+0x10c>)
    2246:	4798      	blx	r3
    2248:	b280      	uxth	r0, r0
    224a:	3001      	adds	r0, #1
    224c:	b280      	uxth	r0, r0
    224e:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2250:	2b00      	cmp	r3, #0
    2252:	db09      	blt.n	2268 <_adc_async_init+0xd0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2254:	095b      	lsrs	r3, r3, #5
    2256:	f000 001f 	and.w	r0, r0, #31
    225a:	2201      	movs	r2, #1
    225c:	fa02 f000 	lsl.w	r0, r2, r0
    2260:	3360      	adds	r3, #96	; 0x60
    2262:	4a11      	ldr	r2, [pc, #68]	; (22a8 <_adc_async_init+0x110>)
    2264:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2268:	4620      	mov	r0, r4
    226a:	4b0e      	ldr	r3, [pc, #56]	; (22a4 <_adc_async_init+0x10c>)
    226c:	4798      	blx	r3
    226e:	b280      	uxth	r0, r0
    2270:	3001      	adds	r0, #1
    2272:	b280      	uxth	r0, r0
    2274:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2276:	2b00      	cmp	r3, #0
    2278:	dba2      	blt.n	21c0 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    227a:	095b      	lsrs	r3, r3, #5
    227c:	f000 001f 	and.w	r0, r0, #31
    2280:	2201      	movs	r2, #1
    2282:	fa02 f000 	lsl.w	r0, r2, r0
    2286:	4a08      	ldr	r2, [pc, #32]	; (22a8 <_adc_async_init+0x110>)
    2288:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    228c:	e798      	b.n	21c0 <_adc_async_init+0x28>
    228e:	bf00      	nop
    2290:	000042fc 	.word	0x000042fc
    2294:	00001e41 	.word	0x00001e41
    2298:	00002159 	.word	0x00002159
    229c:	00001f75 	.word	0x00001f75
    22a0:	00001f4d 	.word	0x00001f4d
    22a4:	00001f35 	.word	0x00001f35
    22a8:	e000e100 	.word	0xe000e100

000022ac <_adc_async_get_data_size>:
    22ac:	6943      	ldr	r3, [r0, #20]
    22ae:	88db      	ldrh	r3, [r3, #6]
    22b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    22b4:	2b03      	cmp	r3, #3
    22b6:	d001      	beq.n	22bc <_adc_async_get_data_size+0x10>
    22b8:	2002      	movs	r0, #2
    22ba:	4770      	bx	lr
    22bc:	2001      	movs	r0, #1
    22be:	4770      	bx	lr

000022c0 <ADC0_0_Handler>:
    22c0:	b508      	push	{r3, lr}
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <ADC0_0_Handler+0xc>)
    22c4:	6818      	ldr	r0, [r3, #0]
    22c6:	4b02      	ldr	r3, [pc, #8]	; (22d0 <ADC0_0_Handler+0x10>)
    22c8:	4798      	blx	r3
    22ca:	bd08      	pop	{r3, pc}
    22cc:	2000011c 	.word	0x2000011c
    22d0:	00002105 	.word	0x00002105

000022d4 <ADC1_0_Handler>:
    22d4:	b508      	push	{r3, lr}
    22d6:	4b02      	ldr	r3, [pc, #8]	; (22e0 <ADC1_0_Handler+0xc>)
    22d8:	6858      	ldr	r0, [r3, #4]
    22da:	4b02      	ldr	r3, [pc, #8]	; (22e4 <ADC1_0_Handler+0x10>)
    22dc:	4798      	blx	r3
    22de:	bd08      	pop	{r3, pc}
    22e0:	2000011c 	.word	0x2000011c
    22e4:	00002105 	.word	0x00002105

000022e8 <_custom_logic_init>:
    22e8:	4a11      	ldr	r2, [pc, #68]	; (2330 <_custom_logic_init+0x48>)
    22ea:	2300      	movs	r3, #0
    22ec:	7013      	strb	r3, [r2, #0]
    22ee:	2101      	movs	r1, #1
    22f0:	7011      	strb	r1, [r2, #0]
    22f2:	e009      	b.n	2308 <_custom_logic_init+0x20>
    22f4:	4a0f      	ldr	r2, [pc, #60]	; (2334 <_custom_logic_init+0x4c>)
    22f6:	441a      	add	r2, r3
    22f8:	7c11      	ldrb	r1, [r2, #16]
    22fa:	f103 4284 	add.w	r2, r3, #1107296256	; 0x42000000
    22fe:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
    2302:	7111      	strb	r1, [r2, #4]
    2304:	3301      	adds	r3, #1
    2306:	b2db      	uxtb	r3, r3
    2308:	2b01      	cmp	r3, #1
    230a:	d9f3      	bls.n	22f4 <_custom_logic_init+0xc>
    230c:	2300      	movs	r3, #0
    230e:	e008      	b.n	2322 <_custom_logic_init+0x3a>
    2310:	4a08      	ldr	r2, [pc, #32]	; (2334 <_custom_logic_init+0x4c>)
    2312:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    2316:	1c99      	adds	r1, r3, #2
    2318:	4a05      	ldr	r2, [pc, #20]	; (2330 <_custom_logic_init+0x48>)
    231a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    231e:	3301      	adds	r3, #1
    2320:	b2db      	uxtb	r3, r3
    2322:	2b03      	cmp	r3, #3
    2324:	d9f4      	bls.n	2310 <_custom_logic_init+0x28>
    2326:	2000      	movs	r0, #0
    2328:	4b01      	ldr	r3, [pc, #4]	; (2330 <_custom_logic_init+0x48>)
    232a:	7018      	strb	r0, [r3, #0]
    232c:	4770      	bx	lr
    232e:	bf00      	nop
    2330:	42003800 	.word	0x42003800
    2334:	00004314 	.word	0x00004314

00002338 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2338:	0943      	lsrs	r3, r0, #5
    233a:	f000 001f 	and.w	r0, r0, #31
    233e:	2201      	movs	r2, #1
    2340:	fa02 f000 	lsl.w	r0, r2, r0
    2344:	3340      	adds	r3, #64	; 0x40
    2346:	4a02      	ldr	r2, [pc, #8]	; (2350 <_irq_set+0x18>)
    2348:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    234c:	4770      	bx	lr
    234e:	bf00      	nop
    2350:	e000e100 	.word	0xe000e100

00002354 <_get_cycles_for_us>:
    2354:	2364      	movs	r3, #100	; 0x64
    2356:	fb03 f000 	mul.w	r0, r3, r0
    235a:	3002      	adds	r0, #2
    235c:	4b02      	ldr	r3, [pc, #8]	; (2368 <_get_cycles_for_us+0x14>)
    235e:	fba3 3000 	umull	r3, r0, r3, r0
    2362:	0840      	lsrs	r0, r0, #1
    2364:	4770      	bx	lr
    2366:	bf00      	nop
    2368:	aaaaaaab 	.word	0xaaaaaaab

0000236c <_get_cycles_for_ms>:
    236c:	2364      	movs	r3, #100	; 0x64
    236e:	fb03 f300 	mul.w	r3, r3, r0
    2372:	3302      	adds	r3, #2
    2374:	4804      	ldr	r0, [pc, #16]	; (2388 <_get_cycles_for_ms+0x1c>)
    2376:	fba0 2303 	umull	r2, r3, r0, r3
    237a:	085b      	lsrs	r3, r3, #1
    237c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2380:	fb00 f003 	mul.w	r0, r0, r3
    2384:	4770      	bx	lr
    2386:	bf00      	nop
    2388:	aaaaaaab 	.word	0xaaaaaaab
    238c:	00000000 	.word	0x00000000

00002390 <_delay_cycles>:
    2390:	3901      	subs	r1, #1
    2392:	d8fd      	bhi.n	2390 <_delay_cycles>
    2394:	4770      	bx	lr
    2396:	bf00      	nop

00002398 <_init_chip>:
    2398:	b510      	push	{r4, lr}
    239a:	4a0e      	ldr	r2, [pc, #56]	; (23d4 <_init_chip+0x3c>)
    239c:	8813      	ldrh	r3, [r2, #0]
    239e:	b29b      	uxth	r3, r3
    23a0:	8013      	strh	r3, [r2, #0]
    23a2:	4b0d      	ldr	r3, [pc, #52]	; (23d8 <_init_chip+0x40>)
    23a4:	4798      	blx	r3
    23a6:	4b0d      	ldr	r3, [pc, #52]	; (23dc <_init_chip+0x44>)
    23a8:	4798      	blx	r3
    23aa:	4b0d      	ldr	r3, [pc, #52]	; (23e0 <_init_chip+0x48>)
    23ac:	4798      	blx	r3
    23ae:	2012      	movs	r0, #18
    23b0:	4c0c      	ldr	r4, [pc, #48]	; (23e4 <_init_chip+0x4c>)
    23b2:	47a0      	blx	r4
    23b4:	4b0c      	ldr	r3, [pc, #48]	; (23e8 <_init_chip+0x50>)
    23b6:	4798      	blx	r3
    23b8:	f640 70ed 	movw	r0, #4077	; 0xfed
    23bc:	47a0      	blx	r4
    23be:	4b0b      	ldr	r3, [pc, #44]	; (23ec <_init_chip+0x54>)
    23c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23c2:	f042 0287 	orr.w	r2, r2, #135	; 0x87
    23c6:	62da      	str	r2, [r3, #44]	; 0x2c
    23c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    23cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    23d0:	bd10      	pop	{r4, pc}
    23d2:	bf00      	nop
    23d4:	41004000 	.word	0x41004000
    23d8:	000024d9 	.word	0x000024d9
    23dc:	000024ed 	.word	0x000024ed
    23e0:	000024cd 	.word	0x000024cd
    23e4:	00002455 	.word	0x00002455
    23e8:	000024f1 	.word	0x000024f1
    23ec:	41008000 	.word	0x41008000

000023f0 <_event_system_init>:
    23f0:	2300      	movs	r3, #0
    23f2:	e008      	b.n	2406 <_event_system_init+0x16>
    23f4:	4a15      	ldr	r2, [pc, #84]	; (244c <_event_system_init+0x5c>)
    23f6:	5cd0      	ldrb	r0, [r2, r3]
    23f8:	f103 0148 	add.w	r1, r3, #72	; 0x48
    23fc:	4a14      	ldr	r2, [pc, #80]	; (2450 <_event_system_init+0x60>)
    23fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    2402:	3301      	adds	r3, #1
    2404:	b2db      	uxtb	r3, r3
    2406:	2b42      	cmp	r3, #66	; 0x42
    2408:	d9f4      	bls.n	23f4 <_event_system_init+0x4>
    240a:	2300      	movs	r3, #0
    240c:	2b1f      	cmp	r3, #31
    240e:	d81b      	bhi.n	2448 <_event_system_init+0x58>
    2410:	b410      	push	{r4}
    2412:	4a0e      	ldr	r2, [pc, #56]	; (244c <_event_system_init+0x5c>)
    2414:	eb02 0143 	add.w	r1, r2, r3, lsl #1
    2418:	f8b1 4044 	ldrh.w	r4, [r1, #68]	; 0x44
    241c:	490c      	ldr	r1, [pc, #48]	; (2450 <_event_system_init+0x60>)
    241e:	1d18      	adds	r0, r3, #4
    2420:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
    2424:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2428:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
    242c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2430:	714a      	strb	r2, [r1, #5]
    2432:	43d2      	mvns	r2, r2
    2434:	b2d2      	uxtb	r2, r2
    2436:	710a      	strb	r2, [r1, #4]
    2438:	3301      	adds	r3, #1
    243a:	b2db      	uxtb	r3, r3
    243c:	2b1f      	cmp	r3, #31
    243e:	d9e8      	bls.n	2412 <_event_system_init+0x22>
    2440:	2000      	movs	r0, #0
    2442:	f85d 4b04 	ldr.w	r4, [sp], #4
    2446:	4770      	bx	lr
    2448:	2000      	movs	r0, #0
    244a:	4770      	bx	lr
    244c:	00004328 	.word	0x00004328
    2450:	4100e000 	.word	0x4100e000

00002454 <_gclk_init_generators_by_fref>:
    2454:	f010 0f01 	tst.w	r0, #1
    2458:	d008      	beq.n	246c <_gclk_init_generators_by_fref+0x18>
    245a:	4a17      	ldr	r2, [pc, #92]	; (24b8 <_gclk_init_generators_by_fref+0x64>)
    245c:	4b17      	ldr	r3, [pc, #92]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    245e:	621a      	str	r2, [r3, #32]
    2460:	4b16      	ldr	r3, [pc, #88]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    2462:	685a      	ldr	r2, [r3, #4]
    2464:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2468:	421a      	tst	r2, r3
    246a:	d1f9      	bne.n	2460 <_gclk_init_generators_by_fref+0xc>
    246c:	f010 0f02 	tst.w	r0, #2
    2470:	d008      	beq.n	2484 <_gclk_init_generators_by_fref+0x30>
    2472:	4a13      	ldr	r2, [pc, #76]	; (24c0 <_gclk_init_generators_by_fref+0x6c>)
    2474:	4b11      	ldr	r3, [pc, #68]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    2476:	625a      	str	r2, [r3, #36]	; 0x24
    2478:	4b10      	ldr	r3, [pc, #64]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    247a:	685a      	ldr	r2, [r3, #4]
    247c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2480:	421a      	tst	r2, r3
    2482:	d1f9      	bne.n	2478 <_gclk_init_generators_by_fref+0x24>
    2484:	f010 0f04 	tst.w	r0, #4
    2488:	d008      	beq.n	249c <_gclk_init_generators_by_fref+0x48>
    248a:	4a0e      	ldr	r2, [pc, #56]	; (24c4 <_gclk_init_generators_by_fref+0x70>)
    248c:	4b0b      	ldr	r3, [pc, #44]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    248e:	629a      	str	r2, [r3, #40]	; 0x28
    2490:	4b0a      	ldr	r3, [pc, #40]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    2492:	685a      	ldr	r2, [r3, #4]
    2494:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2498:	421a      	tst	r2, r3
    249a:	d1f9      	bne.n	2490 <_gclk_init_generators_by_fref+0x3c>
    249c:	f010 0f10 	tst.w	r0, #16
    24a0:	d008      	beq.n	24b4 <_gclk_init_generators_by_fref+0x60>
    24a2:	4a09      	ldr	r2, [pc, #36]	; (24c8 <_gclk_init_generators_by_fref+0x74>)
    24a4:	4b05      	ldr	r3, [pc, #20]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    24a6:	631a      	str	r2, [r3, #48]	; 0x30
    24a8:	4b04      	ldr	r3, [pc, #16]	; (24bc <_gclk_init_generators_by_fref+0x68>)
    24aa:	685a      	ldr	r2, [r3, #4]
    24ac:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    24b0:	421a      	tst	r2, r3
    24b2:	d1f9      	bne.n	24a8 <_gclk_init_generators_by_fref+0x54>
    24b4:	4770      	bx	lr
    24b6:	bf00      	nop
    24b8:	00010108 	.word	0x00010108
    24bc:	40001c00 	.word	0x40001c00
    24c0:	00010104 	.word	0x00010104
    24c4:	00180106 	.word	0x00180106
    24c8:	000f0106 	.word	0x000f0106

000024cc <_mclk_init>:
    24cc:	2201      	movs	r2, #1
    24ce:	4b01      	ldr	r3, [pc, #4]	; (24d4 <_mclk_init+0x8>)
    24d0:	715a      	strb	r2, [r3, #5]
    24d2:	4770      	bx	lr
    24d4:	40000800 	.word	0x40000800

000024d8 <_osc32kctrl_init_sources>:
    24d8:	4b03      	ldr	r3, [pc, #12]	; (24e8 <_osc32kctrl_init_sources+0x10>)
    24da:	69da      	ldr	r2, [r3, #28]
    24dc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    24e0:	61da      	str	r2, [r3, #28]
    24e2:	2201      	movs	r2, #1
    24e4:	741a      	strb	r2, [r3, #16]
    24e6:	4770      	bx	lr
    24e8:	40001400 	.word	0x40001400

000024ec <_oscctrl_init_sources>:
    24ec:	4770      	bx	lr
	...

000024f0 <_oscctrl_init_referenced_generators>:
    24f0:	4a47      	ldr	r2, [pc, #284]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    24f2:	6a13      	ldr	r3, [r2, #32]
    24f4:	f023 030f 	bic.w	r3, r3, #15
    24f8:	f043 0304 	orr.w	r3, r3, #4
    24fc:	6213      	str	r3, [r2, #32]
    24fe:	4b44      	ldr	r3, [pc, #272]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    2500:	685a      	ldr	r2, [r3, #4]
    2502:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2506:	421a      	tst	r2, r3
    2508:	d1f9      	bne.n	24fe <_oscctrl_init_referenced_generators+0xe>
    250a:	4b41      	ldr	r3, [pc, #260]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    250c:	685b      	ldr	r3, [r3, #4]
    250e:	f013 0f04 	tst.w	r3, #4
    2512:	d1fa      	bne.n	250a <_oscctrl_init_referenced_generators+0x1a>
    2514:	4b3f      	ldr	r3, [pc, #252]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2516:	2200      	movs	r2, #0
    2518:	771a      	strb	r2, [r3, #28]
    251a:	4a3f      	ldr	r2, [pc, #252]	; (2618 <_oscctrl_init_referenced_generators+0x128>)
    251c:	629a      	str	r2, [r3, #40]	; 0x28
    251e:	4b3d      	ldr	r3, [pc, #244]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2520:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    2524:	f013 0f10 	tst.w	r3, #16
    2528:	d1f9      	bne.n	251e <_oscctrl_init_referenced_generators+0x2e>
    252a:	2200      	movs	r2, #0
    252c:	4b39      	ldr	r3, [pc, #228]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    252e:	f883 2020 	strb.w	r2, [r3, #32]
    2532:	4b38      	ldr	r3, [pc, #224]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2534:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    2538:	f013 0f04 	tst.w	r3, #4
    253c:	d1f9      	bne.n	2532 <_oscctrl_init_referenced_generators+0x42>
    253e:	2202      	movs	r2, #2
    2540:	4b34      	ldr	r3, [pc, #208]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2542:	771a      	strb	r2, [r3, #28]
    2544:	4b33      	ldr	r3, [pc, #204]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    254a:	f013 0f02 	tst.w	r3, #2
    254e:	d1f9      	bne.n	2544 <_oscctrl_init_referenced_generators+0x54>
    2550:	4b30      	ldr	r3, [pc, #192]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2554:	625a      	str	r2, [r3, #36]	; 0x24
    2556:	4b2f      	ldr	r3, [pc, #188]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2558:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    255c:	f013 0f08 	tst.w	r3, #8
    2560:	d1f9      	bne.n	2556 <_oscctrl_init_referenced_generators+0x66>
    2562:	2280      	movs	r2, #128	; 0x80
    2564:	4b2b      	ldr	r3, [pc, #172]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2566:	f883 2020 	strb.w	r2, [r3, #32]
    256a:	4b2a      	ldr	r3, [pc, #168]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    256c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    2570:	f013 0f04 	tst.w	r3, #4
    2574:	d1f9      	bne.n	256a <_oscctrl_init_referenced_generators+0x7a>
    2576:	2244      	movs	r2, #68	; 0x44
    2578:	4b25      	ldr	r3, [pc, #148]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    257a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    257e:	4a27      	ldr	r2, [pc, #156]	; (261c <_oscctrl_init_referenced_generators+0x12c>)
    2580:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    2584:	649a      	str	r2, [r3, #72]	; 0x48
    2586:	4b23      	ldr	r3, [pc, #140]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    258a:	f013 0f06 	tst.w	r3, #6
    258e:	d1fa      	bne.n	2586 <_oscctrl_init_referenced_generators+0x96>
    2590:	4b20      	ldr	r3, [pc, #128]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2592:	2200      	movs	r2, #0
    2594:	64da      	str	r2, [r3, #76]	; 0x4c
    2596:	2202      	movs	r2, #2
    2598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    259c:	4b1d      	ldr	r3, [pc, #116]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    259e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    25a0:	f013 0f02 	tst.w	r3, #2
    25a4:	d1fa      	bne.n	259c <_oscctrl_init_referenced_generators+0xac>
    25a6:	4b1b      	ldr	r3, [pc, #108]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    25a8:	f893 3020 	ldrb.w	r3, [r3, #32]
    25ac:	f013 0f01 	tst.w	r3, #1
    25b0:	d027      	beq.n	2602 <_oscctrl_init_referenced_generators+0x112>
    25b2:	4b18      	ldr	r3, [pc, #96]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    25b4:	691b      	ldr	r3, [r3, #16]
    25b6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
    25ba:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    25be:	d1f8      	bne.n	25b2 <_oscctrl_init_referenced_generators+0xc2>
    25c0:	4b14      	ldr	r3, [pc, #80]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    25c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    25c4:	f013 0f01 	tst.w	r3, #1
    25c8:	d104      	bne.n	25d4 <_oscctrl_init_referenced_generators+0xe4>
    25ca:	4b12      	ldr	r3, [pc, #72]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    25cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    25ce:	f013 0f02 	tst.w	r3, #2
    25d2:	d0f5      	beq.n	25c0 <_oscctrl_init_referenced_generators+0xd0>
    25d4:	4b0e      	ldr	r3, [pc, #56]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    25d6:	685b      	ldr	r3, [r3, #4]
    25d8:	2b00      	cmp	r3, #0
    25da:	d1fb      	bne.n	25d4 <_oscctrl_init_referenced_generators+0xe4>
    25dc:	4a0c      	ldr	r2, [pc, #48]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    25de:	6a13      	ldr	r3, [r2, #32]
    25e0:	f023 030f 	bic.w	r3, r3, #15
    25e4:	f043 0308 	orr.w	r3, r3, #8
    25e8:	6213      	str	r3, [r2, #32]
    25ea:	4b09      	ldr	r3, [pc, #36]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    25ec:	685a      	ldr	r2, [r3, #4]
    25ee:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    25f2:	421a      	tst	r2, r3
    25f4:	d1f9      	bne.n	25ea <_oscctrl_init_referenced_generators+0xfa>
    25f6:	4b06      	ldr	r3, [pc, #24]	; (2610 <_oscctrl_init_referenced_generators+0x120>)
    25f8:	685b      	ldr	r3, [r3, #4]
    25fa:	f013 0f04 	tst.w	r3, #4
    25fe:	d1fa      	bne.n	25f6 <_oscctrl_init_referenced_generators+0x106>
    2600:	4770      	bx	lr
    2602:	4b04      	ldr	r3, [pc, #16]	; (2614 <_oscctrl_init_referenced_generators+0x124>)
    2604:	691b      	ldr	r3, [r3, #16]
    2606:	f413 7f80 	tst.w	r3, #256	; 0x100
    260a:	d0fa      	beq.n	2602 <_oscctrl_init_referenced_generators+0x112>
    260c:	e7d8      	b.n	25c0 <_oscctrl_init_referenced_generators+0xd0>
    260e:	bf00      	nop
    2610:	40001c00 	.word	0x40001c00
    2614:	40001000 	.word	0x40001000
    2618:	04010000 	.word	0x04010000
    261c:	0008001e 	.word	0x0008001e

00002620 <_qspi_memcpy>:
    2620:	e004      	b.n	262c <_qspi_memcpy+0xc>
    2622:	780a      	ldrb	r2, [r1, #0]
    2624:	7002      	strb	r2, [r0, #0]
    2626:	461a      	mov	r2, r3
    2628:	3101      	adds	r1, #1
    262a:	3001      	adds	r0, #1
    262c:	1e53      	subs	r3, r2, #1
    262e:	2a00      	cmp	r2, #0
    2630:	d1f7      	bne.n	2622 <_qspi_memcpy+0x2>
    2632:	4770      	bx	lr

00002634 <_qspi_sync_command_set_ifr>:
    2634:	6803      	ldr	r3, [r0, #0]
    2636:	780a      	ldrb	r2, [r1, #0]
    2638:	f012 0f20 	tst.w	r2, #32
    263c:	d001      	beq.n	2642 <_qspi_sync_command_set_ifr+0xe>
    263e:	688a      	ldr	r2, [r1, #8]
    2640:	631a      	str	r2, [r3, #48]	; 0x30
    2642:	780a      	ldrb	r2, [r1, #0]
    2644:	f012 0f10 	tst.w	r2, #16
    2648:	d005      	beq.n	2656 <_qspi_sync_command_set_ifr+0x22>
    264a:	790a      	ldrb	r2, [r1, #4]
    264c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    264e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
    2652:	4302      	orrs	r2, r0
    2654:	635a      	str	r2, [r3, #52]	; 0x34
    2656:	780a      	ldrb	r2, [r1, #0]
    2658:	f012 0f40 	tst.w	r2, #64	; 0x40
    265c:	d006      	beq.n	266c <_qspi_sync_command_set_ifr+0x38>
    265e:	7948      	ldrb	r0, [r1, #5]
    2660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2662:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
    2666:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    266a:	635a      	str	r2, [r3, #52]	; 0x34
    266c:	680a      	ldr	r2, [r1, #0]
    266e:	639a      	str	r2, [r3, #56]	; 0x38
    2670:	4770      	bx	lr
	...

00002674 <_qspi_sync_run_transfer>:
    2674:	b538      	push	{r3, r4, r5, lr}
    2676:	460c      	mov	r4, r1
    2678:	6803      	ldr	r3, [r0, #0]
    267a:	780a      	ldrb	r2, [r1, #0]
    267c:	f012 0f20 	tst.w	r2, #32
    2680:	d015      	beq.n	26ae <_qspi_sync_run_transfer+0x3a>
    2682:	688d      	ldr	r5, [r1, #8]
    2684:	f105 6580 	add.w	r5, r5, #67108864	; 0x4000000
    2688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    268a:	6923      	ldr	r3, [r4, #16]
    268c:	b193      	cbz	r3, 26b4 <_qspi_sync_run_transfer+0x40>
    268e:	2001      	movs	r0, #1
    2690:	2282      	movs	r2, #130	; 0x82
    2692:	490e      	ldr	r1, [pc, #56]	; (26cc <_qspi_sync_run_transfer+0x58>)
    2694:	4b0e      	ldr	r3, [pc, #56]	; (26d0 <_qspi_sync_run_transfer+0x5c>)
    2696:	4798      	blx	r3
    2698:	6921      	ldr	r1, [r4, #16]
    269a:	b189      	cbz	r1, 26c0 <_qspi_sync_run_transfer+0x4c>
    269c:	68e2      	ldr	r2, [r4, #12]
    269e:	4628      	mov	r0, r5
    26a0:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <_qspi_sync_run_transfer+0x60>)
    26a2:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    26a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26a8:	f3bf 8f6f 	isb	sy
    26ac:	bd38      	pop	{r3, r4, r5, pc}
    26ae:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    26b2:	e7e9      	b.n	2688 <_qspi_sync_run_transfer+0x14>
    26b4:	6963      	ldr	r3, [r4, #20]
    26b6:	b10b      	cbz	r3, 26bc <_qspi_sync_run_transfer+0x48>
    26b8:	2001      	movs	r0, #1
    26ba:	e7e9      	b.n	2690 <_qspi_sync_run_transfer+0x1c>
    26bc:	2000      	movs	r0, #0
    26be:	e7e7      	b.n	2690 <_qspi_sync_run_transfer+0x1c>
    26c0:	68e2      	ldr	r2, [r4, #12]
    26c2:	4629      	mov	r1, r5
    26c4:	6960      	ldr	r0, [r4, #20]
    26c6:	4b03      	ldr	r3, [pc, #12]	; (26d4 <_qspi_sync_run_transfer+0x60>)
    26c8:	4798      	blx	r3
    26ca:	e7eb      	b.n	26a4 <_qspi_sync_run_transfer+0x30>
    26cc:	0000442c 	.word	0x0000442c
    26d0:	00001e41 	.word	0x00001e41
    26d4:	00002621 	.word	0x00002621

000026d8 <_qspi_sync_init>:
    26d8:	b538      	push	{r3, r4, r5, lr}
    26da:	460c      	mov	r4, r1
    26dc:	4605      	mov	r5, r0
    26de:	b188      	cbz	r0, 2704 <_qspi_sync_init+0x2c>
    26e0:	b171      	cbz	r1, 2700 <_qspi_sync_init+0x28>
    26e2:	2001      	movs	r0, #1
    26e4:	2240      	movs	r2, #64	; 0x40
    26e6:	4908      	ldr	r1, [pc, #32]	; (2708 <_qspi_sync_init+0x30>)
    26e8:	4b08      	ldr	r3, [pc, #32]	; (270c <_qspi_sync_init+0x34>)
    26ea:	4798      	blx	r3
    26ec:	602c      	str	r4, [r5, #0]
    26ee:	2301      	movs	r3, #1
    26f0:	6023      	str	r3, [r4, #0]
    26f2:	2311      	movs	r3, #17
    26f4:	6063      	str	r3, [r4, #4]
    26f6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    26fa:	60a3      	str	r3, [r4, #8]
    26fc:	2000      	movs	r0, #0
    26fe:	bd38      	pop	{r3, r4, r5, pc}
    2700:	2000      	movs	r0, #0
    2702:	e7ef      	b.n	26e4 <_qspi_sync_init+0xc>
    2704:	2000      	movs	r0, #0
    2706:	e7ed      	b.n	26e4 <_qspi_sync_init+0xc>
    2708:	0000442c 	.word	0x0000442c
    270c:	00001e41 	.word	0x00001e41

00002710 <_qspi_sync_enable>:
    2710:	6803      	ldr	r3, [r0, #0]
    2712:	2202      	movs	r2, #2
    2714:	601a      	str	r2, [r3, #0]
    2716:	2000      	movs	r0, #0
    2718:	4770      	bx	lr
	...

0000271c <_qspi_sync_serial_run_command>:
    271c:	b538      	push	{r3, r4, r5, lr}
    271e:	4604      	mov	r4, r0
    2720:	460d      	mov	r5, r1
    2722:	4b0c      	ldr	r3, [pc, #48]	; (2754 <_qspi_sync_serial_run_command+0x38>)
    2724:	4798      	blx	r3
    2726:	f995 3000 	ldrsb.w	r3, [r5]
    272a:	2b00      	cmp	r3, #0
    272c:	db0c      	blt.n	2748 <_qspi_sync_serial_run_command+0x2c>
    272e:	6823      	ldr	r3, [r4, #0]
    2730:	4a09      	ldr	r2, [pc, #36]	; (2758 <_qspi_sync_serial_run_command+0x3c>)
    2732:	601a      	str	r2, [r3, #0]
    2734:	6823      	ldr	r3, [r4, #0]
    2736:	69da      	ldr	r2, [r3, #28]
    2738:	f412 6f80 	tst.w	r2, #1024	; 0x400
    273c:	d0fa      	beq.n	2734 <_qspi_sync_serial_run_command+0x18>
    273e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2742:	61da      	str	r2, [r3, #28]
    2744:	2000      	movs	r0, #0
    2746:	bd38      	pop	{r3, r4, r5, pc}
    2748:	4629      	mov	r1, r5
    274a:	4620      	mov	r0, r4
    274c:	4b03      	ldr	r3, [pc, #12]	; (275c <_qspi_sync_serial_run_command+0x40>)
    274e:	4798      	blx	r3
    2750:	e7ed      	b.n	272e <_qspi_sync_serial_run_command+0x12>
    2752:	bf00      	nop
    2754:	00002635 	.word	0x00002635
    2758:	01000002 	.word	0x01000002
    275c:	00002675 	.word	0x00002675

00002760 <RAMECC_Handler>:
    2760:	b500      	push	{lr}
    2762:	b083      	sub	sp, #12
    2764:	4b0d      	ldr	r3, [pc, #52]	; (279c <RAMECC_Handler+0x3c>)
    2766:	789b      	ldrb	r3, [r3, #2]
    2768:	b2db      	uxtb	r3, r3
    276a:	9301      	str	r3, [sp, #4]
    276c:	9b01      	ldr	r3, [sp, #4]
    276e:	f013 0f02 	tst.w	r3, #2
    2772:	d006      	beq.n	2782 <RAMECC_Handler+0x22>
    2774:	4b0a      	ldr	r3, [pc, #40]	; (27a0 <RAMECC_Handler+0x40>)
    2776:	681b      	ldr	r3, [r3, #0]
    2778:	b11b      	cbz	r3, 2782 <RAMECC_Handler+0x22>
    277a:	4a08      	ldr	r2, [pc, #32]	; (279c <RAMECC_Handler+0x3c>)
    277c:	6850      	ldr	r0, [r2, #4]
    277e:	4798      	blx	r3
    2780:	e009      	b.n	2796 <RAMECC_Handler+0x36>
    2782:	9b01      	ldr	r3, [sp, #4]
    2784:	f013 0f01 	tst.w	r3, #1
    2788:	d005      	beq.n	2796 <RAMECC_Handler+0x36>
    278a:	4b05      	ldr	r3, [pc, #20]	; (27a0 <RAMECC_Handler+0x40>)
    278c:	685b      	ldr	r3, [r3, #4]
    278e:	b113      	cbz	r3, 2796 <RAMECC_Handler+0x36>
    2790:	4a02      	ldr	r2, [pc, #8]	; (279c <RAMECC_Handler+0x3c>)
    2792:	6850      	ldr	r0, [r2, #4]
    2794:	4798      	blx	r3
    2796:	b003      	add	sp, #12
    2798:	f85d fb04 	ldr.w	pc, [sp], #4
    279c:	41020000 	.word	0x41020000
    27a0:	2000049c 	.word	0x2000049c

000027a4 <_sercom_get_hardware_index>:
    27a4:	b470      	push	{r4, r5, r6}
    27a6:	b087      	sub	sp, #28
    27a8:	4606      	mov	r6, r0
    27aa:	466c      	mov	r4, sp
    27ac:	4d0c      	ldr	r5, [pc, #48]	; (27e0 <_sercom_get_hardware_index+0x3c>)
    27ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    27b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    27b2:	e895 0003 	ldmia.w	r5, {r0, r1}
    27b6:	e884 0003 	stmia.w	r4, {r0, r1}
    27ba:	2000      	movs	r0, #0
    27bc:	2805      	cmp	r0, #5
    27be:	d80a      	bhi.n	27d6 <_sercom_get_hardware_index+0x32>
    27c0:	ab06      	add	r3, sp, #24
    27c2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    27c6:	f853 3c18 	ldr.w	r3, [r3, #-24]
    27ca:	42b3      	cmp	r3, r6
    27cc:	d001      	beq.n	27d2 <_sercom_get_hardware_index+0x2e>
    27ce:	3001      	adds	r0, #1
    27d0:	e7f4      	b.n	27bc <_sercom_get_hardware_index+0x18>
    27d2:	b2c0      	uxtb	r0, r0
    27d4:	e000      	b.n	27d8 <_sercom_get_hardware_index+0x34>
    27d6:	2000      	movs	r0, #0
    27d8:	b007      	add	sp, #28
    27da:	bc70      	pop	{r4, r5, r6}
    27dc:	4770      	bx	lr
    27de:	bf00      	nop
    27e0:	00004444 	.word	0x00004444

000027e4 <_sercom_init_irq_param>:
    27e4:	4b03      	ldr	r3, [pc, #12]	; (27f4 <_sercom_init_irq_param+0x10>)
    27e6:	4298      	cmp	r0, r3
    27e8:	d000      	beq.n	27ec <_sercom_init_irq_param+0x8>
    27ea:	4770      	bx	lr
    27ec:	4b02      	ldr	r3, [pc, #8]	; (27f8 <_sercom_init_irq_param+0x14>)
    27ee:	6019      	str	r1, [r3, #0]
    27f0:	e7fb      	b.n	27ea <_sercom_init_irq_param+0x6>
    27f2:	bf00      	nop
    27f4:	43000400 	.word	0x43000400
    27f8:	20000124 	.word	0x20000124

000027fc <_sercom_get_irq_num>:
    27fc:	b508      	push	{r3, lr}
    27fe:	4b04      	ldr	r3, [pc, #16]	; (2810 <_sercom_get_irq_num+0x14>)
    2800:	4798      	blx	r3
    2802:	0080      	lsls	r0, r0, #2
    2804:	b2c0      	uxtb	r0, r0
    2806:	302e      	adds	r0, #46	; 0x2e
    2808:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    280c:	bd08      	pop	{r3, pc}
    280e:	bf00      	nop
    2810:	000027a5 	.word	0x000027a5

00002814 <_spi_sync_enable>:
    2814:	69c3      	ldr	r3, [r0, #28]
    2816:	f013 0f01 	tst.w	r3, #1
    281a:	d109      	bne.n	2830 <_spi_sync_enable+0x1c>
    281c:	6803      	ldr	r3, [r0, #0]
    281e:	f043 0302 	orr.w	r3, r3, #2
    2822:	6003      	str	r3, [r0, #0]
    2824:	69c3      	ldr	r3, [r0, #28]
    2826:	f013 0f03 	tst.w	r3, #3
    282a:	d1fb      	bne.n	2824 <_spi_sync_enable+0x10>
    282c:	2000      	movs	r0, #0
    282e:	4770      	bx	lr
    2830:	f06f 0003 	mvn.w	r0, #3
    2834:	4770      	bx	lr
	...

00002838 <_spi_async_enable>:
    2838:	b510      	push	{r4, lr}
    283a:	4604      	mov	r4, r0
    283c:	4b0b      	ldr	r3, [pc, #44]	; (286c <_spi_async_enable+0x34>)
    283e:	4798      	blx	r3
    2840:	4620      	mov	r0, r4
    2842:	4b0b      	ldr	r3, [pc, #44]	; (2870 <_spi_async_enable+0x38>)
    2844:	4798      	blx	r3
    2846:	2200      	movs	r2, #0
    2848:	e00b      	b.n	2862 <_spi_async_enable+0x2a>
    284a:	1c41      	adds	r1, r0, #1
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    284c:	0944      	lsrs	r4, r0, #5
    284e:	f000 001f 	and.w	r0, r0, #31
    2852:	2301      	movs	r3, #1
    2854:	fa03 f000 	lsl.w	r0, r3, r0
    2858:	4b06      	ldr	r3, [pc, #24]	; (2874 <_spi_async_enable+0x3c>)
    285a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    285e:	3201      	adds	r2, #1
    2860:	b2c8      	uxtb	r0, r1
    2862:	2a03      	cmp	r2, #3
    2864:	d9f1      	bls.n	284a <_spi_async_enable+0x12>
    2866:	2000      	movs	r0, #0
    2868:	bd10      	pop	{r4, pc}
    286a:	bf00      	nop
    286c:	00002815 	.word	0x00002815
    2870:	000027fd 	.word	0x000027fd
    2874:	e000e100 	.word	0xe000e100

00002878 <_spi_handler>:
    2878:	b508      	push	{r3, lr}
    287a:	6802      	ldr	r2, [r0, #0]
    287c:	7e11      	ldrb	r1, [r2, #24]
    287e:	7d93      	ldrb	r3, [r2, #22]
    2880:	400b      	ands	r3, r1
    2882:	f013 0f01 	tst.w	r3, #1
    2886:	d109      	bne.n	289c <_spi_handler+0x24>
    2888:	f013 0f04 	tst.w	r3, #4
    288c:	d109      	bne.n	28a2 <_spi_handler+0x2a>
    288e:	f013 0f02 	tst.w	r3, #2
    2892:	d109      	bne.n	28a8 <_spi_handler+0x30>
    2894:	f013 0f80 	tst.w	r3, #128	; 0x80
    2898:	d10b      	bne.n	28b2 <_spi_handler+0x3a>
    289a:	bd08      	pop	{r3, pc}
    289c:	6883      	ldr	r3, [r0, #8]
    289e:	4798      	blx	r3
    28a0:	bd08      	pop	{r3, pc}
    28a2:	68c3      	ldr	r3, [r0, #12]
    28a4:	4798      	blx	r3
    28a6:	bd08      	pop	{r3, pc}
    28a8:	2302      	movs	r3, #2
    28aa:	7613      	strb	r3, [r2, #24]
    28ac:	6903      	ldr	r3, [r0, #16]
    28ae:	4798      	blx	r3
    28b0:	bd08      	pop	{r3, pc}
    28b2:	2304      	movs	r3, #4
    28b4:	8353      	strh	r3, [r2, #26]
    28b6:	2380      	movs	r3, #128	; 0x80
    28b8:	7613      	strb	r3, [r2, #24]
    28ba:	6943      	ldr	r3, [r0, #20]
    28bc:	f06f 0112 	mvn.w	r1, #18
    28c0:	4798      	blx	r3
    28c2:	e7ea      	b.n	289a <_spi_handler+0x22>

000028c4 <SERCOM5_0_Handler>:
    28c4:	b508      	push	{r3, lr}
    28c6:	4b02      	ldr	r3, [pc, #8]	; (28d0 <SERCOM5_0_Handler+0xc>)
    28c8:	6818      	ldr	r0, [r3, #0]
    28ca:	4b02      	ldr	r3, [pc, #8]	; (28d4 <SERCOM5_0_Handler+0x10>)
    28cc:	4798      	blx	r3
    28ce:	bd08      	pop	{r3, pc}
    28d0:	20000124 	.word	0x20000124
    28d4:	00002879 	.word	0x00002879

000028d8 <SERCOM5_1_Handler>:
    28d8:	b508      	push	{r3, lr}
    28da:	4b02      	ldr	r3, [pc, #8]	; (28e4 <SERCOM5_1_Handler+0xc>)
    28dc:	6818      	ldr	r0, [r3, #0]
    28de:	4b02      	ldr	r3, [pc, #8]	; (28e8 <SERCOM5_1_Handler+0x10>)
    28e0:	4798      	blx	r3
    28e2:	bd08      	pop	{r3, pc}
    28e4:	20000124 	.word	0x20000124
    28e8:	00002879 	.word	0x00002879

000028ec <SERCOM5_2_Handler>:
    28ec:	b508      	push	{r3, lr}
    28ee:	4b02      	ldr	r3, [pc, #8]	; (28f8 <SERCOM5_2_Handler+0xc>)
    28f0:	6818      	ldr	r0, [r3, #0]
    28f2:	4b02      	ldr	r3, [pc, #8]	; (28fc <SERCOM5_2_Handler+0x10>)
    28f4:	4798      	blx	r3
    28f6:	bd08      	pop	{r3, pc}
    28f8:	20000124 	.word	0x20000124
    28fc:	00002879 	.word	0x00002879

00002900 <SERCOM5_3_Handler>:
    2900:	b508      	push	{r3, lr}
    2902:	4b02      	ldr	r3, [pc, #8]	; (290c <SERCOM5_3_Handler+0xc>)
    2904:	6818      	ldr	r0, [r3, #0]
    2906:	4b02      	ldr	r3, [pc, #8]	; (2910 <SERCOM5_3_Handler+0x10>)
    2908:	4798      	blx	r3
    290a:	bd08      	pop	{r3, pc}
    290c:	20000124 	.word	0x20000124
    2910:	00002879 	.word	0x00002879

00002914 <_spi_m_sync_init>:
    2914:	b570      	push	{r4, r5, r6, lr}
    2916:	4606      	mov	r6, r0
    2918:	460c      	mov	r4, r1
    291a:	4608      	mov	r0, r1
    291c:	4b58      	ldr	r3, [pc, #352]	; (2a80 <_spi_m_sync_init+0x16c>)
    291e:	4798      	blx	r3
    2920:	2300      	movs	r3, #0
    2922:	2b00      	cmp	r3, #0
    2924:	d068      	beq.n	29f8 <_spi_m_sync_init+0xe4>
    2926:	2500      	movs	r5, #0
    2928:	2e00      	cmp	r6, #0
    292a:	d071      	beq.n	2a10 <_spi_m_sync_init+0xfc>
    292c:	2c00      	cmp	r4, #0
    292e:	d06d      	beq.n	2a0c <_spi_m_sync_init+0xf8>
    2930:	2001      	movs	r0, #1
    2932:	f640 127c 	movw	r2, #2428	; 0x97c
    2936:	4953      	ldr	r1, [pc, #332]	; (2a84 <_spi_m_sync_init+0x170>)
    2938:	4b53      	ldr	r3, [pc, #332]	; (2a88 <_spi_m_sync_init+0x174>)
    293a:	4798      	blx	r3
    293c:	2d00      	cmp	r5, #0
    293e:	f000 809c 	beq.w	2a7a <_spi_m_sync_init+0x166>
    2942:	69e3      	ldr	r3, [r4, #28]
    2944:	f013 0f01 	tst.w	r3, #1
    2948:	d11d      	bne.n	2986 <_spi_m_sync_init+0x72>
    294a:	682b      	ldr	r3, [r5, #0]
    294c:	f003 021c 	and.w	r2, r3, #28
    2950:	69e3      	ldr	r3, [r4, #28]
    2952:	f013 0f03 	tst.w	r3, #3
    2956:	d1fb      	bne.n	2950 <_spi_m_sync_init+0x3c>
    2958:	6823      	ldr	r3, [r4, #0]
    295a:	f013 0f02 	tst.w	r3, #2
    295e:	d00b      	beq.n	2978 <_spi_m_sync_init+0x64>
    2960:	6823      	ldr	r3, [r4, #0]
    2962:	f023 0302 	bic.w	r3, r3, #2
    2966:	6023      	str	r3, [r4, #0]
    2968:	69e3      	ldr	r3, [r4, #28]
    296a:	f013 0f03 	tst.w	r3, #3
    296e:	d1fb      	bne.n	2968 <_spi_m_sync_init+0x54>
    2970:	69e3      	ldr	r3, [r4, #28]
    2972:	f013 0f02 	tst.w	r3, #2
    2976:	d1fb      	bne.n	2970 <_spi_m_sync_init+0x5c>
    2978:	f042 0201 	orr.w	r2, r2, #1
    297c:	6022      	str	r2, [r4, #0]
    297e:	69e3      	ldr	r3, [r4, #28]
    2980:	f013 0f03 	tst.w	r3, #3
    2984:	d1fb      	bne.n	297e <_spi_m_sync_init+0x6a>
    2986:	69e3      	ldr	r3, [r4, #28]
    2988:	f013 0f01 	tst.w	r3, #1
    298c:	d1fb      	bne.n	2986 <_spi_m_sync_init+0x72>
    298e:	6034      	str	r4, [r6, #0]
    2990:	682b      	ldr	r3, [r5, #0]
    2992:	f003 031c 	and.w	r3, r3, #28
    2996:	2b08      	cmp	r3, #8
    2998:	d03c      	beq.n	2a14 <_spi_m_sync_init+0x100>
    299a:	2c00      	cmp	r4, #0
    299c:	d069      	beq.n	2a72 <_spi_m_sync_init+0x15e>
    299e:	2d00      	cmp	r5, #0
    29a0:	d065      	beq.n	2a6e <_spi_m_sync_init+0x15a>
    29a2:	2001      	movs	r0, #1
    29a4:	f640 120f 	movw	r2, #2319	; 0x90f
    29a8:	4936      	ldr	r1, [pc, #216]	; (2a84 <_spi_m_sync_init+0x170>)
    29aa:	4b37      	ldr	r3, [pc, #220]	; (2a88 <_spi_m_sync_init+0x174>)
    29ac:	4798      	blx	r3
    29ae:	682b      	ldr	r3, [r5, #0]
    29b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    29b4:	f023 0301 	bic.w	r3, r3, #1
    29b8:	6023      	str	r3, [r4, #0]
    29ba:	69e3      	ldr	r3, [r4, #28]
    29bc:	f013 0f03 	tst.w	r3, #3
    29c0:	d1fb      	bne.n	29ba <_spi_m_sync_init+0xa6>
    29c2:	686b      	ldr	r3, [r5, #4]
    29c4:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    29c8:	f423 7310 	bic.w	r3, r3, #576	; 0x240
    29cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    29d0:	6063      	str	r3, [r4, #4]
    29d2:	69e3      	ldr	r3, [r4, #28]
    29d4:	f013 0f17 	tst.w	r3, #23
    29d8:	d1fb      	bne.n	29d2 <_spi_m_sync_init+0xbe>
    29da:	7b2b      	ldrb	r3, [r5, #12]
    29dc:	7323      	strb	r3, [r4, #12]
    29de:	7b6b      	ldrb	r3, [r5, #13]
    29e0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    29e4:	686b      	ldr	r3, [r5, #4]
    29e6:	f013 0f07 	tst.w	r3, #7
    29ea:	d144      	bne.n	2a76 <_spi_m_sync_init+0x162>
    29ec:	2301      	movs	r3, #1
    29ee:	7133      	strb	r3, [r6, #4]
    29f0:	89eb      	ldrh	r3, [r5, #14]
    29f2:	80f3      	strh	r3, [r6, #6]
    29f4:	2000      	movs	r0, #0
    29f6:	bd70      	pop	{r4, r5, r6, pc}
    29f8:	2805      	cmp	r0, #5
    29fa:	d002      	beq.n	2a02 <_spi_m_sync_init+0xee>
    29fc:	3301      	adds	r3, #1
    29fe:	b2db      	uxtb	r3, r3
    2a00:	e78f      	b.n	2922 <_spi_m_sync_init+0xe>
    2a02:	eb03 1503 	add.w	r5, r3, r3, lsl #4
    2a06:	4b21      	ldr	r3, [pc, #132]	; (2a8c <_spi_m_sync_init+0x178>)
    2a08:	441d      	add	r5, r3
    2a0a:	e78d      	b.n	2928 <_spi_m_sync_init+0x14>
    2a0c:	2000      	movs	r0, #0
    2a0e:	e790      	b.n	2932 <_spi_m_sync_init+0x1e>
    2a10:	2000      	movs	r0, #0
    2a12:	e78e      	b.n	2932 <_spi_m_sync_init+0x1e>
    2a14:	b34c      	cbz	r4, 2a6a <_spi_m_sync_init+0x156>
    2a16:	b335      	cbz	r5, 2a66 <_spi_m_sync_init+0x152>
    2a18:	2001      	movs	r0, #1
    2a1a:	f640 1223 	movw	r2, #2339	; 0x923
    2a1e:	4919      	ldr	r1, [pc, #100]	; (2a84 <_spi_m_sync_init+0x170>)
    2a20:	4b19      	ldr	r3, [pc, #100]	; (2a88 <_spi_m_sync_init+0x174>)
    2a22:	4798      	blx	r3
    2a24:	682b      	ldr	r3, [r5, #0]
    2a26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2a2a:	f023 0301 	bic.w	r3, r3, #1
    2a2e:	6023      	str	r3, [r4, #0]
    2a30:	69e3      	ldr	r3, [r4, #28]
    2a32:	f013 0f03 	tst.w	r3, #3
    2a36:	d1fb      	bne.n	2a30 <_spi_m_sync_init+0x11c>
    2a38:	686b      	ldr	r3, [r5, #4]
    2a3a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    2a3e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
    2a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2a46:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    2a4a:	6063      	str	r3, [r4, #4]
    2a4c:	69e3      	ldr	r3, [r4, #28]
    2a4e:	f013 0f17 	tst.w	r3, #23
    2a52:	d1fb      	bne.n	2a4c <_spi_m_sync_init+0x138>
    2a54:	68ab      	ldr	r3, [r5, #8]
    2a56:	6263      	str	r3, [r4, #36]	; 0x24
    2a58:	7b6b      	ldrb	r3, [r5, #13]
    2a5a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    2a5e:	69e3      	ldr	r3, [r4, #28]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d1fc      	bne.n	2a5e <_spi_m_sync_init+0x14a>
    2a64:	e7be      	b.n	29e4 <_spi_m_sync_init+0xd0>
    2a66:	2000      	movs	r0, #0
    2a68:	e7d7      	b.n	2a1a <_spi_m_sync_init+0x106>
    2a6a:	2000      	movs	r0, #0
    2a6c:	e7d5      	b.n	2a1a <_spi_m_sync_init+0x106>
    2a6e:	2000      	movs	r0, #0
    2a70:	e798      	b.n	29a4 <_spi_m_sync_init+0x90>
    2a72:	2000      	movs	r0, #0
    2a74:	e796      	b.n	29a4 <_spi_m_sync_init+0x90>
    2a76:	2302      	movs	r3, #2
    2a78:	e7b9      	b.n	29ee <_spi_m_sync_init+0xda>
    2a7a:	f06f 000c 	mvn.w	r0, #12
    2a7e:	bd70      	pop	{r4, r5, r6, pc}
    2a80:	000027a5 	.word	0x000027a5
    2a84:	000044b0 	.word	0x000044b0
    2a88:	00001e41 	.word	0x00001e41
    2a8c:	0000449c 	.word	0x0000449c

00002a90 <_spi_m_async_init>:
    2a90:	b570      	push	{r4, r5, r6, lr}
    2a92:	4605      	mov	r5, r0
    2a94:	460e      	mov	r6, r1
    2a96:	4b14      	ldr	r3, [pc, #80]	; (2ae8 <_spi_m_async_init+0x58>)
    2a98:	4798      	blx	r3
    2a9a:	2800      	cmp	r0, #0
    2a9c:	db23      	blt.n	2ae6 <_spi_m_async_init+0x56>
    2a9e:	4629      	mov	r1, r5
    2aa0:	4630      	mov	r0, r6
    2aa2:	4b12      	ldr	r3, [pc, #72]	; (2aec <_spi_m_async_init+0x5c>)
    2aa4:	4798      	blx	r3
    2aa6:	2400      	movs	r4, #0
    2aa8:	612c      	str	r4, [r5, #16]
    2aaa:	60ec      	str	r4, [r5, #12]
    2aac:	60ac      	str	r4, [r5, #8]
    2aae:	4630      	mov	r0, r6
    2ab0:	4b0f      	ldr	r3, [pc, #60]	; (2af0 <_spi_m_async_init+0x60>)
    2ab2:	4798      	blx	r3
    2ab4:	4621      	mov	r1, r4
    2ab6:	e013      	b.n	2ae0 <_spi_m_async_init+0x50>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ab8:	0943      	lsrs	r3, r0, #5
    2aba:	f000 041f 	and.w	r4, r0, #31
    2abe:	2201      	movs	r2, #1
    2ac0:	40a2      	lsls	r2, r4
    2ac2:	4c0c      	ldr	r4, [pc, #48]	; (2af4 <_spi_m_async_init+0x64>)
    2ac4:	f103 0520 	add.w	r5, r3, #32
    2ac8:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2acc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ad0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ad4:	3360      	adds	r3, #96	; 0x60
    2ad6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    2ada:	3001      	adds	r0, #1
    2adc:	b2c0      	uxtb	r0, r0
    2ade:	3101      	adds	r1, #1
    2ae0:	2903      	cmp	r1, #3
    2ae2:	d9e9      	bls.n	2ab8 <_spi_m_async_init+0x28>
    2ae4:	2000      	movs	r0, #0
    2ae6:	bd70      	pop	{r4, r5, r6, pc}
    2ae8:	00002915 	.word	0x00002915
    2aec:	000027e5 	.word	0x000027e5
    2af0:	000027fd 	.word	0x000027fd
    2af4:	e000e100 	.word	0xe000e100

00002af8 <_spi_m_async_enable>:
    2af8:	b510      	push	{r4, lr}
    2afa:	4604      	mov	r4, r0
    2afc:	b168      	cbz	r0, 2b1a <_spi_m_async_enable+0x22>
    2afe:	6803      	ldr	r3, [r0, #0]
    2b00:	b14b      	cbz	r3, 2b16 <_spi_m_async_enable+0x1e>
    2b02:	2001      	movs	r0, #1
    2b04:	f640 12e9 	movw	r2, #2537	; 0x9e9
    2b08:	4905      	ldr	r1, [pc, #20]	; (2b20 <_spi_m_async_enable+0x28>)
    2b0a:	4b06      	ldr	r3, [pc, #24]	; (2b24 <_spi_m_async_enable+0x2c>)
    2b0c:	4798      	blx	r3
    2b0e:	6820      	ldr	r0, [r4, #0]
    2b10:	4b05      	ldr	r3, [pc, #20]	; (2b28 <_spi_m_async_enable+0x30>)
    2b12:	4798      	blx	r3
    2b14:	bd10      	pop	{r4, pc}
    2b16:	2000      	movs	r0, #0
    2b18:	e7f4      	b.n	2b04 <_spi_m_async_enable+0xc>
    2b1a:	2000      	movs	r0, #0
    2b1c:	e7f2      	b.n	2b04 <_spi_m_async_enable+0xc>
    2b1e:	bf00      	nop
    2b20:	000044b0 	.word	0x000044b0
    2b24:	00001e41 	.word	0x00001e41
    2b28:	00002839 	.word	0x00002839

00002b2c <_spi_m_async_enable_tx>:
    2b2c:	b538      	push	{r3, r4, r5, lr}
    2b2e:	460d      	mov	r5, r1
    2b30:	6804      	ldr	r4, [r0, #0]
    2b32:	b168      	cbz	r0, 2b50 <_spi_m_async_enable_tx+0x24>
    2b34:	b154      	cbz	r4, 2b4c <_spi_m_async_enable_tx+0x20>
    2b36:	2001      	movs	r0, #1
    2b38:	f640 320c 	movw	r2, #2828	; 0xb0c
    2b3c:	4907      	ldr	r1, [pc, #28]	; (2b5c <_spi_m_async_enable_tx+0x30>)
    2b3e:	4b08      	ldr	r3, [pc, #32]	; (2b60 <_spi_m_async_enable_tx+0x34>)
    2b40:	4798      	blx	r3
    2b42:	b93d      	cbnz	r5, 2b54 <_spi_m_async_enable_tx+0x28>
    2b44:	2301      	movs	r3, #1
    2b46:	7523      	strb	r3, [r4, #20]
    2b48:	2000      	movs	r0, #0
    2b4a:	bd38      	pop	{r3, r4, r5, pc}
    2b4c:	2000      	movs	r0, #0
    2b4e:	e7f3      	b.n	2b38 <_spi_m_async_enable_tx+0xc>
    2b50:	2000      	movs	r0, #0
    2b52:	e7f1      	b.n	2b38 <_spi_m_async_enable_tx+0xc>
    2b54:	2301      	movs	r3, #1
    2b56:	75a3      	strb	r3, [r4, #22]
    2b58:	e7f6      	b.n	2b48 <_spi_m_async_enable_tx+0x1c>
    2b5a:	bf00      	nop
    2b5c:	000044b0 	.word	0x000044b0
    2b60:	00001e41 	.word	0x00001e41

00002b64 <_spi_m_async_enable_rx>:
    2b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b66:	460f      	mov	r7, r1
    2b68:	6804      	ldr	r4, [r0, #0]
    2b6a:	4e0c      	ldr	r6, [pc, #48]	; (2b9c <_spi_m_async_enable_rx+0x38>)
    2b6c:	f44f 6232 	mov.w	r2, #2848	; 0xb20
    2b70:	4631      	mov	r1, r6
    2b72:	3000      	adds	r0, #0
    2b74:	bf18      	it	ne
    2b76:	2001      	movne	r0, #1
    2b78:	4d09      	ldr	r5, [pc, #36]	; (2ba0 <_spi_m_async_enable_rx+0x3c>)
    2b7a:	47a8      	blx	r5
    2b7c:	f640 3221 	movw	r2, #2849	; 0xb21
    2b80:	4631      	mov	r1, r6
    2b82:	1c20      	adds	r0, r4, #0
    2b84:	bf18      	it	ne
    2b86:	2001      	movne	r0, #1
    2b88:	47a8      	blx	r5
    2b8a:	b91f      	cbnz	r7, 2b94 <_spi_m_async_enable_rx+0x30>
    2b8c:	2304      	movs	r3, #4
    2b8e:	7523      	strb	r3, [r4, #20]
    2b90:	2000      	movs	r0, #0
    2b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b94:	2304      	movs	r3, #4
    2b96:	75a3      	strb	r3, [r4, #22]
    2b98:	e7fa      	b.n	2b90 <_spi_m_async_enable_rx+0x2c>
    2b9a:	bf00      	nop
    2b9c:	000044b0 	.word	0x000044b0
    2ba0:	00001e41 	.word	0x00001e41

00002ba4 <_spi_m_async_enable_tx_complete>:
    2ba4:	b538      	push	{r3, r4, r5, lr}
    2ba6:	460d      	mov	r5, r1
    2ba8:	4604      	mov	r4, r0
    2baa:	b178      	cbz	r0, 2bcc <_spi_m_async_enable_tx_complete+0x28>
    2bac:	6803      	ldr	r3, [r0, #0]
    2bae:	b15b      	cbz	r3, 2bc8 <_spi_m_async_enable_tx_complete+0x24>
    2bb0:	2001      	movs	r0, #1
    2bb2:	f640 3233 	movw	r2, #2867	; 0xb33
    2bb6:	4908      	ldr	r1, [pc, #32]	; (2bd8 <_spi_m_async_enable_tx_complete+0x34>)
    2bb8:	4b08      	ldr	r3, [pc, #32]	; (2bdc <_spi_m_async_enable_tx_complete+0x38>)
    2bba:	4798      	blx	r3
    2bbc:	b945      	cbnz	r5, 2bd0 <_spi_m_async_enable_tx_complete+0x2c>
    2bbe:	6823      	ldr	r3, [r4, #0]
    2bc0:	2202      	movs	r2, #2
    2bc2:	751a      	strb	r2, [r3, #20]
    2bc4:	2000      	movs	r0, #0
    2bc6:	bd38      	pop	{r3, r4, r5, pc}
    2bc8:	2000      	movs	r0, #0
    2bca:	e7f2      	b.n	2bb2 <_spi_m_async_enable_tx_complete+0xe>
    2bcc:	2000      	movs	r0, #0
    2bce:	e7f0      	b.n	2bb2 <_spi_m_async_enable_tx_complete+0xe>
    2bd0:	6823      	ldr	r3, [r4, #0]
    2bd2:	2202      	movs	r2, #2
    2bd4:	759a      	strb	r2, [r3, #22]
    2bd6:	e7f5      	b.n	2bc4 <_spi_m_async_enable_tx_complete+0x20>
    2bd8:	000044b0 	.word	0x000044b0
    2bdc:	00001e41 	.word	0x00001e41

00002be0 <_spi_m_async_write_one>:
    2be0:	b538      	push	{r3, r4, r5, lr}
    2be2:	460d      	mov	r5, r1
    2be4:	4604      	mov	r4, r0
    2be6:	b168      	cbz	r0, 2c04 <_spi_m_async_write_one+0x24>
    2be8:	6803      	ldr	r3, [r0, #0]
    2bea:	b14b      	cbz	r3, 2c00 <_spi_m_async_write_one+0x20>
    2bec:	2001      	movs	r0, #1
    2bee:	f640 3245 	movw	r2, #2885	; 0xb45
    2bf2:	4905      	ldr	r1, [pc, #20]	; (2c08 <_spi_m_async_write_one+0x28>)
    2bf4:	4b05      	ldr	r3, [pc, #20]	; (2c0c <_spi_m_async_write_one+0x2c>)
    2bf6:	4798      	blx	r3
    2bf8:	6823      	ldr	r3, [r4, #0]
    2bfa:	629d      	str	r5, [r3, #40]	; 0x28
    2bfc:	2000      	movs	r0, #0
    2bfe:	bd38      	pop	{r3, r4, r5, pc}
    2c00:	2000      	movs	r0, #0
    2c02:	e7f4      	b.n	2bee <_spi_m_async_write_one+0xe>
    2c04:	2000      	movs	r0, #0
    2c06:	e7f2      	b.n	2bee <_spi_m_async_write_one+0xe>
    2c08:	000044b0 	.word	0x000044b0
    2c0c:	00001e41 	.word	0x00001e41

00002c10 <_spi_m_async_read_one>:
    2c10:	b510      	push	{r4, lr}
    2c12:	4604      	mov	r4, r0
    2c14:	b168      	cbz	r0, 2c32 <_spi_m_async_read_one+0x22>
    2c16:	6803      	ldr	r3, [r0, #0]
    2c18:	b14b      	cbz	r3, 2c2e <_spi_m_async_read_one+0x1e>
    2c1a:	2001      	movs	r0, #1
    2c1c:	f44f 6236 	mov.w	r2, #2912	; 0xb60
    2c20:	4905      	ldr	r1, [pc, #20]	; (2c38 <_spi_m_async_read_one+0x28>)
    2c22:	4b06      	ldr	r3, [pc, #24]	; (2c3c <_spi_m_async_read_one+0x2c>)
    2c24:	4798      	blx	r3
    2c26:	6823      	ldr	r3, [r4, #0]
    2c28:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2c2a:	b280      	uxth	r0, r0
    2c2c:	bd10      	pop	{r4, pc}
    2c2e:	2000      	movs	r0, #0
    2c30:	e7f4      	b.n	2c1c <_spi_m_async_read_one+0xc>
    2c32:	2000      	movs	r0, #0
    2c34:	e7f2      	b.n	2c1c <_spi_m_async_read_one+0xc>
    2c36:	bf00      	nop
    2c38:	000044b0 	.word	0x000044b0
    2c3c:	00001e41 	.word	0x00001e41

00002c40 <_spi_m_async_register_callback>:
    2c40:	b570      	push	{r4, r5, r6, lr}
    2c42:	460d      	mov	r5, r1
    2c44:	4616      	mov	r6, r2
    2c46:	4604      	mov	r4, r0
    2c48:	b160      	cbz	r0, 2c64 <_spi_m_async_register_callback+0x24>
    2c4a:	2903      	cmp	r1, #3
    2c4c:	d90c      	bls.n	2c68 <_spi_m_async_register_callback+0x28>
    2c4e:	2000      	movs	r0, #0
    2c50:	f640 3279 	movw	r2, #2937	; 0xb79
    2c54:	4905      	ldr	r1, [pc, #20]	; (2c6c <_spi_m_async_register_callback+0x2c>)
    2c56:	4b06      	ldr	r3, [pc, #24]	; (2c70 <_spi_m_async_register_callback+0x30>)
    2c58:	4798      	blx	r3
    2c5a:	3408      	adds	r4, #8
    2c5c:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    2c60:	2000      	movs	r0, #0
    2c62:	bd70      	pop	{r4, r5, r6, pc}
    2c64:	2000      	movs	r0, #0
    2c66:	e7f3      	b.n	2c50 <_spi_m_async_register_callback+0x10>
    2c68:	2001      	movs	r0, #1
    2c6a:	e7f1      	b.n	2c50 <_spi_m_async_register_callback+0x10>
    2c6c:	000044b0 	.word	0x000044b0
    2c70:	00001e41 	.word	0x00001e41

00002c74 <_spi_m_async_set_irq_state>:
    2c74:	b570      	push	{r4, r5, r6, lr}
    2c76:	460c      	mov	r4, r1
    2c78:	4615      	mov	r5, r2
    2c7a:	4606      	mov	r6, r0
    2c7c:	f640 32ba 	movw	r2, #3002	; 0xbba
    2c80:	4908      	ldr	r1, [pc, #32]	; (2ca4 <_spi_m_async_set_irq_state+0x30>)
    2c82:	3000      	adds	r0, #0
    2c84:	bf18      	it	ne
    2c86:	2001      	movne	r0, #1
    2c88:	4b07      	ldr	r3, [pc, #28]	; (2ca8 <_spi_m_async_set_irq_state+0x34>)
    2c8a:	4798      	blx	r3
    2c8c:	2c03      	cmp	r4, #3
    2c8e:	d000      	beq.n	2c92 <_spi_m_async_set_irq_state+0x1e>
    2c90:	bd70      	pop	{r4, r5, r6, pc}
    2c92:	6833      	ldr	r3, [r6, #0]
    2c94:	b115      	cbz	r5, 2c9c <_spi_m_async_set_irq_state+0x28>
    2c96:	2280      	movs	r2, #128	; 0x80
    2c98:	759a      	strb	r2, [r3, #22]
    2c9a:	e7f9      	b.n	2c90 <_spi_m_async_set_irq_state+0x1c>
    2c9c:	2280      	movs	r2, #128	; 0x80
    2c9e:	751a      	strb	r2, [r3, #20]
    2ca0:	bd70      	pop	{r4, r5, r6, pc}
    2ca2:	bf00      	nop
    2ca4:	000044b0 	.word	0x000044b0
    2ca8:	00001e41 	.word	0x00001e41

00002cac <PWM_0_init>:
    2cac:	4b2b      	ldr	r3, [pc, #172]	; (2d5c <PWM_0_init+0xb0>)
    2cae:	689b      	ldr	r3, [r3, #8]
    2cb0:	f013 0f01 	tst.w	r3, #1
    2cb4:	d120      	bne.n	2cf8 <PWM_0_init+0x4c>
    2cb6:	4b29      	ldr	r3, [pc, #164]	; (2d5c <PWM_0_init+0xb0>)
    2cb8:	689b      	ldr	r3, [r3, #8]
    2cba:	f013 0f03 	tst.w	r3, #3
    2cbe:	d1fa      	bne.n	2cb6 <PWM_0_init+0xa>
    2cc0:	4b26      	ldr	r3, [pc, #152]	; (2d5c <PWM_0_init+0xb0>)
    2cc2:	681b      	ldr	r3, [r3, #0]
    2cc4:	f013 0f02 	tst.w	r3, #2
    2cc8:	d00e      	beq.n	2ce8 <PWM_0_init+0x3c>
    2cca:	4a24      	ldr	r2, [pc, #144]	; (2d5c <PWM_0_init+0xb0>)
    2ccc:	6813      	ldr	r3, [r2, #0]
    2cce:	f023 0302 	bic.w	r3, r3, #2
    2cd2:	6013      	str	r3, [r2, #0]
    2cd4:	4b21      	ldr	r3, [pc, #132]	; (2d5c <PWM_0_init+0xb0>)
    2cd6:	689b      	ldr	r3, [r3, #8]
    2cd8:	f013 0f03 	tst.w	r3, #3
    2cdc:	d1fa      	bne.n	2cd4 <PWM_0_init+0x28>
    2cde:	4b1f      	ldr	r3, [pc, #124]	; (2d5c <PWM_0_init+0xb0>)
    2ce0:	689b      	ldr	r3, [r3, #8]
    2ce2:	f013 0f02 	tst.w	r3, #2
    2ce6:	d1fa      	bne.n	2cde <PWM_0_init+0x32>
    2ce8:	2201      	movs	r2, #1
    2cea:	4b1c      	ldr	r3, [pc, #112]	; (2d5c <PWM_0_init+0xb0>)
    2cec:	601a      	str	r2, [r3, #0]
    2cee:	4b1b      	ldr	r3, [pc, #108]	; (2d5c <PWM_0_init+0xb0>)
    2cf0:	689b      	ldr	r3, [r3, #8]
    2cf2:	f013 0f03 	tst.w	r3, #3
    2cf6:	d1fa      	bne.n	2cee <PWM_0_init+0x42>
    2cf8:	4b18      	ldr	r3, [pc, #96]	; (2d5c <PWM_0_init+0xb0>)
    2cfa:	689b      	ldr	r3, [r3, #8]
    2cfc:	f013 0f01 	tst.w	r3, #1
    2d00:	d1fa      	bne.n	2cf8 <PWM_0_init+0x4c>
    2d02:	4b16      	ldr	r3, [pc, #88]	; (2d5c <PWM_0_init+0xb0>)
    2d04:	2201      	movs	r2, #1
    2d06:	779a      	strb	r2, [r3, #30]
    2d08:	f240 72d2 	movw	r2, #2002	; 0x7d2
    2d0c:	645a      	str	r2, [r3, #68]	; 0x44
    2d0e:	4b13      	ldr	r3, [pc, #76]	; (2d5c <PWM_0_init+0xb0>)
    2d10:	689b      	ldr	r3, [r3, #8]
    2d12:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    2d16:	d1fa      	bne.n	2d0e <PWM_0_init+0x62>
    2d18:	2207      	movs	r2, #7
    2d1a:	4b10      	ldr	r3, [pc, #64]	; (2d5c <PWM_0_init+0xb0>)
    2d1c:	63da      	str	r2, [r3, #60]	; 0x3c
    2d1e:	4b0f      	ldr	r3, [pc, #60]	; (2d5c <PWM_0_init+0xb0>)
    2d20:	689b      	ldr	r3, [r3, #8]
    2d22:	f3c3 030d 	ubfx	r3, r3, #0, #14
    2d26:	2b00      	cmp	r3, #0
    2d28:	d1f9      	bne.n	2d1e <PWM_0_init+0x72>
    2d2a:	f240 72d2 	movw	r2, #2002	; 0x7d2
    2d2e:	4b0b      	ldr	r3, [pc, #44]	; (2d5c <PWM_0_init+0xb0>)
    2d30:	641a      	str	r2, [r3, #64]	; 0x40
    2d32:	4b0a      	ldr	r3, [pc, #40]	; (2d5c <PWM_0_init+0xb0>)
    2d34:	689b      	ldr	r3, [r3, #8]
    2d36:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d3a:	d1fa      	bne.n	2d32 <PWM_0_init+0x86>
    2d3c:	4b07      	ldr	r3, [pc, #28]	; (2d5c <PWM_0_init+0xb0>)
    2d3e:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
    2d42:	621a      	str	r2, [r3, #32]
    2d44:	681a      	ldr	r2, [r3, #0]
    2d46:	f042 0202 	orr.w	r2, r2, #2
    2d4a:	601a      	str	r2, [r3, #0]
    2d4c:	4b03      	ldr	r3, [pc, #12]	; (2d5c <PWM_0_init+0xb0>)
    2d4e:	689b      	ldr	r3, [r3, #8]
    2d50:	f013 0f03 	tst.w	r3, #3
    2d54:	d1fa      	bne.n	2d4c <PWM_0_init+0xa0>
    2d56:	2000      	movs	r0, #0
    2d58:	4770      	bx	lr
    2d5a:	bf00      	nop
    2d5c:	41018000 	.word	0x41018000

00002d60 <tc_interrupt_handler>:
    2d60:	b508      	push	{r3, lr}
    2d62:	68c3      	ldr	r3, [r0, #12]
    2d64:	7a9a      	ldrb	r2, [r3, #10]
    2d66:	f012 0f01 	tst.w	r2, #1
    2d6a:	d100      	bne.n	2d6e <tc_interrupt_handler+0xe>
    2d6c:	bd08      	pop	{r3, pc}
    2d6e:	2201      	movs	r2, #1
    2d70:	729a      	strb	r2, [r3, #10]
    2d72:	6803      	ldr	r3, [r0, #0]
    2d74:	4798      	blx	r3
    2d76:	e7f9      	b.n	2d6c <tc_interrupt_handler+0xc>

00002d78 <_tc_init_irq_param>:
    2d78:	4b03      	ldr	r3, [pc, #12]	; (2d88 <_tc_init_irq_param+0x10>)
    2d7a:	4298      	cmp	r0, r3
    2d7c:	d000      	beq.n	2d80 <_tc_init_irq_param+0x8>
    2d7e:	4770      	bx	lr
    2d80:	4b02      	ldr	r3, [pc, #8]	; (2d8c <_tc_init_irq_param+0x14>)
    2d82:	6019      	str	r1, [r3, #0]
    2d84:	e7fb      	b.n	2d7e <_tc_init_irq_param+0x6>
    2d86:	bf00      	nop
    2d88:	4101a000 	.word	0x4101a000
    2d8c:	20000128 	.word	0x20000128

00002d90 <get_tc_index>:
    2d90:	b510      	push	{r4, lr}
    2d92:	b084      	sub	sp, #16
    2d94:	4604      	mov	r4, r0
    2d96:	4b17      	ldr	r3, [pc, #92]	; (2df4 <get_tc_index+0x64>)
    2d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d9a:	f10d 0e10 	add.w	lr, sp, #16
    2d9e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
    2da2:	2300      	movs	r3, #0
    2da4:	2b03      	cmp	r3, #3
    2da6:	d80a      	bhi.n	2dbe <get_tc_index+0x2e>
    2da8:	aa04      	add	r2, sp, #16
    2daa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2dae:	f852 2c10 	ldr.w	r2, [r2, #-16]
    2db2:	42a2      	cmp	r2, r4
    2db4:	d001      	beq.n	2dba <get_tc_index+0x2a>
    2db6:	3301      	adds	r3, #1
    2db8:	e7f4      	b.n	2da4 <get_tc_index+0x14>
    2dba:	b2db      	uxtb	r3, r3
    2dbc:	e000      	b.n	2dc0 <get_tc_index+0x30>
    2dbe:	2300      	movs	r3, #0
    2dc0:	2200      	movs	r2, #0
    2dc2:	b14a      	cbz	r2, 2dd8 <get_tc_index+0x48>
    2dc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2dc8:	490b      	ldr	r1, [pc, #44]	; (2df8 <get_tc_index+0x68>)
    2dca:	2000      	movs	r0, #0
    2dcc:	4b0b      	ldr	r3, [pc, #44]	; (2dfc <get_tc_index+0x6c>)
    2dce:	4798      	blx	r3
    2dd0:	f04f 30ff 	mov.w	r0, #4294967295
    2dd4:	b004      	add	sp, #16
    2dd6:	bd10      	pop	{r4, pc}
    2dd8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    2ddc:	0088      	lsls	r0, r1, #2
    2dde:	4905      	ldr	r1, [pc, #20]	; (2df4 <get_tc_index+0x64>)
    2de0:	4401      	add	r1, r0
    2de2:	7c09      	ldrb	r1, [r1, #16]
    2de4:	4299      	cmp	r1, r3
    2de6:	d002      	beq.n	2dee <get_tc_index+0x5e>
    2de8:	3201      	adds	r2, #1
    2dea:	b2d2      	uxtb	r2, r2
    2dec:	e7e9      	b.n	2dc2 <get_tc_index+0x32>
    2dee:	b250      	sxtb	r0, r2
    2df0:	e7f0      	b.n	2dd4 <get_tc_index+0x44>
    2df2:	bf00      	nop
    2df4:	000044cc 	.word	0x000044cc
    2df8:	000044f0 	.word	0x000044f0
    2dfc:	00001e41 	.word	0x00001e41

00002e00 <_timer_init>:
    2e00:	b570      	push	{r4, r5, r6, lr}
    2e02:	4606      	mov	r6, r0
    2e04:	460c      	mov	r4, r1
    2e06:	4608      	mov	r0, r1
    2e08:	4b65      	ldr	r3, [pc, #404]	; (2fa0 <_timer_init+0x1a0>)
    2e0a:	4798      	blx	r3
    2e0c:	4605      	mov	r5, r0
    2e0e:	60f4      	str	r4, [r6, #12]
    2e10:	2291      	movs	r2, #145	; 0x91
    2e12:	4964      	ldr	r1, [pc, #400]	; (2fa4 <_timer_init+0x1a4>)
    2e14:	2001      	movs	r0, #1
    2e16:	4b64      	ldr	r3, [pc, #400]	; (2fa8 <_timer_init+0x1a8>)
    2e18:	4798      	blx	r3
    2e1a:	6923      	ldr	r3, [r4, #16]
    2e1c:	f013 0f01 	tst.w	r3, #1
    2e20:	d119      	bne.n	2e56 <_timer_init+0x56>
    2e22:	6923      	ldr	r3, [r4, #16]
    2e24:	f013 0f03 	tst.w	r3, #3
    2e28:	d1fb      	bne.n	2e22 <_timer_init+0x22>
    2e2a:	6823      	ldr	r3, [r4, #0]
    2e2c:	f013 0f02 	tst.w	r3, #2
    2e30:	d00b      	beq.n	2e4a <_timer_init+0x4a>
    2e32:	6823      	ldr	r3, [r4, #0]
    2e34:	f023 0302 	bic.w	r3, r3, #2
    2e38:	6023      	str	r3, [r4, #0]
    2e3a:	6923      	ldr	r3, [r4, #16]
    2e3c:	f013 0f03 	tst.w	r3, #3
    2e40:	d1fb      	bne.n	2e3a <_timer_init+0x3a>
    2e42:	6923      	ldr	r3, [r4, #16]
    2e44:	f013 0f02 	tst.w	r3, #2
    2e48:	d1fb      	bne.n	2e42 <_timer_init+0x42>
    2e4a:	2301      	movs	r3, #1
    2e4c:	6023      	str	r3, [r4, #0]
    2e4e:	6923      	ldr	r3, [r4, #16]
    2e50:	f013 0f03 	tst.w	r3, #3
    2e54:	d1fb      	bne.n	2e4e <_timer_init+0x4e>
    2e56:	6923      	ldr	r3, [r4, #16]
    2e58:	f013 0f01 	tst.w	r3, #1
    2e5c:	d1fb      	bne.n	2e56 <_timer_init+0x56>
    2e5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e62:	009a      	lsls	r2, r3, #2
    2e64:	4b51      	ldr	r3, [pc, #324]	; (2fac <_timer_init+0x1ac>)
    2e66:	4413      	add	r3, r2
    2e68:	695b      	ldr	r3, [r3, #20]
    2e6a:	6023      	str	r3, [r4, #0]
    2e6c:	6923      	ldr	r3, [r4, #16]
    2e6e:	f013 0f03 	tst.w	r3, #3
    2e72:	d1fb      	bne.n	2e6c <_timer_init+0x6c>
    2e74:	00aa      	lsls	r2, r5, #2
    2e76:	442a      	add	r2, r5
    2e78:	0091      	lsls	r1, r2, #2
    2e7a:	4b4c      	ldr	r3, [pc, #304]	; (2fac <_timer_init+0x1ac>)
    2e7c:	440b      	add	r3, r1
    2e7e:	7e9a      	ldrb	r2, [r3, #26]
    2e80:	73e2      	strb	r2, [r4, #15]
    2e82:	8b1a      	ldrh	r2, [r3, #24]
    2e84:	80e2      	strh	r2, [r4, #6]
    2e86:	2201      	movs	r2, #1
    2e88:	7322      	strb	r2, [r4, #12]
    2e8a:	695b      	ldr	r3, [r3, #20]
    2e8c:	f003 030c 	and.w	r3, r3, #12
    2e90:	2b08      	cmp	r3, #8
    2e92:	d056      	beq.n	2f42 <_timer_init+0x142>
    2e94:	2b00      	cmp	r3, #0
    2e96:	d163      	bne.n	2f60 <_timer_init+0x160>
    2e98:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e9c:	009a      	lsls	r2, r3, #2
    2e9e:	4b43      	ldr	r3, [pc, #268]	; (2fac <_timer_init+0x1ac>)
    2ea0:	4413      	add	r3, r2
    2ea2:	8b9b      	ldrh	r3, [r3, #28]
    2ea4:	83a3      	strh	r3, [r4, #28]
    2ea6:	6923      	ldr	r3, [r4, #16]
    2ea8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2eac:	d1fb      	bne.n	2ea6 <_timer_init+0xa6>
    2eae:	2300      	movs	r3, #0
    2eb0:	83e3      	strh	r3, [r4, #30]
    2eb2:	6923      	ldr	r3, [r4, #16]
    2eb4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2eb8:	d1fb      	bne.n	2eb2 <_timer_init+0xb2>
    2eba:	2301      	movs	r3, #1
    2ebc:	7263      	strb	r3, [r4, #9]
    2ebe:	4631      	mov	r1, r6
    2ec0:	4620      	mov	r0, r4
    2ec2:	4b3b      	ldr	r3, [pc, #236]	; (2fb0 <_timer_init+0x1b0>)
    2ec4:	4798      	blx	r3
    2ec6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2eca:	009a      	lsls	r2, r3, #2
    2ecc:	4b37      	ldr	r3, [pc, #220]	; (2fac <_timer_init+0x1ac>)
    2ece:	4413      	add	r3, r2
    2ed0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  if ((int32_t)(IRQn) >= 0)
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	db0d      	blt.n	2ef4 <_timer_init+0xf4>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ed8:	095a      	lsrs	r2, r3, #5
    2eda:	f003 031f 	and.w	r3, r3, #31
    2ede:	2101      	movs	r1, #1
    2ee0:	fa01 f303 	lsl.w	r3, r1, r3
    2ee4:	3220      	adds	r2, #32
    2ee6:	4933      	ldr	r1, [pc, #204]	; (2fb4 <_timer_init+0x1b4>)
    2ee8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ef0:	f3bf 8f6f 	isb	sy
    2ef4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ef8:	009a      	lsls	r2, r3, #2
    2efa:	4b2c      	ldr	r3, [pc, #176]	; (2fac <_timer_init+0x1ac>)
    2efc:	4413      	add	r3, r2
    2efe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  if ((int32_t)(IRQn) >= 0)
    2f02:	2b00      	cmp	r3, #0
    2f04:	db09      	blt.n	2f1a <_timer_init+0x11a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f06:	095a      	lsrs	r2, r3, #5
    2f08:	f003 031f 	and.w	r3, r3, #31
    2f0c:	2101      	movs	r1, #1
    2f0e:	fa01 f303 	lsl.w	r3, r1, r3
    2f12:	3260      	adds	r2, #96	; 0x60
    2f14:	4927      	ldr	r1, [pc, #156]	; (2fb4 <_timer_init+0x1b4>)
    2f16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2f1a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2f1e:	00aa      	lsls	r2, r5, #2
    2f20:	4b22      	ldr	r3, [pc, #136]	; (2fac <_timer_init+0x1ac>)
    2f22:	4413      	add	r3, r2
    2f24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  if ((int32_t)(IRQn) >= 0)
    2f28:	2b00      	cmp	r3, #0
    2f2a:	db08      	blt.n	2f3e <_timer_init+0x13e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f2c:	0959      	lsrs	r1, r3, #5
    2f2e:	f003 031f 	and.w	r3, r3, #31
    2f32:	2201      	movs	r2, #1
    2f34:	fa02 f303 	lsl.w	r3, r2, r3
    2f38:	4a1e      	ldr	r2, [pc, #120]	; (2fb4 <_timer_init+0x1b4>)
    2f3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    2f3e:	2000      	movs	r0, #0
    2f40:	bd70      	pop	{r4, r5, r6, pc}
    2f42:	4b1a      	ldr	r3, [pc, #104]	; (2fac <_timer_init+0x1ac>)
    2f44:	440b      	add	r3, r1
    2f46:	69db      	ldr	r3, [r3, #28]
    2f48:	61e3      	str	r3, [r4, #28]
    2f4a:	6923      	ldr	r3, [r4, #16]
    2f4c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f50:	d1fb      	bne.n	2f4a <_timer_init+0x14a>
    2f52:	2300      	movs	r3, #0
    2f54:	6223      	str	r3, [r4, #32]
    2f56:	6923      	ldr	r3, [r4, #16]
    2f58:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f5c:	d1fb      	bne.n	2f56 <_timer_init+0x156>
    2f5e:	e7ac      	b.n	2eba <_timer_init+0xba>
    2f60:	2b04      	cmp	r3, #4
    2f62:	d1aa      	bne.n	2eba <_timer_init+0xba>
    2f64:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f68:	009a      	lsls	r2, r3, #2
    2f6a:	4b10      	ldr	r3, [pc, #64]	; (2fac <_timer_init+0x1ac>)
    2f6c:	4413      	add	r3, r2
    2f6e:	7f1b      	ldrb	r3, [r3, #28]
    2f70:	7723      	strb	r3, [r4, #28]
    2f72:	6923      	ldr	r3, [r4, #16]
    2f74:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f78:	d1fb      	bne.n	2f72 <_timer_init+0x172>
    2f7a:	2300      	movs	r3, #0
    2f7c:	7763      	strb	r3, [r4, #29]
    2f7e:	6923      	ldr	r3, [r4, #16]
    2f80:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f84:	d1fb      	bne.n	2f7e <_timer_init+0x17e>
    2f86:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f8a:	009a      	lsls	r2, r3, #2
    2f8c:	4b07      	ldr	r3, [pc, #28]	; (2fac <_timer_init+0x1ac>)
    2f8e:	4413      	add	r3, r2
    2f90:	7edb      	ldrb	r3, [r3, #27]
    2f92:	76e3      	strb	r3, [r4, #27]
    2f94:	6923      	ldr	r3, [r4, #16]
    2f96:	f013 0f20 	tst.w	r3, #32
    2f9a:	d1fb      	bne.n	2f94 <_timer_init+0x194>
    2f9c:	e78d      	b.n	2eba <_timer_init+0xba>
    2f9e:	bf00      	nop
    2fa0:	00002d91 	.word	0x00002d91
    2fa4:	000044f0 	.word	0x000044f0
    2fa8:	00001e41 	.word	0x00001e41
    2fac:	000044cc 	.word	0x000044cc
    2fb0:	00002d79 	.word	0x00002d79
    2fb4:	e000e100 	.word	0xe000e100

00002fb8 <_timer_start>:
    2fb8:	68c2      	ldr	r2, [r0, #12]
    2fba:	6813      	ldr	r3, [r2, #0]
    2fbc:	f043 0302 	orr.w	r3, r3, #2
    2fc0:	6013      	str	r3, [r2, #0]
    2fc2:	6913      	ldr	r3, [r2, #16]
    2fc4:	f013 0f03 	tst.w	r3, #3
    2fc8:	d1fb      	bne.n	2fc2 <_timer_start+0xa>
    2fca:	4770      	bx	lr

00002fcc <_timer_is_started>:
    2fcc:	68c2      	ldr	r2, [r0, #12]
    2fce:	6913      	ldr	r3, [r2, #16]
    2fd0:	f013 0f03 	tst.w	r3, #3
    2fd4:	d1fb      	bne.n	2fce <_timer_is_started+0x2>
    2fd6:	6810      	ldr	r0, [r2, #0]
    2fd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2fdc:	4770      	bx	lr

00002fde <_tc_get_timer>:
    2fde:	2000      	movs	r0, #0
    2fe0:	4770      	bx	lr
	...

00002fe4 <_timer_set_irq>:
    2fe4:	b510      	push	{r4, lr}
    2fe6:	68c0      	ldr	r0, [r0, #12]
    2fe8:	4b08      	ldr	r3, [pc, #32]	; (300c <_timer_set_irq+0x28>)
    2fea:	4798      	blx	r3
    2fec:	4604      	mov	r4, r0
    2fee:	f240 1213 	movw	r2, #275	; 0x113
    2ff2:	4907      	ldr	r1, [pc, #28]	; (3010 <_timer_set_irq+0x2c>)
    2ff4:	2001      	movs	r0, #1
    2ff6:	4b07      	ldr	r3, [pc, #28]	; (3014 <_timer_set_irq+0x30>)
    2ff8:	4798      	blx	r3
    2ffa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2ffe:	00a2      	lsls	r2, r4, #2
    3000:	4b05      	ldr	r3, [pc, #20]	; (3018 <_timer_set_irq+0x34>)
    3002:	4413      	add	r3, r2
    3004:	7c98      	ldrb	r0, [r3, #18]
    3006:	4b05      	ldr	r3, [pc, #20]	; (301c <_timer_set_irq+0x38>)
    3008:	4798      	blx	r3
    300a:	bd10      	pop	{r4, pc}
    300c:	00002d91 	.word	0x00002d91
    3010:	000044f0 	.word	0x000044f0
    3014:	00001e41 	.word	0x00001e41
    3018:	000044cc 	.word	0x000044cc
    301c:	00002339 	.word	0x00002339

00003020 <TC2_Handler>:
    3020:	b508      	push	{r3, lr}
    3022:	4b02      	ldr	r3, [pc, #8]	; (302c <TC2_Handler+0xc>)
    3024:	6818      	ldr	r0, [r3, #0]
    3026:	4b02      	ldr	r3, [pc, #8]	; (3030 <TC2_Handler+0x10>)
    3028:	4798      	blx	r3
    302a:	bd08      	pop	{r3, pc}
    302c:	20000128 	.word	0x20000128
    3030:	00002d61 	.word	0x00002d61

00003034 <TIMER_1_init>:
    3034:	4b25      	ldr	r3, [pc, #148]	; (30cc <TIMER_1_init+0x98>)
    3036:	691b      	ldr	r3, [r3, #16]
    3038:	f013 0f01 	tst.w	r3, #1
    303c:	d120      	bne.n	3080 <TIMER_1_init+0x4c>
    303e:	4b23      	ldr	r3, [pc, #140]	; (30cc <TIMER_1_init+0x98>)
    3040:	691b      	ldr	r3, [r3, #16]
    3042:	f013 0f03 	tst.w	r3, #3
    3046:	d1fa      	bne.n	303e <TIMER_1_init+0xa>
    3048:	4b20      	ldr	r3, [pc, #128]	; (30cc <TIMER_1_init+0x98>)
    304a:	681b      	ldr	r3, [r3, #0]
    304c:	f013 0f02 	tst.w	r3, #2
    3050:	d00e      	beq.n	3070 <TIMER_1_init+0x3c>
    3052:	4a1e      	ldr	r2, [pc, #120]	; (30cc <TIMER_1_init+0x98>)
    3054:	6813      	ldr	r3, [r2, #0]
    3056:	f023 0302 	bic.w	r3, r3, #2
    305a:	6013      	str	r3, [r2, #0]
    305c:	4b1b      	ldr	r3, [pc, #108]	; (30cc <TIMER_1_init+0x98>)
    305e:	691b      	ldr	r3, [r3, #16]
    3060:	f013 0f03 	tst.w	r3, #3
    3064:	d1fa      	bne.n	305c <TIMER_1_init+0x28>
    3066:	4b19      	ldr	r3, [pc, #100]	; (30cc <TIMER_1_init+0x98>)
    3068:	691b      	ldr	r3, [r3, #16]
    306a:	f013 0f02 	tst.w	r3, #2
    306e:	d1fa      	bne.n	3066 <TIMER_1_init+0x32>
    3070:	2201      	movs	r2, #1
    3072:	4b16      	ldr	r3, [pc, #88]	; (30cc <TIMER_1_init+0x98>)
    3074:	601a      	str	r2, [r3, #0]
    3076:	4b15      	ldr	r3, [pc, #84]	; (30cc <TIMER_1_init+0x98>)
    3078:	691b      	ldr	r3, [r3, #16]
    307a:	f013 0f03 	tst.w	r3, #3
    307e:	d1fa      	bne.n	3076 <TIMER_1_init+0x42>
    3080:	4b12      	ldr	r3, [pc, #72]	; (30cc <TIMER_1_init+0x98>)
    3082:	691b      	ldr	r3, [r3, #16]
    3084:	f013 0f01 	tst.w	r3, #1
    3088:	d1fa      	bne.n	3080 <TIMER_1_init+0x4c>
    308a:	f44f 3241 	mov.w	r2, #197632	; 0x30400
    308e:	4b0f      	ldr	r3, [pc, #60]	; (30cc <TIMER_1_init+0x98>)
    3090:	601a      	str	r2, [r3, #0]
    3092:	4b0e      	ldr	r3, [pc, #56]	; (30cc <TIMER_1_init+0x98>)
    3094:	691b      	ldr	r3, [r3, #16]
    3096:	f013 0f03 	tst.w	r3, #3
    309a:	d1fa      	bne.n	3092 <TIMER_1_init+0x5e>
    309c:	4b0b      	ldr	r3, [pc, #44]	; (30cc <TIMER_1_init+0x98>)
    309e:	2200      	movs	r2, #0
    30a0:	715a      	strb	r2, [r3, #5]
    30a2:	22ff      	movs	r2, #255	; 0xff
    30a4:	711a      	strb	r2, [r3, #4]
    30a6:	2201      	movs	r2, #1
    30a8:	73da      	strb	r2, [r3, #15]
    30aa:	2225      	movs	r2, #37	; 0x25
    30ac:	80da      	strh	r2, [r3, #6]
    30ae:	2211      	movs	r2, #17
    30b0:	725a      	strb	r2, [r3, #9]
    30b2:	22ee      	movs	r2, #238	; 0xee
    30b4:	721a      	strb	r2, [r3, #8]
    30b6:	681a      	ldr	r2, [r3, #0]
    30b8:	f042 0202 	orr.w	r2, r2, #2
    30bc:	601a      	str	r2, [r3, #0]
    30be:	4b03      	ldr	r3, [pc, #12]	; (30cc <TIMER_1_init+0x98>)
    30c0:	691b      	ldr	r3, [r3, #16]
    30c2:	f013 0f03 	tst.w	r3, #3
    30c6:	d1fa      	bne.n	30be <TIMER_1_init+0x8a>
    30c8:	2000      	movs	r0, #0
    30ca:	4770      	bx	lr
    30cc:	40003800 	.word	0x40003800

000030d0 <TIMER_0_init>:
    30d0:	4b2a      	ldr	r3, [pc, #168]	; (317c <TIMER_0_init+0xac>)
    30d2:	691b      	ldr	r3, [r3, #16]
    30d4:	f013 0f01 	tst.w	r3, #1
    30d8:	d120      	bne.n	311c <TIMER_0_init+0x4c>
    30da:	4b28      	ldr	r3, [pc, #160]	; (317c <TIMER_0_init+0xac>)
    30dc:	691b      	ldr	r3, [r3, #16]
    30de:	f013 0f03 	tst.w	r3, #3
    30e2:	d1fa      	bne.n	30da <TIMER_0_init+0xa>
    30e4:	4b25      	ldr	r3, [pc, #148]	; (317c <TIMER_0_init+0xac>)
    30e6:	681b      	ldr	r3, [r3, #0]
    30e8:	f013 0f02 	tst.w	r3, #2
    30ec:	d00e      	beq.n	310c <TIMER_0_init+0x3c>
    30ee:	4a23      	ldr	r2, [pc, #140]	; (317c <TIMER_0_init+0xac>)
    30f0:	6813      	ldr	r3, [r2, #0]
    30f2:	f023 0302 	bic.w	r3, r3, #2
    30f6:	6013      	str	r3, [r2, #0]
    30f8:	4b20      	ldr	r3, [pc, #128]	; (317c <TIMER_0_init+0xac>)
    30fa:	691b      	ldr	r3, [r3, #16]
    30fc:	f013 0f03 	tst.w	r3, #3
    3100:	d1fa      	bne.n	30f8 <TIMER_0_init+0x28>
    3102:	4b1e      	ldr	r3, [pc, #120]	; (317c <TIMER_0_init+0xac>)
    3104:	691b      	ldr	r3, [r3, #16]
    3106:	f013 0f02 	tst.w	r3, #2
    310a:	d1fa      	bne.n	3102 <TIMER_0_init+0x32>
    310c:	2201      	movs	r2, #1
    310e:	4b1b      	ldr	r3, [pc, #108]	; (317c <TIMER_0_init+0xac>)
    3110:	601a      	str	r2, [r3, #0]
    3112:	4b1a      	ldr	r3, [pc, #104]	; (317c <TIMER_0_init+0xac>)
    3114:	691b      	ldr	r3, [r3, #16]
    3116:	f013 0f03 	tst.w	r3, #3
    311a:	d1fa      	bne.n	3112 <TIMER_0_init+0x42>
    311c:	4b17      	ldr	r3, [pc, #92]	; (317c <TIMER_0_init+0xac>)
    311e:	691b      	ldr	r3, [r3, #16]
    3120:	f013 0f01 	tst.w	r3, #1
    3124:	d1fa      	bne.n	311c <TIMER_0_init+0x4c>
    3126:	f44f 6280 	mov.w	r2, #1024	; 0x400
    312a:	4b14      	ldr	r3, [pc, #80]	; (317c <TIMER_0_init+0xac>)
    312c:	601a      	str	r2, [r3, #0]
    312e:	4b13      	ldr	r3, [pc, #76]	; (317c <TIMER_0_init+0xac>)
    3130:	691b      	ldr	r3, [r3, #16]
    3132:	f013 0f03 	tst.w	r3, #3
    3136:	d1fa      	bne.n	312e <TIMER_0_init+0x5e>
    3138:	4b10      	ldr	r3, [pc, #64]	; (317c <TIMER_0_init+0xac>)
    313a:	2200      	movs	r2, #0
    313c:	715a      	strb	r2, [r3, #5]
    313e:	22ff      	movs	r2, #255	; 0xff
    3140:	711a      	strb	r2, [r3, #4]
    3142:	2201      	movs	r2, #1
    3144:	731a      	strb	r2, [r3, #12]
    3146:	73da      	strb	r2, [r3, #15]
    3148:	f641 0269 	movw	r2, #6249	; 0x1869
    314c:	839a      	strh	r2, [r3, #28]
    314e:	4b0b      	ldr	r3, [pc, #44]	; (317c <TIMER_0_init+0xac>)
    3150:	691b      	ldr	r3, [r3, #16]
    3152:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3156:	d1fa      	bne.n	314e <TIMER_0_init+0x7e>
    3158:	4b08      	ldr	r3, [pc, #32]	; (317c <TIMER_0_init+0xac>)
    315a:	2205      	movs	r2, #5
    315c:	80da      	strh	r2, [r3, #6]
    315e:	2201      	movs	r2, #1
    3160:	725a      	strb	r2, [r3, #9]
    3162:	22fe      	movs	r2, #254	; 0xfe
    3164:	721a      	strb	r2, [r3, #8]
    3166:	681a      	ldr	r2, [r3, #0]
    3168:	f042 0202 	orr.w	r2, r2, #2
    316c:	601a      	str	r2, [r3, #0]
    316e:	4b03      	ldr	r3, [pc, #12]	; (317c <TIMER_0_init+0xac>)
    3170:	691b      	ldr	r3, [r3, #16]
    3172:	f013 0f03 	tst.w	r3, #3
    3176:	d1fa      	bne.n	316e <TIMER_0_init+0x9e>
    3178:	2000      	movs	r0, #0
    317a:	4770      	bx	lr
    317c:	40003c00 	.word	0x40003c00

00003180 <TIMER_2_task_1kHz_cb>:
	gpio_set_pin_level(ENCODER_SPI_NCS, true);
}

/*Callback function for EtherCAT QSPI */
static void TIMER_2_task_1kHz_cb(const struct timer_task *const timer_task)
{
    3180:	b508      	push	{r3, lr}
  	write_16_DWORDS_data();
    3182:	4b05      	ldr	r3, [pc, #20]	; (3198 <TIMER_2_task_1kHz_cb+0x18>)
    3184:	4798      	blx	r3
  	config_fifo();
    3186:	4b05      	ldr	r3, [pc, #20]	; (319c <TIMER_2_task_1kHz_cb+0x1c>)
    3188:	4798      	blx	r3
  	read_16_DWORDS_data();
    318a:	4b05      	ldr	r3, [pc, #20]	; (31a0 <TIMER_2_task_1kHz_cb+0x20>)
    318c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    318e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3192:	4b04      	ldr	r3, [pc, #16]	; (31a4 <TIMER_2_task_1kHz_cb+0x24>)
    3194:	61da      	str	r2, [r3, #28]
    3196:	bd08      	pop	{r3, pc}
    3198:	0000394d 	.word	0x0000394d
    319c:	00003909 	.word	0x00003909
    31a0:	00003961 	.word	0x00003961
    31a4:	41008000 	.word	0x41008000

000031a8 <complete_cb_SPI_ENC>:
{
    31a8:	b510      	push	{r4, lr}
	new_encoder_reading_flag = 1;
    31aa:	4a09      	ldr	r2, [pc, #36]	; (31d0 <complete_cb_SPI_ENC+0x28>)
    31ac:	4613      	mov	r3, r2
    31ae:	2101      	movs	r1, #1
    31b0:	f843 1b04 	str.w	r1, [r3], #4
	conversion_joint_encoder(encoder_spi_reply, &encoder_joint_pos, &encoder_joint_warning_bit, &encoder_joint_error_bit);
    31b4:	4807      	ldr	r0, [pc, #28]	; (31d4 <complete_cb_SPI_ENC+0x2c>)
    31b6:	3208      	adds	r2, #8
    31b8:	4601      	mov	r1, r0
    31ba:	3004      	adds	r0, #4
    31bc:	4c06      	ldr	r4, [pc, #24]	; (31d8 <complete_cb_SPI_ENC+0x30>)
    31be:	47a0      	blx	r4
	delay_us(10); //can be removed
    31c0:	200a      	movs	r0, #10
    31c2:	4b06      	ldr	r3, [pc, #24]	; (31dc <complete_cb_SPI_ENC+0x34>)
    31c4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    31c6:	2204      	movs	r2, #4
    31c8:	4b05      	ldr	r3, [pc, #20]	; (31e0 <complete_cb_SPI_ENC+0x38>)
    31ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    31ce:	bd10      	pop	{r4, pc}
    31d0:	20000004 	.word	0x20000004
    31d4:	2000012c 	.word	0x2000012c
    31d8:	000015b9 	.word	0x000015b9
    31dc:	00001851 	.word	0x00001851
    31e0:	41008000 	.word	0x41008000

000031e4 <TC0_Handler>:
	if (TC0->COUNT16.INTFLAG.bit.MC0)
    31e4:	4b19      	ldr	r3, [pc, #100]	; (324c <TC0_Handler+0x68>)
    31e6:	7a9b      	ldrb	r3, [r3, #10]
    31e8:	f013 0f10 	tst.w	r3, #16
    31ec:	d115      	bne.n	321a <TC0_Handler+0x36>
	} else if (TC0->COUNT16.INTFLAG.bit.OVF){
    31ee:	4b17      	ldr	r3, [pc, #92]	; (324c <TC0_Handler+0x68>)
    31f0:	7a9b      	ldrb	r3, [r3, #10]
    31f2:	f013 0f01 	tst.w	r3, #1
    31f6:	d021      	beq.n	323c <TC0_Handler+0x58>
		TC0->COUNT16.INTFLAG.bit.OVF = 1;
    31f8:	4b14      	ldr	r3, [pc, #80]	; (324c <TC0_Handler+0x68>)
    31fa:	7a9a      	ldrb	r2, [r3, #10]
    31fc:	f042 0201 	orr.w	r2, r2, #1
    3200:	729a      	strb	r2, [r3, #10]
		CC0_value = TC0->COUNT16.CC[0].reg;
    3202:	8b9a      	ldrh	r2, [r3, #28]
    3204:	b292      	uxth	r2, r2
    3206:	4912      	ldr	r1, [pc, #72]	; (3250 <TC0_Handler+0x6c>)
    3208:	800a      	strh	r2, [r1, #0]
		CC1_value = TC0->COUNT16.CC[1].reg;
    320a:	8bdb      	ldrh	r3, [r3, #30]
    320c:	b29b      	uxth	r3, r3
    320e:	4a11      	ldr	r2, [pc, #68]	; (3254 <TC0_Handler+0x70>)
    3210:	8013      	strh	r3, [r2, #0]
		CC0_value  = 0xFFFF;
    3212:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3216:	800b      	strh	r3, [r1, #0]
    3218:	e010      	b.n	323c <TC0_Handler+0x58>
		CC0_value = TC0->COUNT16.CC[0].reg;
    321a:	4b0c      	ldr	r3, [pc, #48]	; (324c <TC0_Handler+0x68>)
    321c:	8b9a      	ldrh	r2, [r3, #28]
    321e:	b292      	uxth	r2, r2
    3220:	490b      	ldr	r1, [pc, #44]	; (3250 <TC0_Handler+0x6c>)
    3222:	800a      	strh	r2, [r1, #0]
		CC1_value = TC0->COUNT16.CC[1].reg;
    3224:	8bda      	ldrh	r2, [r3, #30]
    3226:	b292      	uxth	r2, r2
    3228:	490a      	ldr	r1, [pc, #40]	; (3254 <TC0_Handler+0x70>)
    322a:	800a      	strh	r2, [r1, #0]
		TC0->COUNT16.INTFLAG.bit.MC0 = 1;
    322c:	7a9a      	ldrb	r2, [r3, #10]
    322e:	f042 0210 	orr.w	r2, r2, #16
    3232:	729a      	strb	r2, [r3, #10]
		TC0->COUNT16.INTFLAG.bit.MC1 = 1;
    3234:	7a9a      	ldrb	r2, [r3, #10]
    3236:	f042 0220 	orr.w	r2, r2, #32
    323a:	729a      	strb	r2, [r3, #10]
	read_encoder_flag = 1;
    323c:	4b06      	ldr	r3, [pc, #24]	; (3258 <TC0_Handler+0x74>)
    323e:	2201      	movs	r2, #1
    3240:	60da      	str	r2, [r3, #12]
	new_speed_value_available_flag = 1;
    3242:	741a      	strb	r2, [r3, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_INTFLAG_ERR_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    3244:	2202      	movs	r2, #2
    3246:	4b01      	ldr	r3, [pc, #4]	; (324c <TC0_Handler+0x68>)
    3248:	729a      	strb	r2, [r3, #10]
    324a:	4770      	bx	lr
    324c:	40003800 	.word	0x40003800
    3250:	200004d8 	.word	0x200004d8
    3254:	200004c4 	.word	0x200004c4
    3258:	2000012c 	.word	0x2000012c

0000325c <ADC0_1_Handler>:
	if(ADC0->INPUTCTRL.reg == INPUTCTRL_REG_TS)
    325c:	4b1f      	ldr	r3, [pc, #124]	; (32dc <ADC0_1_Handler+0x80>)
    325e:	889b      	ldrh	r3, [r3, #4]
    3260:	b29b      	uxth	r3, r3
    3262:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
    3266:	d023      	beq.n	32b0 <ADC0_1_Handler+0x54>
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    3268:	4b1c      	ldr	r3, [pc, #112]	; (32dc <ADC0_1_Handler+0x80>)
    326a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    326e:	b292      	uxth	r2, r2
		ADC_IC_value = hri_adc_read_RESULT_reg(ADC0);
    3270:	491b      	ldr	r1, [pc, #108]	; (32e0 <ADC0_1_Handler+0x84>)
    3272:	800a      	strh	r2, [r1, #0]
    3274:	4a1b      	ldr	r2, [pc, #108]	; (32e4 <ADC0_1_Handler+0x88>)
    3276:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
    327a:	b292      	uxth	r2, r2
		ADC_IB_value = hri_adc_read_RESULT_reg(ADC1);
    327c:	491a      	ldr	r1, [pc, #104]	; (32e8 <ADC0_1_Handler+0x8c>)
    327e:	800a      	strh	r2, [r1, #0]
		ADC0->INPUTCTRL.reg = INPUTCTRL_REG_TS;
    3280:	f44f 72c0 	mov.w	r2, #384	; 0x180
    3284:	809a      	strh	r2, [r3, #4]
		ADC0->SWTRIG.bit.FLUSH = 1;
    3286:	7d1a      	ldrb	r2, [r3, #20]
    3288:	f042 0201 	orr.w	r2, r2, #1
    328c:	751a      	strb	r2, [r3, #20]
		while (ADC1->SYNCBUSY.bit.SWTRIG == 1){}
    328e:	4b15      	ldr	r3, [pc, #84]	; (32e4 <ADC0_1_Handler+0x88>)
    3290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3292:	f413 6f00 	tst.w	r3, #2048	; 0x800
    3296:	d1fa      	bne.n	328e <ADC0_1_Handler+0x32>
		new_current_value_available_flag = 1;
    3298:	2201      	movs	r2, #1
    329a:	4b14      	ldr	r3, [pc, #80]	; (32ec <ADC0_1_Handler+0x90>)
    329c:	761a      	strb	r2, [r3, #24]
	((Adc *)hw)->INTFLAG.reg = mask;
    329e:	23ff      	movs	r3, #255	; 0xff
    32a0:	4a0e      	ldr	r2, [pc, #56]	; (32dc <ADC0_1_Handler+0x80>)
    32a2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    32a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    32aa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    32ae:	4770      	bx	lr
	return ((Adc *)hw)->RESULT.reg;
    32b0:	4b0a      	ldr	r3, [pc, #40]	; (32dc <ADC0_1_Handler+0x80>)
    32b2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
		ADC_TS_value = hri_adc_read_RESULT_reg(ADC0);
    32b6:	b212      	sxth	r2, r2
    32b8:	490d      	ldr	r1, [pc, #52]	; (32f0 <ADC0_1_Handler+0x94>)
    32ba:	800a      	strh	r2, [r1, #0]
		ADC0->INPUTCTRL.reg = INPUTCTRL_REG_IC;
    32bc:	f641 0203 	movw	r2, #6147	; 0x1803
    32c0:	809a      	strh	r2, [r3, #4]
		ADC0->SWTRIG.bit.FLUSH = 1;
    32c2:	7d1a      	ldrb	r2, [r3, #20]
    32c4:	f042 0201 	orr.w	r2, r2, #1
    32c8:	751a      	strb	r2, [r3, #20]
		while (ADC0->SYNCBUSY.bit.SWTRIG == 1){}
    32ca:	4b04      	ldr	r3, [pc, #16]	; (32dc <ADC0_1_Handler+0x80>)
    32cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    32ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
    32d2:	d1fa      	bne.n	32ca <ADC0_1_Handler+0x6e>
		new_torque_value_available_flag = 1;
    32d4:	2201      	movs	r2, #1
    32d6:	4b05      	ldr	r3, [pc, #20]	; (32ec <ADC0_1_Handler+0x90>)
    32d8:	615a      	str	r2, [r3, #20]
    32da:	e7e0      	b.n	329e <ADC0_1_Handler+0x42>
    32dc:	43001c00 	.word	0x43001c00
    32e0:	200004b8 	.word	0x200004b8
    32e4:	43002000 	.word	0x43002000
    32e8:	200004da 	.word	0x200004da
    32ec:	2000012c 	.word	0x2000012c
    32f0:	200004cc 	.word	0x200004cc

000032f4 <ADC1_1_Handler>:
{
    32f4:	4770      	bx	lr
	...

000032f8 <current_selector>:
/************************************************************************/
/* Subfunctions                                                        */
/************************************************************************/
float current_selector(uint32_t current_commutation_state)
{
	switch(current_commutation_state)
    32f8:	2805      	cmp	r0, #5
    32fa:	d820      	bhi.n	333e <current_selector+0x46>
    32fc:	e8df f000 	tbb	[pc, r0]
    3300:	0b1c1619 	.word	0x0b1c1619
    3304:	030e      	.short	0x030e
	{
		case 5:
			return (-currentC_value);
    3306:	4b0f      	ldr	r3, [pc, #60]	; (3344 <current_selector+0x4c>)
    3308:	edd3 7a00 	vldr	s15, [r3]
    330c:	eef1 7a67 	vneg.f32	s15, s15
    3310:	ee17 0a90 	vmov	r0, s15
    3314:	4770      	bx	lr
			break;
		
		case 3:
			return (currentC_value);
    3316:	4b0b      	ldr	r3, [pc, #44]	; (3344 <current_selector+0x4c>)
    3318:	6818      	ldr	r0, [r3, #0]
    331a:	4770      	bx	lr
			break;
		
		case 4:
			return (-currentB_value);
    331c:	4b0a      	ldr	r3, [pc, #40]	; (3348 <current_selector+0x50>)
    331e:	edd3 7a00 	vldr	s15, [r3]
    3322:	eef1 7a67 	vneg.f32	s15, s15
    3326:	ee17 0a90 	vmov	r0, s15
    332a:	4770      	bx	lr
			break;
		
		case 1:
			return (currentB_value);
    332c:	4b06      	ldr	r3, [pc, #24]	; (3348 <current_selector+0x50>)
    332e:	6818      	ldr	r0, [r3, #0]
    3330:	4770      	bx	lr
			break;
		
		case 0:
			return (currentB_value);
    3332:	4b05      	ldr	r3, [pc, #20]	; (3348 <current_selector+0x50>)
    3334:	6818      	ldr	r0, [r3, #0]
    3336:	4770      	bx	lr
			break;
		
		case 2:
			return (currentC_value);
    3338:	4b02      	ldr	r3, [pc, #8]	; (3344 <current_selector+0x4c>)
    333a:	6818      	ldr	r0, [r3, #0]
    333c:	4770      	bx	lr
			break;
			
		default:
			return 0;
    333e:	2000      	movs	r0, #0
	}
}
    3340:	4770      	bx	lr
    3342:	bf00      	nop
    3344:	200004bc 	.word	0x200004bc
    3348:	200004f8 	.word	0x200004f8
    334c:	00000000 	.word	0x00000000

00003350 <main>:


/************************************************************************/
/* Main Function                                                        */
/************************************************************************/
int main(void){
    3350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3354:	ed2d 8b02 	vpush	{d8}
    3358:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();	
    335a:	4ba7      	ldr	r3, [pc, #668]	; (35f8 <main+0x2a8>)
    335c:	4798      	blx	r3

	/*enable CCL*/
	CCL->CTRL.bit.ENABLE = 1;
    335e:	4aa7      	ldr	r2, [pc, #668]	; (35fc <main+0x2ac>)
    3360:	7813      	ldrb	r3, [r2, #0]
    3362:	f043 0302 	orr.w	r3, r3, #2
    3366:	7013      	strb	r3, [r2, #0]
	
	/*set TCC1 CC0 to overwrite all WO/x*/
	TCC1->CTRLA.bit.ENABLE = 0;
    3368:	4ba5      	ldr	r3, [pc, #660]	; (3600 <main+0x2b0>)
    336a:	681a      	ldr	r2, [r3, #0]
    336c:	f36f 0241 	bfc	r2, #1, #1
    3370:	601a      	str	r2, [r3, #0]
	TCC1->WEXCTRL.bit.OTMX = 0x2;
    3372:	695a      	ldr	r2, [r3, #20]
    3374:	2102      	movs	r1, #2
    3376:	f361 0201 	bfi	r2, r1, #0, #2
    337a:	615a      	str	r2, [r3, #20]
	TCC1->CTRLA.bit.ENABLE = 1;
    337c:	681a      	ldr	r2, [r3, #0]
    337e:	430a      	orrs	r2, r1
    3380:	601a      	str	r2, [r3, #0]
	
	
	/*ADC Configurations*/
	//Disable ADC Freerun
	ADC0->CTRLB.bit.FREERUN = 0;
    3382:	4ba0      	ldr	r3, [pc, #640]	; (3604 <main+0x2b4>)
    3384:	88da      	ldrh	r2, [r3, #6]
    3386:	f36f 0241 	bfc	r2, #1, #1
    338a:	80da      	strh	r2, [r3, #6]
	ADC1->CTRLB.bit.FREERUN = 0;
    338c:	4a9e      	ldr	r2, [pc, #632]	; (3608 <main+0x2b8>)
    338e:	88d1      	ldrh	r1, [r2, #6]
    3390:	f36f 0141 	bfc	r1, #1, #1
    3394:	80d1      	strh	r1, [r2, #6]
	
	//Initialize ADC0 for current A sensing
	ADC0->INPUTCTRL.reg = INPUTCTRL_REG_IC;
    3396:	f641 0103 	movw	r1, #6147	; 0x1803
    339a:	8099      	strh	r1, [r3, #4]
	
	//configure ADC interrupt
	ADC0->INTENSET.bit.RESRDY = 1;
    339c:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
    33a0:	f041 0101 	orr.w	r1, r1, #1
    33a4:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
	ADC0->EVCTRL.bit.RESRDYEO = 1;
    33a8:	7899      	ldrb	r1, [r3, #2]
    33aa:	f041 0110 	orr.w	r1, r1, #16
    33ae:	7099      	strb	r1, [r3, #2]
	ADC0->CTRLA.bit.ENABLE = 1;
    33b0:	8818      	ldrh	r0, [r3, #0]
    33b2:	f040 0102 	orr.w	r1, r0, #2
    33b6:	8019      	strh	r1, [r3, #0]
//	ADC1->INTENSET.bit.RESRDY = 1;
	ADC1->EVCTRL.bit.RESRDYEO = 1;
    33b8:	7893      	ldrb	r3, [r2, #2]
    33ba:	f043 0310 	orr.w	r3, r3, #16
    33be:	7093      	strb	r3, [r2, #2]
	ADC1->CTRLA.bit.ENABLE = 1;
    33c0:	8811      	ldrh	r1, [r2, #0]
    33c2:	f041 0302 	orr.w	r3, r1, #2
    33c6:	8013      	strh	r3, [r2, #0]

	init_PWM();
    33c8:	4b90      	ldr	r3, [pc, #576]	; (360c <main+0x2bc>)
    33ca:	4798      	blx	r3
	init_currentPID();
    33cc:	4b90      	ldr	r3, [pc, #576]	; (3610 <main+0x2c0>)
    33ce:	4798      	blx	r3
	init_speedPID();
    33d0:	4b90      	ldr	r3, [pc, #576]	; (3614 <main+0x2c4>)
    33d2:	4798      	blx	r3
	init_posPID();
    33d4:	4b90      	ldr	r3, [pc, #576]	; (3618 <main+0x2c8>)
    33d6:	4798      	blx	r3
	init_torquePID();
    33d8:	4b90      	ldr	r3, [pc, #576]	; (361c <main+0x2cc>)
    33da:	4798      	blx	r3
    33dc:	4c90      	ldr	r4, [pc, #576]	; (3620 <main+0x2d0>)
    33de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    33e2:	61a3      	str	r3, [r4, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    33e4:	60a3      	str	r3, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    33e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33ea:	62a3      	str	r3, [r4, #40]	; 0x28
    33ec:	4b8d      	ldr	r3, [pc, #564]	; (3624 <main+0x2d4>)
    33ee:	62a3      	str	r3, [r4, #40]	; 0x28
    33f0:	4b8d      	ldr	r3, [pc, #564]	; (3628 <main+0x2d8>)
    33f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    33f6:	60da      	str	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33f8:	2260      	movs	r2, #96	; 0x60
    33fa:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33fe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    3402:	60d9      	str	r1, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3404:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    340c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    340e:	b662      	cpsie	i
// 	usart_sync_get_io_descriptor(&USART_COM, &io_comp);
// 	usart_sync_enable(&USART_COM);
	
	/*Init SPI for Joint encoder*/
	struct io_descriptor *io_enc_spi;
	spi_m_async_get_io_descriptor(&SPI_ENC, &io_enc_spi);
    3410:	4d86      	ldr	r5, [pc, #536]	; (362c <main+0x2dc>)
    3412:	a901      	add	r1, sp, #4
    3414:	4628      	mov	r0, r5
    3416:	4b86      	ldr	r3, [pc, #536]	; (3630 <main+0x2e0>)
    3418:	4798      	blx	r3
	spi_m_async_register_callback(&SPI_ENC, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)complete_cb_SPI_ENC);
    341a:	4a86      	ldr	r2, [pc, #536]	; (3634 <main+0x2e4>)
    341c:	2100      	movs	r1, #0
    341e:	4628      	mov	r0, r5
    3420:	4b85      	ldr	r3, [pc, #532]	; (3638 <main+0x2e8>)
    3422:	4798      	blx	r3
	spi_m_async_enable(&SPI_ENC);
    3424:	4628      	mov	r0, r5
    3426:	4b85      	ldr	r3, [pc, #532]	; (363c <main+0x2ec>)
    3428:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    342a:	2304      	movs	r3, #4
    342c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	gpio_set_pin_level(ENCODER_SPI_NCS, true);
	
	
	/*ETHERCAT NEW*/
	init_standard_messages();
    3430:	4b83      	ldr	r3, [pc, #524]	; (3640 <main+0x2f0>)
    3432:	4798      	blx	r3
	
	qspi_sync_enable(&QUAD_SPI_0);
    3434:	4883      	ldr	r0, [pc, #524]	; (3644 <main+0x2f4>)
    3436:	4b84      	ldr	r3, [pc, #528]	; (3648 <main+0x2f8>)
    3438:	4798      	blx	r3
	delay_ms(25);
    343a:	2019      	movs	r0, #25
    343c:	4b83      	ldr	r3, [pc, #524]	; (364c <main+0x2fc>)
    343e:	4798      	blx	r3
	//initialize ethercat register
	abort_fifo();
    3440:	4b83      	ldr	r3, [pc, #524]	; (3650 <main+0x300>)
    3442:	4798      	blx	r3
	clear_rdram();
    3444:	4b83      	ldr	r3, [pc, #524]	; (3654 <main+0x304>)
    3446:	4798      	blx	r3
	
	/* Set up task with 1kHz repetition */
	TIMER_2_task_1kHz.interval = 1;	// every millisecond
    3448:	4983      	ldr	r1, [pc, #524]	; (3658 <main+0x308>)
    344a:	2301      	movs	r3, #1
    344c:	624b      	str	r3, [r1, #36]	; 0x24
	TIMER_2_task_1kHz.cb       = TIMER_2_task_1kHz_cb;
    344e:	4a83      	ldr	r2, [pc, #524]	; (365c <main+0x30c>)
    3450:	628a      	str	r2, [r1, #40]	; 0x28
	TIMER_2_task_1kHz.mode     = TIMER_TASK_REPEAT;
    3452:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c

	timer_add_task(&TIMER_2, &TIMER_2_task_1kHz);
    3456:	4c82      	ldr	r4, [pc, #520]	; (3660 <main+0x310>)
    3458:	311c      	adds	r1, #28
    345a:	4620      	mov	r0, r4
    345c:	4b81      	ldr	r3, [pc, #516]	; (3664 <main+0x314>)
    345e:	4798      	blx	r3
	timer_start(&TIMER_2);
    3460:	4620      	mov	r0, r4
    3462:	4b81      	ldr	r3, [pc, #516]	; (3668 <main+0x318>)
    3464:	4798      	blx	r3

	
	/**** 
		Set PWM DUTY CYCLE to 0 for testing
	****/
	set_PWM_dutycycle(20);
    3466:	4881      	ldr	r0, [pc, #516]	; (366c <main+0x31c>)
    3468:	4b81      	ldr	r3, [pc, #516]	; (3670 <main+0x320>)
    346a:	4798      	blx	r3
    346c:	e143      	b.n	36f6 <main+0x3a6>
		
		
		/************************************************************************/
		/* Encoder Read                                                         */
		/************************************************************************/
		if(read_encoder_flag == 1 && new_encoder_reading_flag == 1)
    346e:	4b81      	ldr	r3, [pc, #516]	; (3674 <main+0x324>)
    3470:	681b      	ldr	r3, [r3, #0]
    3472:	2b01      	cmp	r3, #1
    3474:	f040 8144 	bne.w	3700 <main+0x3b0>
		{
			//reset flags
			new_encoder_reading_flag = 0;
    3478:	2300      	movs	r3, #0
    347a:	4a7e      	ldr	r2, [pc, #504]	; (3674 <main+0x324>)
    347c:	6013      	str	r3, [r2, #0]
			read_encoder_flag = 0;
    347e:	4c76      	ldr	r4, [pc, #472]	; (3658 <main+0x308>)
    3480:	60e3      	str	r3, [r4, #12]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3482:	2204      	movs	r2, #4
    3484:	4b66      	ldr	r3, [pc, #408]	; (3620 <main+0x2d0>)
    3486:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			//Print joint position on data visualization
			//print_encoder_joint_data(io_comp, &encoder_joint_pos,  &encoder_joint_warning_bit, &encoder_joint_error_bit);
			
			//pull chip select low for next read
			gpio_set_pin_level(ENCODER_SPI_NCS, false);	
			delay_us(10);
    348a:	200a      	movs	r0, #10
    348c:	4b7a      	ldr	r3, [pc, #488]	; (3678 <main+0x328>)
    348e:	4798      	blx	r3
			
			//restart reading
			io_read(io_enc_spi,encoder_spi_reply,7);
    3490:	2207      	movs	r2, #7
    3492:	1d21      	adds	r1, r4, #4
    3494:	9801      	ldr	r0, [sp, #4]
    3496:	4b79      	ldr	r3, [pc, #484]	; (367c <main+0x32c>)
    3498:	4798      	blx	r3
    349a:	e131      	b.n	3700 <main+0x3b0>
		/*Torque sensor value conversion                                        */
		/************************************************************************/
		if(new_torque_value_available_flag == 1)
		{
			//reset flag
			new_torque_value_available_flag = 0;
    349c:	4d6e      	ldr	r5, [pc, #440]	; (3658 <main+0x308>)
    349e:	2300      	movs	r3, #0
    34a0:	616b      	str	r3, [r5, #20]
			
			joint_torque = (ADC_TS_value + ADC_TS_OFFSET)*1.7*3030.3/708/2048; //max at 12bit/2, 2164.5 from 5Nm/2.31mV for 5 Nm at 3.3V input, 708 Gain of Amplifier Circuit
    34a2:	4b77      	ldr	r3, [pc, #476]	; (3680 <main+0x330>)
    34a4:	881b      	ldrh	r3, [r3, #0]
    34a6:	b21b      	sxth	r3, r3
    34a8:	ee07 3a90 	vmov	s15, r3
    34ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    34b0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
    34b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    34b8:	ee17 0a90 	vmov	r0, s15
    34bc:	4b71      	ldr	r3, [pc, #452]	; (3684 <main+0x334>)
    34be:	4798      	blx	r3
    34c0:	4c71      	ldr	r4, [pc, #452]	; (3688 <main+0x338>)
    34c2:	a345      	add	r3, pc, #276	; (adr r3, 35d8 <main+0x288>)
    34c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    34c8:	47a0      	blx	r4
    34ca:	a345      	add	r3, pc, #276	; (adr r3, 35e0 <main+0x290>)
    34cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    34d0:	47a0      	blx	r4
    34d2:	2200      	movs	r2, #0
    34d4:	4b6d      	ldr	r3, [pc, #436]	; (368c <main+0x33c>)
    34d6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 36b4 <main+0x364>
    34da:	47c0      	blx	r8
    34dc:	2200      	movs	r2, #0
    34de:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
    34e2:	47a0      	blx	r4
    34e4:	4b6a      	ldr	r3, [pc, #424]	; (3690 <main+0x340>)
    34e6:	4798      	blx	r3
    34e8:	6328      	str	r0, [r5, #48]	; 0x30
    34ea:	e10e      	b.n	370a <main+0x3ba>
		/************************************************************************/
		/* Current calculation (RMBM TO CALIBRATE!)                             */
		/************************************************************************/
		if(new_current_value_available_flag == 1)
		{	
			currentC_value = ((ADC_IC_value-1870)*3.3/4096)*10/4;; //offset
    34ec:	4b69      	ldr	r3, [pc, #420]	; (3694 <main+0x344>)
    34ee:	8818      	ldrh	r0, [r3, #0]
    34f0:	b280      	uxth	r0, r0
    34f2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 36c4 <main+0x374>
    34f6:	f2a0 704e 	subw	r0, r0, #1870	; 0x74e
    34fa:	47c0      	blx	r8
    34fc:	4c62      	ldr	r4, [pc, #392]	; (3688 <main+0x338>)
    34fe:	a33a      	add	r3, pc, #232	; (adr r3, 35e8 <main+0x298>)
    3500:	e9d3 2300 	ldrd	r2, r3, [r3]
    3504:	47a0      	blx	r4
    3506:	2200      	movs	r2, #0
    3508:	4b63      	ldr	r3, [pc, #396]	; (3698 <main+0x348>)
    350a:	47a0      	blx	r4
    350c:	2200      	movs	r2, #0
    350e:	4b63      	ldr	r3, [pc, #396]	; (369c <main+0x34c>)
    3510:	47a0      	blx	r4
    3512:	2200      	movs	r2, #0
    3514:	4b62      	ldr	r3, [pc, #392]	; (36a0 <main+0x350>)
    3516:	47a0      	blx	r4
    3518:	4d5d      	ldr	r5, [pc, #372]	; (3690 <main+0x340>)
    351a:	47a8      	blx	r5
    351c:	4b61      	ldr	r3, [pc, #388]	; (36a4 <main+0x354>)
    351e:	6018      	str	r0, [r3, #0]
			currentB_value = -((ADC_IB_value-1870)*3.3/4096)*10/4; //sensor is installed opposite!
    3520:	4b61      	ldr	r3, [pc, #388]	; (36a8 <main+0x358>)
    3522:	8818      	ldrh	r0, [r3, #0]
    3524:	b280      	uxth	r0, r0
    3526:	f2a0 704e 	subw	r0, r0, #1870	; 0x74e
    352a:	47c0      	blx	r8
    352c:	a32e      	add	r3, pc, #184	; (adr r3, 35e8 <main+0x298>)
    352e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3532:	47a0      	blx	r4
    3534:	2200      	movs	r2, #0
    3536:	4b58      	ldr	r3, [pc, #352]	; (3698 <main+0x348>)
    3538:	47a0      	blx	r4
    353a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    353e:	2200      	movs	r2, #0
    3540:	4b56      	ldr	r3, [pc, #344]	; (369c <main+0x34c>)
    3542:	4639      	mov	r1, r7
    3544:	47a0      	blx	r4
    3546:	2200      	movs	r2, #0
    3548:	4b55      	ldr	r3, [pc, #340]	; (36a0 <main+0x350>)
    354a:	47a0      	blx	r4
    354c:	47a8      	blx	r5
    354e:	4b57      	ldr	r3, [pc, #348]	; (36ac <main+0x35c>)
    3550:	6018      	str	r0, [r3, #0]
			
			//reset flags
			new_current_value_available_flag = 0;
    3552:	4b41      	ldr	r3, [pc, #260]	; (3658 <main+0x308>)
    3554:	2200      	movs	r2, #0
    3556:	761a      	strb	r2, [r3, #24]
			activate_controller_flag = 1;
    3558:	2201      	movs	r2, #1
    355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    355e:	e0da      	b.n	3716 <main+0x3c6>
		/* Speed calculation                                                    */
		/************************************************************************/
		/*calculate speed if flag is set*/
		if(new_speed_value_available_flag == 1)
		{
			if(CC0_value == 0xFFFF)
    3560:	4b53      	ldr	r3, [pc, #332]	; (36b0 <main+0x360>)
    3562:	881b      	ldrh	r3, [r3, #0]
    3564:	b29b      	uxth	r3, r3
    3566:	f64f 72ff 	movw	r2, #65535	; 0xffff
    356a:	4293      	cmp	r3, r2
    356c:	d02e      	beq.n	35cc <main+0x27c>
			{
				current_BLDC_motor_rpm  = 0; 
			}
			else 
			{
				current_BLDC_motor_rpm = 60*(12e6/(float)CC0_value)/42;
    356e:	4b50      	ldr	r3, [pc, #320]	; (36b0 <main+0x360>)
    3570:	8818      	ldrh	r0, [r3, #0]
    3572:	b280      	uxth	r0, r0
    3574:	ee07 0a90 	vmov	s15, r0
    3578:	eef8 7a67 	vcvt.f32.u32	s15, s15
    357c:	ee17 0a90 	vmov	r0, s15
    3580:	4b40      	ldr	r3, [pc, #256]	; (3684 <main+0x334>)
    3582:	4798      	blx	r3
    3584:	4c4b      	ldr	r4, [pc, #300]	; (36b4 <main+0x364>)
    3586:	4602      	mov	r2, r0
    3588:	460b      	mov	r3, r1
    358a:	a119      	add	r1, pc, #100	; (adr r1, 35f0 <main+0x2a0>)
    358c:	e9d1 0100 	ldrd	r0, r1, [r1]
    3590:	47a0      	blx	r4
    3592:	2200      	movs	r2, #0
    3594:	4b48      	ldr	r3, [pc, #288]	; (36b8 <main+0x368>)
    3596:	4d3c      	ldr	r5, [pc, #240]	; (3688 <main+0x338>)
    3598:	47a8      	blx	r5
    359a:	2200      	movs	r2, #0
    359c:	4b47      	ldr	r3, [pc, #284]	; (36bc <main+0x36c>)
    359e:	47a0      	blx	r4
    35a0:	4b3b      	ldr	r3, [pc, #236]	; (3690 <main+0x340>)
    35a2:	4798      	blx	r3
    35a4:	4b2c      	ldr	r3, [pc, #176]	; (3658 <main+0x308>)
    35a6:	6398      	str	r0, [r3, #56]	; 0x38
			}

			//direction opposite to current. Thats why minus
			current_BLDC_motor_rpm = -current_BLDC_motor_rpm * ((float)get_BLDC_direction());
    35a8:	4c2b      	ldr	r4, [pc, #172]	; (3658 <main+0x308>)
    35aa:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
    35ae:	eeb1 8a48 	vneg.f32	s16, s16
    35b2:	4b43      	ldr	r3, [pc, #268]	; (36c0 <main+0x370>)
    35b4:	4798      	blx	r3
    35b6:	ee07 0a90 	vmov	s15, r0
    35ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    35be:	ee28 8a27 	vmul.f32	s16, s16, s15
    35c2:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
			
			//reset flags
			new_speed_value_available_flag = 0;
    35c6:	2300      	movs	r3, #0
    35c8:	7423      	strb	r3, [r4, #16]
    35ca:	e0aa      	b.n	3722 <main+0x3d2>
				current_BLDC_motor_rpm  = 0; 
    35cc:	2200      	movs	r2, #0
    35ce:	4b22      	ldr	r3, [pc, #136]	; (3658 <main+0x308>)
    35d0:	639a      	str	r2, [r3, #56]	; 0x38
    35d2:	e7e9      	b.n	35a8 <main+0x258>
    35d4:	f3af 8000 	nop.w
    35d8:	33333333 	.word	0x33333333
    35dc:	3ffb3333 	.word	0x3ffb3333
    35e0:	9999999a 	.word	0x9999999a
    35e4:	40a7ac99 	.word	0x40a7ac99
    35e8:	66666666 	.word	0x66666666
    35ec:	400a6666 	.word	0x400a6666
    35f0:	00000000 	.word	0x00000000
    35f4:	4166e360 	.word	0x4166e360
    35f8:	000002d1 	.word	0x000002d1
    35fc:	42003800 	.word	0x42003800
    3600:	41018000 	.word	0x41018000
    3604:	43001c00 	.word	0x43001c00
    3608:	43002000 	.word	0x43002000
    360c:	000003a9 	.word	0x000003a9
    3610:	000004a5 	.word	0x000004a5
    3614:	000004d9 	.word	0x000004d9
    3618:	0000050d 	.word	0x0000050d
    361c:	00000541 	.word	0x00000541
    3620:	41008000 	.word	0x41008000
    3624:	c0000040 	.word	0xc0000040
    3628:	e000e100 	.word	0xe000e100
    362c:	200003c8 	.word	0x200003c8
    3630:	00001c31 	.word	0x00001c31
    3634:	000031a9 	.word	0x000031a9
    3638:	00001be9 	.word	0x00001be9
    363c:	00001bc1 	.word	0x00001bc1
    3640:	0000386d 	.word	0x0000386d
    3644:	20000480 	.word	0x20000480
    3648:	00001905 	.word	0x00001905
    364c:	00001871 	.word	0x00001871
    3650:	0000391d 	.word	0x0000391d
    3654:	00003931 	.word	0x00003931
    3658:	2000012c 	.word	0x2000012c
    365c:	00003181 	.word	0x00003181
    3660:	200003ac 	.word	0x200003ac
    3664:	00001d95 	.word	0x00001d95
    3668:	00001d59 	.word	0x00001d59
    366c:	41a00000 	.word	0x41a00000
    3670:	00000431 	.word	0x00000431
    3674:	20000004 	.word	0x20000004
    3678:	00001851 	.word	0x00001851
    367c:	0000189d 	.word	0x0000189d
    3680:	200004cc 	.word	0x200004cc
    3684:	00003c3d 	.word	0x00003c3d
    3688:	00003ce5 	.word	0x00003ce5
    368c:	40862000 	.word	0x40862000
    3690:	00004109 	.word	0x00004109
    3694:	200004b8 	.word	0x200004b8
    3698:	3f300000 	.word	0x3f300000
    369c:	40240000 	.word	0x40240000
    36a0:	3fd00000 	.word	0x3fd00000
    36a4:	200004bc 	.word	0x200004bc
    36a8:	200004da 	.word	0x200004da
    36ac:	200004f8 	.word	0x200004f8
    36b0:	200004d8 	.word	0x200004d8
    36b4:	00003f39 	.word	0x00003f39
    36b8:	404e0000 	.word	0x404e0000
    36bc:	40450000 	.word	0x40450000
    36c0:	00000cc9 	.word	0x00000cc9
    36c4:	00003c19 	.word	0x00003c19
 			/* reset control routine activation flag */
 			activate_controller_flag = 0;
 			
			 /* use control algorithm */
 			switch(input_control_set){
				case CONTROL_SET_CURRENT: BLDC_control_current();
    36c8:	4b54      	ldr	r3, [pc, #336]	; (381c <main+0x4cc>)
    36ca:	4798      	blx	r3
				default:
				control_voltage_output = 0;
			 }
			
			/*Drive the motor*/
			BLDC_drive(control_voltage_output);
    36cc:	4b54      	ldr	r3, [pc, #336]	; (3820 <main+0x4d0>)
    36ce:	6c18      	ldr	r0, [r3, #64]	; 0x40
    36d0:	4b54      	ldr	r3, [pc, #336]	; (3824 <main+0x4d4>)
    36d2:	4798      	blx	r3
    36d4:	e00f      	b.n	36f6 <main+0x3a6>
				case CONTROL_SET_SPEED: BLDC_control_speed();
    36d6:	4b54      	ldr	r3, [pc, #336]	; (3828 <main+0x4d8>)
    36d8:	4798      	blx	r3
				break;
    36da:	e7f7      	b.n	36cc <main+0x37c>
				case CONTROL_SET_POSITION: BLDC_control_position();
    36dc:	4b53      	ldr	r3, [pc, #332]	; (382c <main+0x4dc>)
    36de:	4798      	blx	r3
				break;
    36e0:	e7f4      	b.n	36cc <main+0x37c>
				case CONTROL_SET_TORQUE: BLDC_control_torque();
    36e2:	4b53      	ldr	r3, [pc, #332]	; (3830 <main+0x4e0>)
    36e4:	4798      	blx	r3
				break;
    36e6:	e7f1      	b.n	36cc <main+0x37c>
				control_voltage_output = 0;
    36e8:	2200      	movs	r2, #0
    36ea:	4b4d      	ldr	r3, [pc, #308]	; (3820 <main+0x4d0>)
    36ec:	641a      	str	r2, [r3, #64]	; 0x40
    36ee:	e7ed      	b.n	36cc <main+0x37c>
		/************************************************************************/
		/* Non-Active Driver										*/
		/************************************************************************/
		else
		{
			BLDC_drive(0);
    36f0:	2000      	movs	r0, #0
    36f2:	4b4c      	ldr	r3, [pc, #304]	; (3824 <main+0x4d4>)
    36f4:	4798      	blx	r3
		if(read_encoder_flag == 1 && new_encoder_reading_flag == 1)
    36f6:	4b4a      	ldr	r3, [pc, #296]	; (3820 <main+0x4d0>)
    36f8:	68db      	ldr	r3, [r3, #12]
    36fa:	2b01      	cmp	r3, #1
    36fc:	f43f aeb7 	beq.w	346e <main+0x11e>
		if(new_torque_value_available_flag == 1)
    3700:	4b47      	ldr	r3, [pc, #284]	; (3820 <main+0x4d0>)
    3702:	695b      	ldr	r3, [r3, #20]
    3704:	2b01      	cmp	r3, #1
    3706:	f43f aec9 	beq.w	349c <main+0x14c>
		if(new_current_value_available_flag == 1)
    370a:	4b45      	ldr	r3, [pc, #276]	; (3820 <main+0x4d0>)
    370c:	7e1b      	ldrb	r3, [r3, #24]
    370e:	b2db      	uxtb	r3, r3
    3710:	2b01      	cmp	r3, #1
    3712:	f43f aeeb 	beq.w	34ec <main+0x19c>
		if(new_speed_value_available_flag == 1)
    3716:	4b42      	ldr	r3, [pc, #264]	; (3820 <main+0x4d0>)
    3718:	7c1b      	ldrb	r3, [r3, #16]
    371a:	b2db      	uxtb	r3, r3
    371c:	2b01      	cmp	r3, #1
    371e:	f43f af1f 	beq.w	3560 <main+0x210>
		current_reference_current_value = current_selector(get_BLDC_commutation_state());
    3722:	4d44      	ldr	r5, [pc, #272]	; (3834 <main+0x4e4>)
    3724:	47a8      	blx	r5
    3726:	4b44      	ldr	r3, [pc, #272]	; (3838 <main+0x4e8>)
    3728:	4798      	blx	r3
    372a:	4c3d      	ldr	r4, [pc, #244]	; (3820 <main+0x4d0>)
    372c:	63e0      	str	r0, [r4, #60]	; 0x3c
		*read_hall_sector = get_BLDC_commutation_state();
    372e:	47a8      	blx	r5
    3730:	b280      	uxth	r0, r0
    3732:	4b42      	ldr	r3, [pc, #264]	; (383c <main+0x4ec>)
    3734:	8058      	strh	r0, [r3, #2]
		*read_position = encoder_joint_pos;
    3736:	6822      	ldr	r2, [r4, #0]
    3738:	605a      	str	r2, [r3, #4]
		*read_speed = current_BLDC_motor_rpm;
    373a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    373c:	609a      	str	r2, [r3, #8]
		*read_current_i_C = currentC_value;
    373e:	4a40      	ldr	r2, [pc, #256]	; (3840 <main+0x4f0>)
    3740:	6812      	ldr	r2, [r2, #0]
    3742:	619a      	str	r2, [r3, #24]
		*read_current_i_B = currentB_value;
    3744:	4a3f      	ldr	r2, [pc, #252]	; (3844 <main+0x4f4>)
    3746:	6812      	ldr	r2, [r2, #0]
    3748:	615a      	str	r2, [r3, #20]
		*read_current_i_d = current_reference_current_value;
    374a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    374c:	611a      	str	r2, [r3, #16]
		*read_torque = joint_torque;
    374e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    3750:	60da      	str	r2, [r3, #12]
		*read_duty_cycle = control_voltage_output;
    3752:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3754:	625a      	str	r2, [r3, #36]	; 0x24
		*read_abs_duty_cycle = control_voltage_output;
    3756:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3758:	629a      	str	r2, [r3, #40]	; 0x28
		input_control_mode = *control_mode;
    375a:	4b3b      	ldr	r3, [pc, #236]	; (3848 <main+0x4f8>)
    375c:	881a      	ldrh	r2, [r3, #0]
    375e:	b292      	uxth	r2, r2
    3760:	493a      	ldr	r1, [pc, #232]	; (384c <main+0x4fc>)
    3762:	800a      	strh	r2, [r1, #0]
		input_control_set = *control_set;
    3764:	885a      	ldrh	r2, [r3, #2]
    3766:	b292      	uxth	r2, r2
    3768:	4939      	ldr	r1, [pc, #228]	; (3850 <main+0x500>)
    376a:	800a      	strh	r2, [r1, #0]
		currentPIDControl.desired = *I_desired;
    376c:	6919      	ldr	r1, [r3, #16]
    376e:	4a39      	ldr	r2, [pc, #228]	; (3854 <main+0x504>)
    3770:	6011      	str	r1, [r2, #0]
		currentPIDControl.max = MAX_PWM;
    3772:	4939      	ldr	r1, [pc, #228]	; (3858 <main+0x508>)
    3774:	6151      	str	r1, [r2, #20]
		currentPIDControl.min = MIN_PWM;
    3776:	4939      	ldr	r1, [pc, #228]	; (385c <main+0x50c>)
    3778:	6191      	str	r1, [r2, #24]
		currentPIDControl.Kp = *i_kp;
    377a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    377c:	6051      	str	r1, [r2, #4]
		currentPIDControl.Ki = *i_ki;
    377e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    3780:	6091      	str	r1, [r2, #8]
		speedPIDControl.desired = *desired_speed;
    3782:	68d9      	ldr	r1, [r3, #12]
    3784:	4a36      	ldr	r2, [pc, #216]	; (3860 <main+0x510>)
    3786:	6011      	str	r1, [r2, #0]
		speedPIDControl.max = *I_max;
    3788:	6999      	ldr	r1, [r3, #24]
    378a:	6151      	str	r1, [r2, #20]
		speedPIDControl.min = -(*I_max);
    378c:	edd3 7a06 	vldr	s15, [r3, #24]
    3790:	eef1 7a67 	vneg.f32	s15, s15
    3794:	edc2 7a06 	vstr	s15, [r2, #24]
		speedPIDControl.Kp = *speed_kp;
    3798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    379a:	6051      	str	r1, [r2, #4]
		speedPIDControl.Ki = *speed_ki;
    379c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    379e:	6091      	str	r1, [r2, #8]
		posPIDControl.desired = *desired_position;
    37a0:	6859      	ldr	r1, [r3, #4]
    37a2:	4a30      	ldr	r2, [pc, #192]	; (3864 <main+0x514>)
    37a4:	6011      	str	r1, [r2, #0]
		posPIDControl.max = *speed_max;
    37a6:	6959      	ldr	r1, [r3, #20]
    37a8:	6151      	str	r1, [r2, #20]
		posPIDControl.min = -(*speed_max);
    37aa:	edd3 7a05 	vldr	s15, [r3, #20]
    37ae:	eef1 7a67 	vneg.f32	s15, s15
    37b2:	edc2 7a06 	vstr	s15, [r2, #24]
		posPIDControl.Kp = *pos_kp;
    37b6:	69d9      	ldr	r1, [r3, #28]
    37b8:	6051      	str	r1, [r2, #4]
		posPIDControl.Ki = *pos_ki;
    37ba:	6a19      	ldr	r1, [r3, #32]
    37bc:	6091      	str	r1, [r2, #8]
		torquePIDControl.desired = *desired_torque;
    37be:	6899      	ldr	r1, [r3, #8]
    37c0:	4a29      	ldr	r2, [pc, #164]	; (3868 <main+0x518>)
    37c2:	6011      	str	r1, [r2, #0]
		torquePIDControl.max = *I_max;
    37c4:	6999      	ldr	r1, [r3, #24]
    37c6:	6151      	str	r1, [r2, #20]
		torquePIDControl.min = -(*I_max);
    37c8:	edd3 7a06 	vldr	s15, [r3, #24]
    37cc:	eef1 7a67 	vneg.f32	s15, s15
    37d0:	edc2 7a06 	vstr	s15, [r2, #24]
		torquePIDControl.Kp = *torque_kp;
    37d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    37d6:	6051      	str	r1, [r2, #4]
		torquePIDControl.Ki = *torque_ki;
    37d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37da:	6093      	str	r3, [r2, #8]
 		if(activate_controller_flag == 1 && input_control_mode == 1)
    37dc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    37e0:	b2db      	uxtb	r3, r3
    37e2:	2b01      	cmp	r3, #1
    37e4:	d184      	bne.n	36f0 <main+0x3a0>
    37e6:	4b19      	ldr	r3, [pc, #100]	; (384c <main+0x4fc>)
    37e8:	881b      	ldrh	r3, [r3, #0]
    37ea:	b29b      	uxth	r3, r3
    37ec:	2b01      	cmp	r3, #1
    37ee:	f47f af7f 	bne.w	36f0 <main+0x3a0>
 			activate_controller_flag = 0;
    37f2:	2200      	movs	r2, #0
    37f4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 			switch(input_control_set){
    37f8:	4b15      	ldr	r3, [pc, #84]	; (3850 <main+0x500>)
    37fa:	881b      	ldrh	r3, [r3, #0]
    37fc:	b29b      	uxth	r3, r3
    37fe:	2b03      	cmp	r3, #3
    3800:	f63f af72 	bhi.w	36e8 <main+0x398>
    3804:	a201      	add	r2, pc, #4	; (adr r2, 380c <main+0x4bc>)
    3806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    380a:	bf00      	nop
    380c:	000036c9 	.word	0x000036c9
    3810:	000036d7 	.word	0x000036d7
    3814:	000036dd 	.word	0x000036dd
    3818:	000036e3 	.word	0x000036e3
    381c:	00000785 	.word	0x00000785
    3820:	2000012c 	.word	0x2000012c
    3824:	00000681 	.word	0x00000681
    3828:	0000087d 	.word	0x0000087d
    382c:	000009cd 	.word	0x000009cd
    3830:	00000b75 	.word	0x00000b75
    3834:	00000cbd 	.word	0x00000cbd
    3838:	000032f9 	.word	0x000032f9
    383c:	200001ec 	.word	0x200001ec
    3840:	200004bc 	.word	0x200004bc
    3844:	200004f8 	.word	0x200004f8
    3848:	2000022c 	.word	0x2000022c
    384c:	200004e0 	.word	0x200004e0
    3850:	200004f0 	.word	0x200004f0
    3854:	20000350 	.word	0x20000350
    3858:	42480000 	.word	0x42480000
    385c:	c2480000 	.word	0xc2480000
    3860:	20000334 	.word	0x20000334
    3864:	2000036c 	.word	0x2000036c
    3868:	200002f4 	.word	0x200002f4

0000386c <init_standard_messages>:

/************************************************************************/
/* Functions                                                            */
/************************************************************************/
void init_standard_messages()
{
    386c:	b430      	push	{r4, r5}
	// Abort FIFO message	
	transmit_msg_abort_fifo[0] = 0x00;
    386e:	4b20      	ldr	r3, [pc, #128]	; (38f0 <init_standard_messages+0x84>)
    3870:	2200      	movs	r2, #0
    3872:	701a      	strb	r2, [r3, #0]
	transmit_msg_abort_fifo[1] = 0x00;
    3874:	705a      	strb	r2, [r3, #1]
	transmit_msg_abort_fifo[2] = 0x00;
    3876:	709a      	strb	r2, [r3, #2]
	transmit_msg_abort_fifo[3] = 0x40;
    3878:	2140      	movs	r1, #64	; 0x40
    387a:	70d9      	strb	r1, [r3, #3]
	
	transmit_msg_abort_fifo[4] = 0x00;
    387c:	711a      	strb	r2, [r3, #4]
	transmit_msg_abort_fifo[5] = 0x00;
    387e:	715a      	strb	r2, [r3, #5]
	transmit_msg_abort_fifo[6] = 0x00;
    3880:	719a      	strb	r2, [r3, #6]
	transmit_msg_abort_fifo[7] = 0x00;
    3882:	71da      	strb	r2, [r3, #7]
	
	transmit_msg_abort_fifo[8] = 0x00;
    3884:	721a      	strb	r2, [r3, #8]
	transmit_msg_abort_fifo[9] = 0x00;
    3886:	725a      	strb	r2, [r3, #9]
	transmit_msg_abort_fifo[10] = 0x00;
    3888:	729a      	strb	r2, [r3, #10]
	transmit_msg_abort_fifo[11] = 0x40;
    388a:	72d9      	strb	r1, [r3, #11]
	
	
	// Config FIFO message	
	transmit_msg_config_fifo[0] = 0x00;
    388c:	731a      	strb	r2, [r3, #12]
	transmit_msg_config_fifo[1] = 0x10;
    388e:	2410      	movs	r4, #16
    3890:	735c      	strb	r4, [r3, #13]
	transmit_msg_config_fifo[2] = 0x40;
    3892:	7399      	strb	r1, [r3, #14]
	transmit_msg_config_fifo[3] = 0x00;
    3894:	73da      	strb	r2, [r3, #15]
	
	transmit_msg_config_fifo[4] = 0x00;
    3896:	741a      	strb	r2, [r3, #16]
	transmit_msg_config_fifo[5] = 0x00;
    3898:	745a      	strb	r2, [r3, #17]
	transmit_msg_config_fifo[6] = 0x00;
    389a:	749a      	strb	r2, [r3, #18]
	transmit_msg_config_fifo[7] = 0x80;
    389c:	2080      	movs	r0, #128	; 0x80
    389e:	74d8      	strb	r0, [r3, #19]
	
	transmit_msg_config_fifo[8] = 0x00;
    38a0:	751a      	strb	r2, [r3, #20]
	transmit_msg_config_fifo[9] = 0x18;
    38a2:	2518      	movs	r5, #24
    38a4:	755d      	strb	r5, [r3, #21]
	transmit_msg_config_fifo[10] = 0x40;
    38a6:	7599      	strb	r1, [r3, #22]
	transmit_msg_config_fifo[11] = 0x00;
    38a8:	75da      	strb	r2, [r3, #23]
	
	transmit_msg_config_fifo[12] = 0x00;
    38aa:	761a      	strb	r2, [r3, #24]
	transmit_msg_config_fifo[13] = 0x00;
    38ac:	765a      	strb	r2, [r3, #25]
	transmit_msg_config_fifo[14] = 0x00;
    38ae:	769a      	strb	r2, [r3, #26]
	transmit_msg_config_fifo[15] = 0x80;
    38b0:	76d8      	strb	r0, [r3, #27]

	//clear rdram config
	
	transmit_msg_clear_rdram_config[0] = 0x00;
    38b2:	771a      	strb	r2, [r3, #28]
	transmit_msg_clear_rdram_config[1] = 0x10;
    38b4:	775c      	strb	r4, [r3, #29]
	transmit_msg_clear_rdram_config[2] = 0x40;
    38b6:	7799      	strb	r1, [r3, #30]
	transmit_msg_clear_rdram_config[3] = 0x00;
    38b8:	77da      	strb	r2, [r3, #31]
	
	transmit_msg_clear_rdram_config[4] = 0x00;
    38ba:	f883 2020 	strb.w	r2, [r3, #32]
	transmit_msg_clear_rdram_config[5] = 0x00;
    38be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	transmit_msg_clear_rdram_config[6] = 0x00;
    38c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	transmit_msg_clear_rdram_config[7] = 0x80;
    38c6:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
	
	// task data
	send_data[0] = 0x00000000;
    38ca:	625a      	str	r2, [r3, #36]	; 0x24
	send_data[1] = 0x00000000;
    38cc:	629a      	str	r2, [r3, #40]	; 0x28
	send_data[2] = 0x00000000;
    38ce:	62da      	str	r2, [r3, #44]	; 0x2c
	send_data[3] = 0x00000000;
    38d0:	631a      	str	r2, [r3, #48]	; 0x30
	send_data[4] = 0x00000000;
    38d2:	635a      	str	r2, [r3, #52]	; 0x34
	send_data[5] = 0x00000000;
    38d4:	639a      	str	r2, [r3, #56]	; 0x38
	send_data[6] = 0x00000000;
    38d6:	63da      	str	r2, [r3, #60]	; 0x3c
	send_data[7] = 0x00000000;
    38d8:	641a      	str	r2, [r3, #64]	; 0x40
	send_data[8] = 0x00000000;
    38da:	645a      	str	r2, [r3, #68]	; 0x44
	send_data[9] = 0x00000000;
    38dc:	649a      	str	r2, [r3, #72]	; 0x48
	send_data[10] = 0x00000000;
    38de:	64da      	str	r2, [r3, #76]	; 0x4c
	send_data[11] = 0x00000000;
    38e0:	651a      	str	r2, [r3, #80]	; 0x50
	send_data[12] = 0x00000000;
    38e2:	655a      	str	r2, [r3, #84]	; 0x54
	send_data[13] = 0x00000000;
    38e4:	659a      	str	r2, [r3, #88]	; 0x58
	send_data[14] = 0x00000000;
    38e6:	65da      	str	r2, [r3, #92]	; 0x5c
	send_data[15] = 0x00000000;
    38e8:	661a      	str	r2, [r3, #96]	; 0x60
	
	
}
    38ea:	bc30      	pop	{r4, r5}
    38ec:	4770      	bx	lr
    38ee:	bf00      	nop
    38f0:	200001c8 	.word	0x200001c8

000038f4 <send_to_ethercat>:


void send_to_ethercat(struct _qspi_command* cmd)
{
    38f4:	b508      	push	{r3, lr}
	qspi_sync_serial_run_command(&QUAD_SPI_0, cmd);
    38f6:	4601      	mov	r1, r0
    38f8:	4801      	ldr	r0, [pc, #4]	; (3900 <send_to_ethercat+0xc>)
    38fa:	4b02      	ldr	r3, [pc, #8]	; (3904 <send_to_ethercat+0x10>)
    38fc:	4798      	blx	r3
    38fe:	bd08      	pop	{r3, pc}
    3900:	20000480 	.word	0x20000480
    3904:	0000192d 	.word	0x0000192d

00003908 <config_fifo>:
	//qspi_sync_deinit(&QUAD_SPI_0);
}


void config_fifo()
{	
    3908:	b508      	push	{r3, lr}
	send_to_ethercat(&cmd_config_fifo);
    390a:	4802      	ldr	r0, [pc, #8]	; (3914 <config_fifo+0xc>)
    390c:	4b02      	ldr	r3, [pc, #8]	; (3918 <config_fifo+0x10>)
    390e:	4798      	blx	r3
    3910:	bd08      	pop	{r3, pc}
    3912:	bf00      	nop
    3914:	20000014 	.word	0x20000014
    3918:	000038f5 	.word	0x000038f5

0000391c <abort_fifo>:
}


void abort_fifo()
{
    391c:	b508      	push	{r3, lr}
	send_to_ethercat(&cmd_abort_fifo);
    391e:	4802      	ldr	r0, [pc, #8]	; (3928 <abort_fifo+0xc>)
    3920:	4b02      	ldr	r3, [pc, #8]	; (392c <abort_fifo+0x10>)
    3922:	4798      	blx	r3
    3924:	bd08      	pop	{r3, pc}
    3926:	bf00      	nop
    3928:	2000002c 	.word	0x2000002c
    392c:	000038f5 	.word	0x000038f5

00003930 <clear_rdram>:
}


void clear_rdram()
{
    3930:	b538      	push	{r3, r4, r5, lr}
	send_to_ethercat(&cmd_clear_rdram_data);
    3932:	4d04      	ldr	r5, [pc, #16]	; (3944 <clear_rdram+0x14>)
    3934:	f105 0030 	add.w	r0, r5, #48	; 0x30
    3938:	4c03      	ldr	r4, [pc, #12]	; (3948 <clear_rdram+0x18>)
    393a:	47a0      	blx	r4
	send_to_ethercat(&cmd_clear_rdram_config);
    393c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    3940:	47a0      	blx	r4
    3942:	bd38      	pop	{r3, r4, r5, pc}
    3944:	20000014 	.word	0x20000014
    3948:	000038f5 	.word	0x000038f5

0000394c <write_16_DWORDS_data>:
}

void write_16_DWORDS_data()
{
    394c:	b508      	push	{r3, lr}
	send_to_ethercat(&cmd_send_data);
    394e:	4802      	ldr	r0, [pc, #8]	; (3958 <write_16_DWORDS_data+0xc>)
    3950:	4b02      	ldr	r3, [pc, #8]	; (395c <write_16_DWORDS_data+0x10>)
    3952:	4798      	blx	r3
    3954:	bd08      	pop	{r3, pc}
    3956:	bf00      	nop
    3958:	20000074 	.word	0x20000074
    395c:	000038f5 	.word	0x000038f5

00003960 <read_16_DWORDS_data>:
	//send_data[0]++;
}

void read_16_DWORDS_data()
{	
    3960:	b508      	push	{r3, lr}
	send_to_ethercat(&cmd_write_to_read_data);
    3962:	4802      	ldr	r0, [pc, #8]	; (396c <read_16_DWORDS_data+0xc>)
    3964:	4b02      	ldr	r3, [pc, #8]	; (3970 <read_16_DWORDS_data+0x10>)
    3966:	4798      	blx	r3
    3968:	bd08      	pop	{r3, pc}
    396a:	bf00      	nop
    396c:	2000008c 	.word	0x2000008c
    3970:	000038f5 	.word	0x000038f5

00003974 <__aeabi_drsub>:
    3974:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3978:	e002      	b.n	3980 <__adddf3>
    397a:	bf00      	nop

0000397c <__aeabi_dsub>:
    397c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003980 <__adddf3>:
    3980:	b530      	push	{r4, r5, lr}
    3982:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3986:	ea4f 0543 	mov.w	r5, r3, lsl #1
    398a:	ea94 0f05 	teq	r4, r5
    398e:	bf08      	it	eq
    3990:	ea90 0f02 	teqeq	r0, r2
    3994:	bf1f      	itttt	ne
    3996:	ea54 0c00 	orrsne.w	ip, r4, r0
    399a:	ea55 0c02 	orrsne.w	ip, r5, r2
    399e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    39a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    39a6:	f000 80e2 	beq.w	3b6e <__adddf3+0x1ee>
    39aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
    39ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    39b2:	bfb8      	it	lt
    39b4:	426d      	neglt	r5, r5
    39b6:	dd0c      	ble.n	39d2 <__adddf3+0x52>
    39b8:	442c      	add	r4, r5
    39ba:	ea80 0202 	eor.w	r2, r0, r2
    39be:	ea81 0303 	eor.w	r3, r1, r3
    39c2:	ea82 0000 	eor.w	r0, r2, r0
    39c6:	ea83 0101 	eor.w	r1, r3, r1
    39ca:	ea80 0202 	eor.w	r2, r0, r2
    39ce:	ea81 0303 	eor.w	r3, r1, r3
    39d2:	2d36      	cmp	r5, #54	; 0x36
    39d4:	bf88      	it	hi
    39d6:	bd30      	pophi	{r4, r5, pc}
    39d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    39dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    39e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    39e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    39e8:	d002      	beq.n	39f0 <__adddf3+0x70>
    39ea:	4240      	negs	r0, r0
    39ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    39f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    39f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    39f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    39fc:	d002      	beq.n	3a04 <__adddf3+0x84>
    39fe:	4252      	negs	r2, r2
    3a00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3a04:	ea94 0f05 	teq	r4, r5
    3a08:	f000 80a7 	beq.w	3b5a <__adddf3+0x1da>
    3a0c:	f1a4 0401 	sub.w	r4, r4, #1
    3a10:	f1d5 0e20 	rsbs	lr, r5, #32
    3a14:	db0d      	blt.n	3a32 <__adddf3+0xb2>
    3a16:	fa02 fc0e 	lsl.w	ip, r2, lr
    3a1a:	fa22 f205 	lsr.w	r2, r2, r5
    3a1e:	1880      	adds	r0, r0, r2
    3a20:	f141 0100 	adc.w	r1, r1, #0
    3a24:	fa03 f20e 	lsl.w	r2, r3, lr
    3a28:	1880      	adds	r0, r0, r2
    3a2a:	fa43 f305 	asr.w	r3, r3, r5
    3a2e:	4159      	adcs	r1, r3
    3a30:	e00e      	b.n	3a50 <__adddf3+0xd0>
    3a32:	f1a5 0520 	sub.w	r5, r5, #32
    3a36:	f10e 0e20 	add.w	lr, lr, #32
    3a3a:	2a01      	cmp	r2, #1
    3a3c:	fa03 fc0e 	lsl.w	ip, r3, lr
    3a40:	bf28      	it	cs
    3a42:	f04c 0c02 	orrcs.w	ip, ip, #2
    3a46:	fa43 f305 	asr.w	r3, r3, r5
    3a4a:	18c0      	adds	r0, r0, r3
    3a4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3a50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3a54:	d507      	bpl.n	3a66 <__adddf3+0xe6>
    3a56:	f04f 0e00 	mov.w	lr, #0
    3a5a:	f1dc 0c00 	rsbs	ip, ip, #0
    3a5e:	eb7e 0000 	sbcs.w	r0, lr, r0
    3a62:	eb6e 0101 	sbc.w	r1, lr, r1
    3a66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3a6a:	d31b      	bcc.n	3aa4 <__adddf3+0x124>
    3a6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3a70:	d30c      	bcc.n	3a8c <__adddf3+0x10c>
    3a72:	0849      	lsrs	r1, r1, #1
    3a74:	ea5f 0030 	movs.w	r0, r0, rrx
    3a78:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3a7c:	f104 0401 	add.w	r4, r4, #1
    3a80:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3a84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3a88:	f080 809a 	bcs.w	3bc0 <__adddf3+0x240>
    3a8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3a90:	bf08      	it	eq
    3a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3a96:	f150 0000 	adcs.w	r0, r0, #0
    3a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3a9e:	ea41 0105 	orr.w	r1, r1, r5
    3aa2:	bd30      	pop	{r4, r5, pc}
    3aa4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3aa8:	4140      	adcs	r0, r0
    3aaa:	eb41 0101 	adc.w	r1, r1, r1
    3aae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3ab2:	f1a4 0401 	sub.w	r4, r4, #1
    3ab6:	d1e9      	bne.n	3a8c <__adddf3+0x10c>
    3ab8:	f091 0f00 	teq	r1, #0
    3abc:	bf04      	itt	eq
    3abe:	4601      	moveq	r1, r0
    3ac0:	2000      	moveq	r0, #0
    3ac2:	fab1 f381 	clz	r3, r1
    3ac6:	bf08      	it	eq
    3ac8:	3320      	addeq	r3, #32
    3aca:	f1a3 030b 	sub.w	r3, r3, #11
    3ace:	f1b3 0220 	subs.w	r2, r3, #32
    3ad2:	da0c      	bge.n	3aee <__adddf3+0x16e>
    3ad4:	320c      	adds	r2, #12
    3ad6:	dd08      	ble.n	3aea <__adddf3+0x16a>
    3ad8:	f102 0c14 	add.w	ip, r2, #20
    3adc:	f1c2 020c 	rsb	r2, r2, #12
    3ae0:	fa01 f00c 	lsl.w	r0, r1, ip
    3ae4:	fa21 f102 	lsr.w	r1, r1, r2
    3ae8:	e00c      	b.n	3b04 <__adddf3+0x184>
    3aea:	f102 0214 	add.w	r2, r2, #20
    3aee:	bfd8      	it	le
    3af0:	f1c2 0c20 	rsble	ip, r2, #32
    3af4:	fa01 f102 	lsl.w	r1, r1, r2
    3af8:	fa20 fc0c 	lsr.w	ip, r0, ip
    3afc:	bfdc      	itt	le
    3afe:	ea41 010c 	orrle.w	r1, r1, ip
    3b02:	4090      	lslle	r0, r2
    3b04:	1ae4      	subs	r4, r4, r3
    3b06:	bfa2      	ittt	ge
    3b08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    3b0c:	4329      	orrge	r1, r5
    3b0e:	bd30      	popge	{r4, r5, pc}
    3b10:	ea6f 0404 	mvn.w	r4, r4
    3b14:	3c1f      	subs	r4, #31
    3b16:	da1c      	bge.n	3b52 <__adddf3+0x1d2>
    3b18:	340c      	adds	r4, #12
    3b1a:	dc0e      	bgt.n	3b3a <__adddf3+0x1ba>
    3b1c:	f104 0414 	add.w	r4, r4, #20
    3b20:	f1c4 0220 	rsb	r2, r4, #32
    3b24:	fa20 f004 	lsr.w	r0, r0, r4
    3b28:	fa01 f302 	lsl.w	r3, r1, r2
    3b2c:	ea40 0003 	orr.w	r0, r0, r3
    3b30:	fa21 f304 	lsr.w	r3, r1, r4
    3b34:	ea45 0103 	orr.w	r1, r5, r3
    3b38:	bd30      	pop	{r4, r5, pc}
    3b3a:	f1c4 040c 	rsb	r4, r4, #12
    3b3e:	f1c4 0220 	rsb	r2, r4, #32
    3b42:	fa20 f002 	lsr.w	r0, r0, r2
    3b46:	fa01 f304 	lsl.w	r3, r1, r4
    3b4a:	ea40 0003 	orr.w	r0, r0, r3
    3b4e:	4629      	mov	r1, r5
    3b50:	bd30      	pop	{r4, r5, pc}
    3b52:	fa21 f004 	lsr.w	r0, r1, r4
    3b56:	4629      	mov	r1, r5
    3b58:	bd30      	pop	{r4, r5, pc}
    3b5a:	f094 0f00 	teq	r4, #0
    3b5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3b62:	bf06      	itte	eq
    3b64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    3b68:	3401      	addeq	r4, #1
    3b6a:	3d01      	subne	r5, #1
    3b6c:	e74e      	b.n	3a0c <__adddf3+0x8c>
    3b6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3b72:	bf18      	it	ne
    3b74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3b78:	d029      	beq.n	3bce <__adddf3+0x24e>
    3b7a:	ea94 0f05 	teq	r4, r5
    3b7e:	bf08      	it	eq
    3b80:	ea90 0f02 	teqeq	r0, r2
    3b84:	d005      	beq.n	3b92 <__adddf3+0x212>
    3b86:	ea54 0c00 	orrs.w	ip, r4, r0
    3b8a:	bf04      	itt	eq
    3b8c:	4619      	moveq	r1, r3
    3b8e:	4610      	moveq	r0, r2
    3b90:	bd30      	pop	{r4, r5, pc}
    3b92:	ea91 0f03 	teq	r1, r3
    3b96:	bf1e      	ittt	ne
    3b98:	2100      	movne	r1, #0
    3b9a:	2000      	movne	r0, #0
    3b9c:	bd30      	popne	{r4, r5, pc}
    3b9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3ba2:	d105      	bne.n	3bb0 <__adddf3+0x230>
    3ba4:	0040      	lsls	r0, r0, #1
    3ba6:	4149      	adcs	r1, r1
    3ba8:	bf28      	it	cs
    3baa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3bae:	bd30      	pop	{r4, r5, pc}
    3bb0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3bb4:	bf3c      	itt	cc
    3bb6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    3bba:	bd30      	popcc	{r4, r5, pc}
    3bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3bc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3bc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3bc8:	f04f 0000 	mov.w	r0, #0
    3bcc:	bd30      	pop	{r4, r5, pc}
    3bce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3bd2:	bf1a      	itte	ne
    3bd4:	4619      	movne	r1, r3
    3bd6:	4610      	movne	r0, r2
    3bd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3bdc:	bf1c      	itt	ne
    3bde:	460b      	movne	r3, r1
    3be0:	4602      	movne	r2, r0
    3be2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3be6:	bf06      	itte	eq
    3be8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    3bec:	ea91 0f03 	teqeq	r1, r3
    3bf0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    3bf4:	bd30      	pop	{r4, r5, pc}
    3bf6:	bf00      	nop

00003bf8 <__aeabi_ui2d>:
    3bf8:	f090 0f00 	teq	r0, #0
    3bfc:	bf04      	itt	eq
    3bfe:	2100      	moveq	r1, #0
    3c00:	4770      	bxeq	lr
    3c02:	b530      	push	{r4, r5, lr}
    3c04:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3c08:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3c0c:	f04f 0500 	mov.w	r5, #0
    3c10:	f04f 0100 	mov.w	r1, #0
    3c14:	e750      	b.n	3ab8 <__adddf3+0x138>
    3c16:	bf00      	nop

00003c18 <__aeabi_i2d>:
    3c18:	f090 0f00 	teq	r0, #0
    3c1c:	bf04      	itt	eq
    3c1e:	2100      	moveq	r1, #0
    3c20:	4770      	bxeq	lr
    3c22:	b530      	push	{r4, r5, lr}
    3c24:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3c28:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3c2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3c30:	bf48      	it	mi
    3c32:	4240      	negmi	r0, r0
    3c34:	f04f 0100 	mov.w	r1, #0
    3c38:	e73e      	b.n	3ab8 <__adddf3+0x138>
    3c3a:	bf00      	nop

00003c3c <__aeabi_f2d>:
    3c3c:	0042      	lsls	r2, r0, #1
    3c3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    3c42:	ea4f 0131 	mov.w	r1, r1, rrx
    3c46:	ea4f 7002 	mov.w	r0, r2, lsl #28
    3c4a:	bf1f      	itttt	ne
    3c4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3c50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3c54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3c58:	4770      	bxne	lr
    3c5a:	f092 0f00 	teq	r2, #0
    3c5e:	bf14      	ite	ne
    3c60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3c64:	4770      	bxeq	lr
    3c66:	b530      	push	{r4, r5, lr}
    3c68:	f44f 7460 	mov.w	r4, #896	; 0x380
    3c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3c70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3c74:	e720      	b.n	3ab8 <__adddf3+0x138>
    3c76:	bf00      	nop

00003c78 <__aeabi_ul2d>:
    3c78:	ea50 0201 	orrs.w	r2, r0, r1
    3c7c:	bf08      	it	eq
    3c7e:	4770      	bxeq	lr
    3c80:	b530      	push	{r4, r5, lr}
    3c82:	f04f 0500 	mov.w	r5, #0
    3c86:	e00a      	b.n	3c9e <__aeabi_l2d+0x16>

00003c88 <__aeabi_l2d>:
    3c88:	ea50 0201 	orrs.w	r2, r0, r1
    3c8c:	bf08      	it	eq
    3c8e:	4770      	bxeq	lr
    3c90:	b530      	push	{r4, r5, lr}
    3c92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    3c96:	d502      	bpl.n	3c9e <__aeabi_l2d+0x16>
    3c98:	4240      	negs	r0, r0
    3c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3c9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3ca2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3ca6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    3caa:	f43f aedc 	beq.w	3a66 <__adddf3+0xe6>
    3cae:	f04f 0203 	mov.w	r2, #3
    3cb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3cb6:	bf18      	it	ne
    3cb8:	3203      	addne	r2, #3
    3cba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3cbe:	bf18      	it	ne
    3cc0:	3203      	addne	r2, #3
    3cc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    3cc6:	f1c2 0320 	rsb	r3, r2, #32
    3cca:	fa00 fc03 	lsl.w	ip, r0, r3
    3cce:	fa20 f002 	lsr.w	r0, r0, r2
    3cd2:	fa01 fe03 	lsl.w	lr, r1, r3
    3cd6:	ea40 000e 	orr.w	r0, r0, lr
    3cda:	fa21 f102 	lsr.w	r1, r1, r2
    3cde:	4414      	add	r4, r2
    3ce0:	e6c1      	b.n	3a66 <__adddf3+0xe6>
    3ce2:	bf00      	nop

00003ce4 <__aeabi_dmul>:
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3cf2:	bf1d      	ittte	ne
    3cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3cf8:	ea94 0f0c 	teqne	r4, ip
    3cfc:	ea95 0f0c 	teqne	r5, ip
    3d00:	f000 f8de 	bleq	3ec0 <__aeabi_dmul+0x1dc>
    3d04:	442c      	add	r4, r5
    3d06:	ea81 0603 	eor.w	r6, r1, r3
    3d0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    3d0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    3d12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    3d16:	bf18      	it	ne
    3d18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    3d1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3d24:	d038      	beq.n	3d98 <__aeabi_dmul+0xb4>
    3d26:	fba0 ce02 	umull	ip, lr, r0, r2
    3d2a:	f04f 0500 	mov.w	r5, #0
    3d2e:	fbe1 e502 	umlal	lr, r5, r1, r2
    3d32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    3d36:	fbe0 e503 	umlal	lr, r5, r0, r3
    3d3a:	f04f 0600 	mov.w	r6, #0
    3d3e:	fbe1 5603 	umlal	r5, r6, r1, r3
    3d42:	f09c 0f00 	teq	ip, #0
    3d46:	bf18      	it	ne
    3d48:	f04e 0e01 	orrne.w	lr, lr, #1
    3d4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3d50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3d54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    3d58:	d204      	bcs.n	3d64 <__aeabi_dmul+0x80>
    3d5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    3d5e:	416d      	adcs	r5, r5
    3d60:	eb46 0606 	adc.w	r6, r6, r6
    3d64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    3d68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    3d6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3d70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    3d74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    3d78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3d7c:	bf88      	it	hi
    3d7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3d82:	d81e      	bhi.n	3dc2 <__aeabi_dmul+0xde>
    3d84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    3d88:	bf08      	it	eq
    3d8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    3d8e:	f150 0000 	adcs.w	r0, r0, #0
    3d92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3d96:	bd70      	pop	{r4, r5, r6, pc}
    3d98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    3d9c:	ea46 0101 	orr.w	r1, r6, r1
    3da0:	ea40 0002 	orr.w	r0, r0, r2
    3da4:	ea81 0103 	eor.w	r1, r1, r3
    3da8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    3dac:	bfc2      	ittt	gt
    3dae:	ebd4 050c 	rsbsgt	r5, r4, ip
    3db2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3db6:	bd70      	popgt	{r4, r5, r6, pc}
    3db8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3dbc:	f04f 0e00 	mov.w	lr, #0
    3dc0:	3c01      	subs	r4, #1
    3dc2:	f300 80ab 	bgt.w	3f1c <__aeabi_dmul+0x238>
    3dc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    3dca:	bfde      	ittt	le
    3dcc:	2000      	movle	r0, #0
    3dce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    3dd2:	bd70      	pople	{r4, r5, r6, pc}
    3dd4:	f1c4 0400 	rsb	r4, r4, #0
    3dd8:	3c20      	subs	r4, #32
    3dda:	da35      	bge.n	3e48 <__aeabi_dmul+0x164>
    3ddc:	340c      	adds	r4, #12
    3dde:	dc1b      	bgt.n	3e18 <__aeabi_dmul+0x134>
    3de0:	f104 0414 	add.w	r4, r4, #20
    3de4:	f1c4 0520 	rsb	r5, r4, #32
    3de8:	fa00 f305 	lsl.w	r3, r0, r5
    3dec:	fa20 f004 	lsr.w	r0, r0, r4
    3df0:	fa01 f205 	lsl.w	r2, r1, r5
    3df4:	ea40 0002 	orr.w	r0, r0, r2
    3df8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    3dfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3e00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3e04:	fa21 f604 	lsr.w	r6, r1, r4
    3e08:	eb42 0106 	adc.w	r1, r2, r6
    3e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3e10:	bf08      	it	eq
    3e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3e16:	bd70      	pop	{r4, r5, r6, pc}
    3e18:	f1c4 040c 	rsb	r4, r4, #12
    3e1c:	f1c4 0520 	rsb	r5, r4, #32
    3e20:	fa00 f304 	lsl.w	r3, r0, r4
    3e24:	fa20 f005 	lsr.w	r0, r0, r5
    3e28:	fa01 f204 	lsl.w	r2, r1, r4
    3e2c:	ea40 0002 	orr.w	r0, r0, r2
    3e30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3e34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3e38:	f141 0100 	adc.w	r1, r1, #0
    3e3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3e40:	bf08      	it	eq
    3e42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3e46:	bd70      	pop	{r4, r5, r6, pc}
    3e48:	f1c4 0520 	rsb	r5, r4, #32
    3e4c:	fa00 f205 	lsl.w	r2, r0, r5
    3e50:	ea4e 0e02 	orr.w	lr, lr, r2
    3e54:	fa20 f304 	lsr.w	r3, r0, r4
    3e58:	fa01 f205 	lsl.w	r2, r1, r5
    3e5c:	ea43 0302 	orr.w	r3, r3, r2
    3e60:	fa21 f004 	lsr.w	r0, r1, r4
    3e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3e68:	fa21 f204 	lsr.w	r2, r1, r4
    3e6c:	ea20 0002 	bic.w	r0, r0, r2
    3e70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    3e74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3e78:	bf08      	it	eq
    3e7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3e7e:	bd70      	pop	{r4, r5, r6, pc}
    3e80:	f094 0f00 	teq	r4, #0
    3e84:	d10f      	bne.n	3ea6 <__aeabi_dmul+0x1c2>
    3e86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    3e8a:	0040      	lsls	r0, r0, #1
    3e8c:	eb41 0101 	adc.w	r1, r1, r1
    3e90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3e94:	bf08      	it	eq
    3e96:	3c01      	subeq	r4, #1
    3e98:	d0f7      	beq.n	3e8a <__aeabi_dmul+0x1a6>
    3e9a:	ea41 0106 	orr.w	r1, r1, r6
    3e9e:	f095 0f00 	teq	r5, #0
    3ea2:	bf18      	it	ne
    3ea4:	4770      	bxne	lr
    3ea6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    3eaa:	0052      	lsls	r2, r2, #1
    3eac:	eb43 0303 	adc.w	r3, r3, r3
    3eb0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    3eb4:	bf08      	it	eq
    3eb6:	3d01      	subeq	r5, #1
    3eb8:	d0f7      	beq.n	3eaa <__aeabi_dmul+0x1c6>
    3eba:	ea43 0306 	orr.w	r3, r3, r6
    3ebe:	4770      	bx	lr
    3ec0:	ea94 0f0c 	teq	r4, ip
    3ec4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    3ec8:	bf18      	it	ne
    3eca:	ea95 0f0c 	teqne	r5, ip
    3ece:	d00c      	beq.n	3eea <__aeabi_dmul+0x206>
    3ed0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3ed4:	bf18      	it	ne
    3ed6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3eda:	d1d1      	bne.n	3e80 <__aeabi_dmul+0x19c>
    3edc:	ea81 0103 	eor.w	r1, r1, r3
    3ee0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3ee4:	f04f 0000 	mov.w	r0, #0
    3ee8:	bd70      	pop	{r4, r5, r6, pc}
    3eea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3eee:	bf06      	itte	eq
    3ef0:	4610      	moveq	r0, r2
    3ef2:	4619      	moveq	r1, r3
    3ef4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3ef8:	d019      	beq.n	3f2e <__aeabi_dmul+0x24a>
    3efa:	ea94 0f0c 	teq	r4, ip
    3efe:	d102      	bne.n	3f06 <__aeabi_dmul+0x222>
    3f00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    3f04:	d113      	bne.n	3f2e <__aeabi_dmul+0x24a>
    3f06:	ea95 0f0c 	teq	r5, ip
    3f0a:	d105      	bne.n	3f18 <__aeabi_dmul+0x234>
    3f0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    3f10:	bf1c      	itt	ne
    3f12:	4610      	movne	r0, r2
    3f14:	4619      	movne	r1, r3
    3f16:	d10a      	bne.n	3f2e <__aeabi_dmul+0x24a>
    3f18:	ea81 0103 	eor.w	r1, r1, r3
    3f1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3f20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    3f24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3f28:	f04f 0000 	mov.w	r0, #0
    3f2c:	bd70      	pop	{r4, r5, r6, pc}
    3f2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    3f32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    3f36:	bd70      	pop	{r4, r5, r6, pc}

00003f38 <__aeabi_ddiv>:
    3f38:	b570      	push	{r4, r5, r6, lr}
    3f3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3f3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3f42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3f46:	bf1d      	ittte	ne
    3f48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3f4c:	ea94 0f0c 	teqne	r4, ip
    3f50:	ea95 0f0c 	teqne	r5, ip
    3f54:	f000 f8a7 	bleq	40a6 <__aeabi_ddiv+0x16e>
    3f58:	eba4 0405 	sub.w	r4, r4, r5
    3f5c:	ea81 0e03 	eor.w	lr, r1, r3
    3f60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3f64:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3f68:	f000 8088 	beq.w	407c <__aeabi_ddiv+0x144>
    3f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3f70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3f74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    3f78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    3f7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3f80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    3f84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    3f88:	ea4f 2600 	mov.w	r6, r0, lsl #8
    3f8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    3f90:	429d      	cmp	r5, r3
    3f92:	bf08      	it	eq
    3f94:	4296      	cmpeq	r6, r2
    3f96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    3f9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    3f9e:	d202      	bcs.n	3fa6 <__aeabi_ddiv+0x6e>
    3fa0:	085b      	lsrs	r3, r3, #1
    3fa2:	ea4f 0232 	mov.w	r2, r2, rrx
    3fa6:	1ab6      	subs	r6, r6, r2
    3fa8:	eb65 0503 	sbc.w	r5, r5, r3
    3fac:	085b      	lsrs	r3, r3, #1
    3fae:	ea4f 0232 	mov.w	r2, r2, rrx
    3fb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3fb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    3fba:	ebb6 0e02 	subs.w	lr, r6, r2
    3fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
    3fc2:	bf22      	ittt	cs
    3fc4:	1ab6      	subcs	r6, r6, r2
    3fc6:	4675      	movcs	r5, lr
    3fc8:	ea40 000c 	orrcs.w	r0, r0, ip
    3fcc:	085b      	lsrs	r3, r3, #1
    3fce:	ea4f 0232 	mov.w	r2, r2, rrx
    3fd2:	ebb6 0e02 	subs.w	lr, r6, r2
    3fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
    3fda:	bf22      	ittt	cs
    3fdc:	1ab6      	subcs	r6, r6, r2
    3fde:	4675      	movcs	r5, lr
    3fe0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    3fe4:	085b      	lsrs	r3, r3, #1
    3fe6:	ea4f 0232 	mov.w	r2, r2, rrx
    3fea:	ebb6 0e02 	subs.w	lr, r6, r2
    3fee:	eb75 0e03 	sbcs.w	lr, r5, r3
    3ff2:	bf22      	ittt	cs
    3ff4:	1ab6      	subcs	r6, r6, r2
    3ff6:	4675      	movcs	r5, lr
    3ff8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    3ffc:	085b      	lsrs	r3, r3, #1
    3ffe:	ea4f 0232 	mov.w	r2, r2, rrx
    4002:	ebb6 0e02 	subs.w	lr, r6, r2
    4006:	eb75 0e03 	sbcs.w	lr, r5, r3
    400a:	bf22      	ittt	cs
    400c:	1ab6      	subcs	r6, r6, r2
    400e:	4675      	movcs	r5, lr
    4010:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4014:	ea55 0e06 	orrs.w	lr, r5, r6
    4018:	d018      	beq.n	404c <__aeabi_ddiv+0x114>
    401a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    401e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    4022:	ea4f 1606 	mov.w	r6, r6, lsl #4
    4026:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    402a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    402e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    4032:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    4036:	d1c0      	bne.n	3fba <__aeabi_ddiv+0x82>
    4038:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    403c:	d10b      	bne.n	4056 <__aeabi_ddiv+0x11e>
    403e:	ea41 0100 	orr.w	r1, r1, r0
    4042:	f04f 0000 	mov.w	r0, #0
    4046:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    404a:	e7b6      	b.n	3fba <__aeabi_ddiv+0x82>
    404c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4050:	bf04      	itt	eq
    4052:	4301      	orreq	r1, r0
    4054:	2000      	moveq	r0, #0
    4056:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    405a:	bf88      	it	hi
    405c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4060:	f63f aeaf 	bhi.w	3dc2 <__aeabi_dmul+0xde>
    4064:	ebb5 0c03 	subs.w	ip, r5, r3
    4068:	bf04      	itt	eq
    406a:	ebb6 0c02 	subseq.w	ip, r6, r2
    406e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4072:	f150 0000 	adcs.w	r0, r0, #0
    4076:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    407a:	bd70      	pop	{r4, r5, r6, pc}
    407c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4080:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4084:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    4088:	bfc2      	ittt	gt
    408a:	ebd4 050c 	rsbsgt	r5, r4, ip
    408e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4092:	bd70      	popgt	{r4, r5, r6, pc}
    4094:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4098:	f04f 0e00 	mov.w	lr, #0
    409c:	3c01      	subs	r4, #1
    409e:	e690      	b.n	3dc2 <__aeabi_dmul+0xde>
    40a0:	ea45 0e06 	orr.w	lr, r5, r6
    40a4:	e68d      	b.n	3dc2 <__aeabi_dmul+0xde>
    40a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    40aa:	ea94 0f0c 	teq	r4, ip
    40ae:	bf08      	it	eq
    40b0:	ea95 0f0c 	teqeq	r5, ip
    40b4:	f43f af3b 	beq.w	3f2e <__aeabi_dmul+0x24a>
    40b8:	ea94 0f0c 	teq	r4, ip
    40bc:	d10a      	bne.n	40d4 <__aeabi_ddiv+0x19c>
    40be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    40c2:	f47f af34 	bne.w	3f2e <__aeabi_dmul+0x24a>
    40c6:	ea95 0f0c 	teq	r5, ip
    40ca:	f47f af25 	bne.w	3f18 <__aeabi_dmul+0x234>
    40ce:	4610      	mov	r0, r2
    40d0:	4619      	mov	r1, r3
    40d2:	e72c      	b.n	3f2e <__aeabi_dmul+0x24a>
    40d4:	ea95 0f0c 	teq	r5, ip
    40d8:	d106      	bne.n	40e8 <__aeabi_ddiv+0x1b0>
    40da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    40de:	f43f aefd 	beq.w	3edc <__aeabi_dmul+0x1f8>
    40e2:	4610      	mov	r0, r2
    40e4:	4619      	mov	r1, r3
    40e6:	e722      	b.n	3f2e <__aeabi_dmul+0x24a>
    40e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    40ec:	bf18      	it	ne
    40ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    40f2:	f47f aec5 	bne.w	3e80 <__aeabi_dmul+0x19c>
    40f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    40fa:	f47f af0d 	bne.w	3f18 <__aeabi_dmul+0x234>
    40fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    4102:	f47f aeeb 	bne.w	3edc <__aeabi_dmul+0x1f8>
    4106:	e712      	b.n	3f2e <__aeabi_dmul+0x24a>

00004108 <__aeabi_d2f>:
    4108:	ea4f 0241 	mov.w	r2, r1, lsl #1
    410c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4110:	bf24      	itt	cs
    4112:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4116:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    411a:	d90d      	bls.n	4138 <__aeabi_d2f+0x30>
    411c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4120:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4124:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4128:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    412c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4130:	bf08      	it	eq
    4132:	f020 0001 	biceq.w	r0, r0, #1
    4136:	4770      	bx	lr
    4138:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    413c:	d121      	bne.n	4182 <__aeabi_d2f+0x7a>
    413e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4142:	bfbc      	itt	lt
    4144:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4148:	4770      	bxlt	lr
    414a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    414e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4152:	f1c2 0218 	rsb	r2, r2, #24
    4156:	f1c2 0c20 	rsb	ip, r2, #32
    415a:	fa10 f30c 	lsls.w	r3, r0, ip
    415e:	fa20 f002 	lsr.w	r0, r0, r2
    4162:	bf18      	it	ne
    4164:	f040 0001 	orrne.w	r0, r0, #1
    4168:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    416c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4170:	fa03 fc0c 	lsl.w	ip, r3, ip
    4174:	ea40 000c 	orr.w	r0, r0, ip
    4178:	fa23 f302 	lsr.w	r3, r3, r2
    417c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4180:	e7cc      	b.n	411c <__aeabi_d2f+0x14>
    4182:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4186:	d107      	bne.n	4198 <__aeabi_d2f+0x90>
    4188:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    418c:	bf1e      	ittt	ne
    418e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4192:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4196:	4770      	bxne	lr
    4198:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    419c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    41a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    41a4:	4770      	bx	lr
    41a6:	bf00      	nop

000041a8 <__libc_init_array>:
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	4e0d      	ldr	r6, [pc, #52]	; (41e0 <__libc_init_array+0x38>)
    41ac:	4c0d      	ldr	r4, [pc, #52]	; (41e4 <__libc_init_array+0x3c>)
    41ae:	1ba4      	subs	r4, r4, r6
    41b0:	10a4      	asrs	r4, r4, #2
    41b2:	2500      	movs	r5, #0
    41b4:	42a5      	cmp	r5, r4
    41b6:	d109      	bne.n	41cc <__libc_init_array+0x24>
    41b8:	4e0b      	ldr	r6, [pc, #44]	; (41e8 <__libc_init_array+0x40>)
    41ba:	4c0c      	ldr	r4, [pc, #48]	; (41ec <__libc_init_array+0x44>)
    41bc:	f000 f9a2 	bl	4504 <_init>
    41c0:	1ba4      	subs	r4, r4, r6
    41c2:	10a4      	asrs	r4, r4, #2
    41c4:	2500      	movs	r5, #0
    41c6:	42a5      	cmp	r5, r4
    41c8:	d105      	bne.n	41d6 <__libc_init_array+0x2e>
    41ca:	bd70      	pop	{r4, r5, r6, pc}
    41cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    41d0:	4798      	blx	r3
    41d2:	3501      	adds	r5, #1
    41d4:	e7ee      	b.n	41b4 <__libc_init_array+0xc>
    41d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    41da:	4798      	blx	r3
    41dc:	3501      	adds	r5, #1
    41de:	e7f2      	b.n	41c6 <__libc_init_array+0x1e>
    41e0:	00004510 	.word	0x00004510
    41e4:	00004510 	.word	0x00004510
    41e8:	00004510 	.word	0x00004510
    41ec:	00004514 	.word	0x00004514

000041f0 <BLDC_commutation_clockwise>:
    41f0:	202d082d 10362036 081b101b              -.- 6 6.....

000041fc <BLDC_commutation_counter_clockwise>:
    41fc:	101b1036 082d081b 2036202d 682f2e2e     6.....-.- 6 ../h
    420c:	732f6c61 682f6372 615f6c61 615f6364     al/src/hal_adc_a
    421c:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
    422c:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    423c:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
    424c:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
    425c:	682f6372 735f6c61 6d5f6970 7973615f     rc/hal_spi_m_asy
    426c:	632e636e 00000000 682f2e2e 732f6c61     nc.c....../hal/s
    427c:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
    428c:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    429c:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
    42ac:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    42bc:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    42cc:	00632e72                                r.c.

000042d0 <_adcs>:
    42d0:	00000000 12030002 03331803 00000000     ..........3.....
    42e0:	00000000 00010001 00020000 18001203     ................
    42f0:	00000333 00000000 00010000 682f2e2e     3............./h
    4300:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    4310:	00000000                                ....

00004314 <_ccl_reg_cfgs>:
    4314:	16444412 00044400 00044400 00044400     .DD..D...D...D..
    4324:	00000000                                ....

00004328 <user_mux_confs>:
    4328:	00000100 00000000 00000000 00000000     ................
	...
    4354:	00000001 00000000 02000000 00000200     ................
	...

0000436c <channel_confs>:
    436c:	06320474 00000c74 00000000 00000000     t.2.t...........
	...

000043ac <interrupt_cfg>:
    43ac:	00000002 00000002 00000000 00000000     ................
	...
    442c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    443c:	69707371 0000632e 40003000 40003400     qspi.c...0.@.4.@
    444c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C

0000445c <_usarts>:
	...

00004474 <_i2cms>:
	...

0000448c <_i2css>:
	...

0000449c <sercomspi_regs>:
    449c:	1022000c 00020000 00000000 01ff0018     ..".............
    44ac:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    44bc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    44cc:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A

000044dc <_tcs>:
    44dc:	006d0002 00000308 00000000 000000fa     ..m.............
    44ec:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    44fc:	63745f6c 0000632e                       l_tc.c..

00004504 <_init>:
    4504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4506:	bf00      	nop
    4508:	bcf8      	pop	{r3, r4, r5, r6, r7}
    450a:	bc08      	pop	{r3}
    450c:	469e      	mov	lr, r3
    450e:	4770      	bx	lr

00004510 <__init_array_start>:
    4510:	00000289 	.word	0x00000289

00004514 <_fini>:
    4514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4516:	bf00      	nop
    4518:	bcf8      	pop	{r3, r4, r5, r6, r7}
    451a:	bc08      	pop	{r3}
    451c:	469e      	mov	lr, r3
    451e:	4770      	bx	lr

00004520 <__fini_array_start>:
    4520:	00000265 	.word	0x00000265
